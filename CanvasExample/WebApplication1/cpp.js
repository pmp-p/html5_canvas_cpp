// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof require === 'function';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 21696,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5264576,
    DYNAMIC_BASE = 5264576,
    DYNAMICTOP_PTR = 21664;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { add_canvas(UTF8ToString($0)) },
 function($0, $1, $2, $3, $4, $5) { var ctx = get_canvas(UTF8ToString($0)); var grad = ctx.createLinearGradient($1, $2, $3, $4); add_gradient(UTF8ToString($5), grad); },
 function($0, $1, $2) { var grad = get_gradient(UTF8ToString($0)); grad.addColorStop($1, UTF8ToString($2)); },
 function($0, $1) { var ctx = get_canvas(UTF8ToString($0)); ctx.fillStyle = get_gradient(UTF8ToString($1)); },
 function($0, $1, $2, $3, $4) { var ctx = get_canvas(UTF8ToString($0)); ctx.fillRect($1, $2, $3, $4); },
 function($0, $1, $2, $3, $4, $5) { var ctx = get_canvas(UTF8ToString($0)); var imgdata = ctx.getImageData($1, $2, $3, $4); add_imgdata(UTF8ToString($5), imgdata); },
 function($0, $1, $2, $3, $4, $5, $6, $7) { var ctx = get_canvas(UTF8ToString($0)); var imgdata = get_imgdata(UTF8ToString($7)); ctx.putImageData(imgdata, $1, $2, $3, $4, $5, $6); },
 function($0, $1) { var ctx = get_canvas(UTF8ToString($0)); ctx.strokeStyle = UTF8ToString($1); },
 function($0) { var ctx = get_canvas(UTF8ToString($0)); ctx.beginPath(); },
 function($0, $1, $2) { var ctx = get_canvas(UTF8ToString($0)); ctx.moveTo($1, $2); },
 function($0, $1, $2, $3, $4) { var ctx = get_canvas(UTF8ToString($0)); ctx.quadraticCurveTo($1, $2, $3, $4); },
 function($0) { var ctx = get_canvas(UTF8ToString($0)); ctx.stroke(); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iidddd(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iidd(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_iiddddi(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}

function _emscripten_asm_const_iiiiiiiii(code, a0, a1, a2, a3, a4, a5, a6, a7) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7);
}

function _emscripten_asm_const_iidi(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




// STATICTOP = STATIC_BASE + 21688;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 21680
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { err("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { err("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iii": nullFunc_iii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_iiiiid": nullFunc_iiiiid,
  "nullFunc_iiiiii": nullFunc_iiiiii,
  "nullFunc_iiiiiid": nullFunc_iiiiiid,
  "nullFunc_iiiiiii": nullFunc_iiiiiii,
  "nullFunc_iiiiiiii": nullFunc_iiiiiiii,
  "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii,
  "nullFunc_v": nullFunc_v,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vii": nullFunc_vii,
  "nullFunc_viii": nullFunc_viii,
  "nullFunc_viiii": nullFunc_viiii,
  "nullFunc_viiiii": nullFunc_viiiii,
  "nullFunc_viiiiii": nullFunc_viiiiii,
  "___cxa_uncaught_exception": ___cxa_uncaught_exception,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___map_file": ___map_file,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___syscall91": ___syscall91,
  "___unlock": ___unlock,
  "__addDays": __addDays,
  "__arraySum": __arraySum,
  "__isLeapYear": __isLeapYear,
  "_abort": _abort,
  "_emscripten_asm_const_ii": _emscripten_asm_const_ii,
  "_emscripten_asm_const_iidd": _emscripten_asm_const_iidd,
  "_emscripten_asm_const_iidddd": _emscripten_asm_const_iidddd,
  "_emscripten_asm_const_iiddddi": _emscripten_asm_const_iiddddi,
  "_emscripten_asm_const_iidi": _emscripten_asm_const_iidi,
  "_emscripten_asm_const_iii": _emscripten_asm_const_iii,
  "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii,
  "_emscripten_asm_const_iiiiiiiii": _emscripten_asm_const_iiiiiiiii,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_getenv": _getenv,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_pthread_cond_wait": _pthread_cond_wait,
  "_strftime": _strftime,
  "_strftime_l": _strftime_l,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiid=env.nullFunc_iiiiid,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiid=env.nullFunc_iiiiiid,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  ___cxa_uncaught_exception=env.___cxa_uncaught_exception,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___map_file=env.___map_file,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___syscall91=env.___syscall91,
  ___unlock=env.___unlock,
  __addDays=env.__addDays,
  __arraySum=env.__arraySum,
  __isLeapYear=env.__isLeapYear,
  _abort=env._abort,
  _emscripten_asm_const_ii=env._emscripten_asm_const_ii,
  _emscripten_asm_const_iidd=env._emscripten_asm_const_iidd,
  _emscripten_asm_const_iidddd=env._emscripten_asm_const_iidddd,
  _emscripten_asm_const_iiddddi=env._emscripten_asm_const_iiddddi,
  _emscripten_asm_const_iidi=env._emscripten_asm_const_iidi,
  _emscripten_asm_const_iii=env._emscripten_asm_const_iii,
  _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii,
  _emscripten_asm_const_iiiiiiiii=env._emscripten_asm_const_iiiiiiiii,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _getenv=env._getenv,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _pthread_cond_wait=env._pthread_cond_wait,
  _strftime=env._strftime,
  _strftime_l=env._strftime_l,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  STACKTOP = 21696,
  STACK_MAX = 5264576,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__I_000101();
    __GLOBAL__sub_I_iostream_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _main() {
 var $ctx = 0, $grad = 0, $imgData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ctx = sp + 32|0;
 $grad = sp + 20|0;
 $imgData = sp;
 __ZN6canvas6CanvasC2EPKcii($ctx,10928,640,480);
 __ZN6canvas6Canvas20createLinearGradientEPKcdddd($grad,$ctx,10935,0.0,0.0,640.0,0.0);
 __ZN6canvas8Gradient12addColorStopEdPKc($grad,0.0,10940);
 __ZN6canvas8Gradient12addColorStopEdPKc($grad,1.0,10948);
 __ZN6canvas6Canvas13set_fillStyleERKNS_8GradientE($ctx,$grad);
 __ZN6canvas6Canvas8fillRectEdddd($ctx,0.0,0.0,640.0,480.0);
 __ZN6canvas6Canvas12getImageDataEPKciiii($imgData,$ctx,10956,10,10,100,100);
 __ZN6canvas6Canvas12putImageDataERNS_9ImageDataEiiiiii($ctx,$imgData,200,200,0,0,100,100);
 __ZN6canvas6Canvas15set_strokeStyleEPKc($ctx,10964);
 __ZN6canvas6Canvas9beginPathEv($ctx);
 __ZN6canvas6Canvas6moveToEdd($ctx,20.0,20.0);
 __ZN6canvas6Canvas16quadraticCurveToEdddd($ctx,20.0,100.0,200.0,20.0);
 __ZN6canvas6Canvas6strokeEv($ctx);
 (__ZN6canvas6Canvas7savePngEPKc($ctx,10972)|0);
 (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(20156,10990)|0);
 __ZN6canvas9ImageDataD2Ev($imgData);
 __ZN6canvas8GradientD2Ev($grad);
 __ZN6canvas6CanvasD2Ev($ctx);
 STACKTOP = sp;return 0;
}
function __ZN6canvas6CanvasC2EPKcii($this,$name,$width,$height) {
 $this = $this|0;
 $name = $name|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__s$addr$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call$i = 0, $call3 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $height$addr = 0, $name$addr = 0;
 var $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i5 = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i$i6 = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i$i7 = 0, $this$addr$i15$i$i$i = 0, $this$addr$i2$i$i = 0, $this$addr$i6$i$i$i = 0, $this$addr$i8 = 0, $this1 = 0, $this1$i = 0;
 var $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i12 = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i11 = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i10 = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i3$i$i = 0, $this1$i7$i$i$i = 0, $this1$i9 = 0, $tobool$i$i$i$i = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $this$addr = $this;
 $name$addr = $name;
 $width$addr = $width;
 $height$addr = $height;
 $this1 = $this$addr;
 $0 = $name$addr;
 $this$addr$i = $this1;
 $__s$addr$i = $0;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $1 = $__s$addr$i;
 $2 = $__s$addr$i;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this1$i,$1,$call$i);
 $this$addr$i8 = $this1;
 $this1$i9 = $this$addr$i8;
 $this$addr$i$i7 = $this1$i9;
 $this1$i$i10 = $this$addr$i$i7;
 $this$addr$i$i$i6 = $this1$i$i10;
 $this1$i$i$i11 = $this$addr$i$i$i6;
 $this$addr$i$i$i$i5 = $this1$i$i$i11;
 $this1$i$i$i$i12 = $this$addr$i$i$i$i5;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i12;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $3 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $conv$i$i$i$i = $4&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i11;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $5 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $5;
  $__p$addr$i$i$i = $cond$i$i$i;
  $8 = $__p$addr$i$i$i;
  $call3 = _emscripten_asm_const_ii(0,($8|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i11;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $6 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $6;
  $7 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $7;
  $__p$addr$i$i$i = $cond$i$i$i;
  $8 = $__p$addr$i$i$i;
  $call3 = _emscripten_asm_const_ii(0,($8|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas20createLinearGradientEPKcdddd($agg$result,$this,$name,$x0,$y0,$x1,$y1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $name = $name|0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__t$addr$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0;
 var $conv$i$i$i$i = 0, $name$addr = 0, $ref$tmp = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, $x0$addr = 0.0, $x1$addr = 0.0, $y0$addr = 0.0, $y1$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $ref$tmp = sp + 32|0;
 $this$addr = $this;
 $name$addr = $name;
 $x0$addr = $x0;
 $y0$addr = $y0;
 $x1$addr = $x1;
 $y1$addr = $y1;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
 }
 $__p$addr$i$i$i = $cond$i$i$i;
 $5 = $__p$addr$i$i$i;
 $6 = $x0$addr;
 $7 = $y0$addr;
 $8 = $x1$addr;
 $9 = $y1$addr;
 $10 = $name$addr;
 $call2 = _emscripten_asm_const_iiddddi(1,($5|0),(+$6),(+$7),(+$8),(+$9),($10|0))|0;
 $11 = $name$addr;
 __ZN6canvas8GradientC2EPKc($ref$tmp,$11);
 $__t$addr$i = $ref$tmp;
 $12 = $__t$addr$i;
 __ZN6canvas8GradientC2EOS0_($agg$result,$12);
 __ZN6canvas8GradientD2Ev($ref$tmp);
 STACKTOP = sp;return;
}
function __ZN6canvas8Gradient12addColorStopEdPKc($this,$stop,$color) {
 $this = $this|0;
 $stop = +$stop;
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $color$addr = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $stop$addr = 0.0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0;
 var $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0;
 var $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $this$addr = $this;
 $stop$addr = $stop;
 $color$addr = $color;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $stop$addr;
  $7 = $color$addr;
  $call2 = _emscripten_asm_const_iidi(2,($5|0),(+$6),($7|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $stop$addr;
  $7 = $color$addr;
  $call2 = _emscripten_asm_const_iidi(2,($5|0),(+$6),($7|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas13set_fillStyleERKNS_8GradientE($this,$grad) {
 $this = $this|0;
 $grad = $grad|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $call3 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $grad$addr = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0;
 var $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0;
 var $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $this$addr = $this;
 $grad$addr = $grad;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $grad$addr;
  $call2 = (__ZNK6canvas8Gradient7getNameEv($6)|0);
  $call3 = _emscripten_asm_const_iii(3,($5|0),($call2|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $grad$addr;
  $call2 = (__ZNK6canvas8Gradient7getNameEv($6)|0);
  $call3 = _emscripten_asm_const_iii(3,($5|0),($call2|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas8fillRectEdddd($this,$x,$y,$width,$height) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $width = +$width;
 $height = +$height;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $height$addr = 0.0, $this$addr = 0, $this$addr$i = 0;
 var $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0;
 var $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, $width$addr = 0.0, $x$addr = 0.0, $y$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $this$addr = $this;
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $x$addr;
  $7 = $y$addr;
  $8 = $width$addr;
  $9 = $height$addr;
  $call2 = _emscripten_asm_const_iidddd(4,($5|0),(+$6),(+$7),(+$8),(+$9))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $x$addr;
  $7 = $y$addr;
  $8 = $width$addr;
  $9 = $height$addr;
  $call2 = _emscripten_asm_const_iidddd(4,($5|0),(+$6),(+$7),(+$8),(+$9))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas12getImageDataEPKciiii($agg$result,$this,$name,$x,$y,$width,$height) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $name = $name|0;
 $x = $x|0;
 $y = $y|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__t$addr$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0;
 var $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $height$addr = 0, $name$addr = 0, $ref$tmp = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0;
 var $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $ref$tmp = sp;
 $this$addr = $this;
 $name$addr = $name;
 $x$addr = $x;
 $y$addr = $y;
 $width$addr = $width;
 $height$addr = $height;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
 }
 $__p$addr$i$i$i = $cond$i$i$i;
 $5 = $__p$addr$i$i$i;
 $6 = $x$addr;
 $7 = $y$addr;
 $8 = $width$addr;
 $9 = $height$addr;
 $10 = $name$addr;
 $call2 = _emscripten_asm_const_iiiiiii(5,($5|0),($6|0),($7|0),($8|0),($9|0),($10|0))|0;
 $11 = $name$addr;
 $12 = $width$addr;
 $13 = $height$addr;
 __ZN6canvas9ImageDataC2EPKcii($ref$tmp,$11,$12,$13);
 $__t$addr$i = $ref$tmp;
 $14 = $__t$addr$i;
 __ZN6canvas9ImageDataC2EOS0_($agg$result,$14);
 __ZN6canvas9ImageDataD2Ev($ref$tmp);
 STACKTOP = sp;return;
}
function __ZN6canvas6Canvas12putImageDataERNS_9ImageDataEiiiiii($this,$imgData,$x,$y,$dirtyX,$dirtyY,$dirtyWidth,$dirtyHeight) {
 $this = $this|0;
 $imgData = $imgData|0;
 $x = $x|0;
 $y = $y|0;
 $dirtyX = $dirtyX|0;
 $dirtyY = $dirtyY|0;
 $dirtyWidth = $dirtyWidth|0;
 $dirtyHeight = $dirtyHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call = 0, $call4 = 0;
 var $call5 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $dirtyHeight$addr = 0, $dirtyWidth$addr = 0, $dirtyX$addr = 0, $dirtyY$addr = 0, $imgData$addr = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0;
 var $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, $vararg_buffer = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $this$addr = $this;
 $imgData$addr = $imgData;
 $x$addr = $x;
 $y$addr = $y;
 $dirtyX$addr = $dirtyX;
 $dirtyY$addr = $dirtyY;
 $dirtyWidth$addr = $dirtyWidth;
 $dirtyHeight$addr = $dirtyHeight;
 $this1 = $this$addr;
 $0 = $imgData$addr;
 $call = (__ZNK6canvas9ImageData4nameEv($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 (_printf(11551,$vararg_buffer)|0);
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $1 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $conv$i$i$i$i = $2&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $3 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $3;
  $__p$addr$i$i$i = $cond$i$i$i;
  $6 = $__p$addr$i$i$i;
  $7 = $x$addr;
  $8 = $y$addr;
  $9 = $dirtyX$addr;
  $10 = $dirtyY$addr;
  $11 = $dirtyWidth$addr;
  $12 = $dirtyHeight$addr;
  $13 = $imgData$addr;
  $call4 = (__ZNK6canvas9ImageData4nameEv($13)|0);
  $call5 = _emscripten_asm_const_iiiiiiiii(6,($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($call4|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $4 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $4;
  $5 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $5;
  $__p$addr$i$i$i = $cond$i$i$i;
  $6 = $__p$addr$i$i$i;
  $7 = $x$addr;
  $8 = $y$addr;
  $9 = $dirtyX$addr;
  $10 = $dirtyY$addr;
  $11 = $dirtyWidth$addr;
  $12 = $dirtyHeight$addr;
  $13 = $imgData$addr;
  $call4 = (__ZNK6canvas9ImageData4nameEv($13)|0);
  $call5 = _emscripten_asm_const_iiiiiiiii(6,($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($call4|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas15set_strokeStyleEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0;
 var $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0;
 var $tobool$i$i$i$i = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $this$addr = $this;
 $value$addr = $value;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $value$addr;
  $call2 = _emscripten_asm_const_iii(7,($5|0),($6|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $value$addr;
  $call2 = _emscripten_asm_const_iii(7,($5|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas9beginPathEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0;
 var $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $call2 = _emscripten_asm_const_ii(8,($5|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $call2 = _emscripten_asm_const_ii(8,($5|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas6moveToEdd($this,$x,$y) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0;
 var $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0;
 var $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, $x$addr = 0.0, $y$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $this$addr = $this;
 $x$addr = $x;
 $y$addr = $y;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $x$addr;
  $7 = $y$addr;
  $call2 = _emscripten_asm_const_iidd(9,($5|0),(+$6),(+$7))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $x$addr;
  $7 = $y$addr;
  $call2 = _emscripten_asm_const_iidd(9,($5|0),(+$6),(+$7))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas16quadraticCurveToEdddd($this,$cpx,$cpy,$endx,$endy) {
 $this = $this|0;
 $cpx = +$cpx;
 $cpy = +$cpy;
 $endx = +$endx;
 $endy = +$endy;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $cpx$addr = 0.0, $cpy$addr = 0.0, $endx$addr = 0.0;
 var $endy$addr = 0.0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0;
 var $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $this$addr = $this;
 $cpx$addr = $cpx;
 $cpy$addr = $cpy;
 $endx$addr = $endx;
 $endy$addr = $endy;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $cpx$addr;
  $7 = $cpy$addr;
  $8 = $endx$addr;
  $9 = $endy$addr;
  $call2 = _emscripten_asm_const_iidddd(10,($5|0),(+$6),(+$7),(+$8),(+$9))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $6 = $cpx$addr;
  $7 = $cpy$addr;
  $8 = $endx$addr;
  $9 = $endy$addr;
  $call2 = _emscripten_asm_const_iidddd(10,($5|0),(+$6),(+$7),(+$8),(+$9))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas6strokeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0;
 var $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $call2 = _emscripten_asm_const_ii(11,($5|0))|0;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  $call2 = _emscripten_asm_const_ii(11,($5|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN6canvas6Canvas7savePngEPKc($this,$file) {
 $this = $this|0;
 $file = $file|0;
 var $file$addr = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $file$addr = $file;
 STACKTOP = sp;return 1;
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__os$addr = 0, $__str$addr = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__os$addr = $__os;
 $__str$addr = $__str;
 $0 = $__os$addr;
 $1 = $__str$addr;
 $2 = $__str$addr;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $call1 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0,$1,$call)|0);
 STACKTOP = sp;return ($call1|0);
}
function __ZN6canvas9ImageDataD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN6canvas8GradientD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN6canvas6CanvasD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $__s$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__s$addr = $__s;
 $0 = $__s$addr;
 $call = (_strlen($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN6canvas8GradientC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $__s$addr$i = 0, $call$i = 0, $name$addr = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i2$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $name$addr = $name;
 $this1 = $this$addr;
 $0 = $name$addr;
 $this$addr$i = $this1;
 $__s$addr$i = $0;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $1 = $__s$addr$i;
 $2 = $__s$addr$i;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this1$i,$1,$call$i);
 STACKTOP = sp;return;
}
function __ZN6canvas8GradientC2EOS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__a$i$i$i = 0, $__c$addr$i$i$i$i = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__s$addr$i$i$i$i = 0, $__s$addr$i38$i$i$i = 0, $__size_$i45$i$i$i = 0, $__str$addr$i = 0, $__str$addr$i$i = 0, $__str$addr$i$i$i = 0, $__t$addr$i = 0, $__t$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $agg$tmp$i = 0;
 var $agg$tmp$i$i$i = 0, $agg$tmp2$i = 0, $agg$tmp2$i$i$i = 0, $and$i$i$i$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i11$i$i$i = 0, $inc$i$i = 0, $inc$i$i$i = 0, $other$addr = 0, $ref$tmp$i$i$i = 0, $ref$tmp4$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0;
 var $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i$i = 0, $this$addr$i$i$i$i15$i$i = 0, $this$addr$i$i$i$i5 = 0, $this$addr$i$i$i16$i$i = 0, $this$addr$i$i$i17$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i$i23$i$i = 0, $this$addr$i$i$i25$i$i$i = 0, $this$addr$i$i$i35$i$i$i = 0, $this$addr$i$i$i4$i$i$i$i = 0, $this$addr$i$i$i6 = 0, $this$addr$i$i$i7$i$i$i = 0, $this$addr$i$i10$i$i = 0, $this$addr$i$i17$i$i = 0, $this$addr$i$i18$i$i$i = 0, $this$addr$i$i24$i$i = 0, $this$addr$i$i26$i$i$i = 0, $this$addr$i$i3$i = 0;
 var $this$addr$i$i36$i$i$i = 0, $this$addr$i$i5$i$i$i$i = 0, $this$addr$i$i6$i$i = 0, $this$addr$i$i7 = 0, $this$addr$i$i8$i$i$i = 0, $this$addr$i11$i$i = 0, $this$addr$i18$i$i = 0, $this$addr$i19$i$i$i = 0, $this$addr$i2$i$i = 0, $this$addr$i25$i$i = 0, $this$addr$i27$i$i$i = 0, $this$addr$i37$i$i$i = 0, $this$addr$i4$i = 0, $this$addr$i4$i$i = 0, $this$addr$i5$i$i$i = 0, $this$addr$i6$i$i$i$i = 0, $this$addr$i7$i$i = 0, $this$addr$i8 = 0, $this$addr$i9$i$i$i = 0, $this1 = 0;
 var $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i$i = 0, $this1$i$i$i$i22$i$i = 0, $this1$i$i$i11 = 0, $this1$i$i$i14$i$i$i = 0, $this1$i$i$i21$i$i = 0, $this1$i$i$i23$i$i$i = 0, $this1$i$i$i28$i$i = 0, $this1$i$i$i31$i$i$i = 0, $this1$i$i$i42$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i10 = 0, $this1$i$i13$i$i = 0, $this1$i$i13$i$i$i = 0, $this1$i$i20$i$i = 0, $this1$i$i22$i$i$i = 0;
 var $this1$i$i27$i$i = 0, $this1$i$i30$i$i$i = 0, $this1$i$i41$i$i$i = 0, $this1$i$i6$i = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i$i$i = 0, $this1$i10$i$i$i = 0, $this1$i12$i$i = 0, $this1$i19$i$i = 0, $this1$i20$i$i$i = 0, $this1$i26$i$i = 0, $this1$i28$i$i$i = 0, $this1$i3$i$i = 0, $this1$i39$i$i$i = 0, $this1$i5$i = 0, $this1$i5$i$i = 0, $this1$i6$i$i$i = 0, $this1$i7$i$i$i$i = 0, $this1$i8$i$i = 0, $this1$i9 = 0;
 var $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp2$i$i$i = sp + 8|0;
 $agg$tmp$i$i$i = sp + 251|0;
 $ref$tmp$i$i$i = sp + 250|0;
 $ref$tmp4$i$i$i = sp + 249|0;
 $agg$tmp2$i = sp;
 $agg$tmp$i = sp + 248|0;
 $this$addr = $this;
 $other$addr = $other;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 $4 = $other$addr;
 $__t$addr$i = $4;
 $5 = $__t$addr$i;
 $this$addr$i8 = $this1;
 $__str$addr$i = $5;
 $this1$i9 = $this$addr$i8;
 $6 = $__str$addr$i;
 ;HEAP8[$agg$tmp2$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $this$addr$i$i7 = $this1$i9;
 $__str$addr$i$i = $6;
 $this1$i$i10 = $this$addr$i$i7;
 $this$addr$i$i$i6 = $this1$i$i10;
 $this1$i$i$i11 = $this$addr$i$i$i6;
 $this$addr$i$i$i$i5 = $this1$i$i$i11;
 $this$addr$i5$i$i$i = $this1$i$i$i11;
 $this1$i6$i$i$i = $this$addr$i5$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i6$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $7 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $conv$i$i$i$i = $8&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i19$i$i$i = $this1$i$i$i11;
  $this1$i20$i$i$i = $this$addr$i19$i$i$i;
  $this$addr$i$i18$i$i$i = $this1$i20$i$i$i;
  $this1$i$i22$i$i$i = $this$addr$i$i18$i$i$i;
  $this$addr$i$i$i17$i$i$i = $this1$i$i22$i$i$i;
  $this1$i$i$i23$i$i$i = $this$addr$i$i$i17$i$i$i;
  $9 = HEAP32[$this1$i$i$i23$i$i$i>>2]|0;
  HEAP8[$ref$tmp$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($9,$ref$tmp$i$i$i);
  $this$addr$i37$i$i$i = $this1$i$i$i11;
  $__s$addr$i38$i$i$i = 0;
  $this1$i39$i$i$i = $this$addr$i37$i$i$i;
  $10 = $__s$addr$i38$i$i$i;
  $this$addr$i$i36$i$i$i = $this1$i39$i$i$i;
  $this1$i$i41$i$i$i = $this$addr$i$i36$i$i$i;
  $this$addr$i$i$i35$i$i$i = $this1$i$i41$i$i$i;
  $this1$i$i$i42$i$i$i = $this$addr$i$i$i35$i$i$i;
  $__size_$i45$i$i$i = ((($this1$i$i$i42$i$i$i)) + 4|0);
  HEAP32[$__size_$i45$i$i$i>>2] = $10;
 } else {
  $this$addr$i27$i$i$i = $this1$i$i$i11;
  $this1$i28$i$i$i = $this$addr$i27$i$i$i;
  $this$addr$i$i26$i$i$i = $this1$i28$i$i$i;
  $this1$i$i30$i$i$i = $this$addr$i$i26$i$i$i;
  $this$addr$i$i$i25$i$i$i = $this1$i$i30$i$i$i;
  $this1$i$i$i31$i$i$i = $this$addr$i$i$i25$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i31$i$i$i;
  $11 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $11;
  $12 = $__x$addr$i$i$i$i$i$i;
  HEAP8[$ref$tmp4$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($12,$ref$tmp4$i$i$i);
  $this$addr$i9$i$i$i = $this1$i$i$i11;
  $__s$addr$i$i$i$i = 0;
  $this1$i10$i$i$i = $this$addr$i9$i$i$i;
  $13 = $__s$addr$i$i$i$i;
  $conv$i11$i$i$i = $13&255;
  $this$addr$i$i8$i$i$i = $this1$i10$i$i$i;
  $this1$i$i13$i$i$i = $this$addr$i$i8$i$i$i;
  $this$addr$i$i$i7$i$i$i = $this1$i$i13$i$i$i;
  $this1$i$i$i14$i$i$i = $this$addr$i$i$i7$i$i$i;
  $14 = ((($this1$i$i$i14$i$i$i)) + 11|0);
  HEAP8[$14>>0] = $conv$i11$i$i$i;
 }
 $this$addr$i4$i$i = $this1$i$i10;
 $this1$i5$i$i = $this$addr$i4$i$i;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($this1$i5$i$i,0);
 $15 = $__str$addr$i$i;
 $this$addr$i7$i$i = $15;
 $this1$i8$i$i = $this$addr$i7$i$i;
 $this$addr$i$i6$i$i = $this1$i8$i$i;
 $this1$i$i9$i$i = $this$addr$i$i6$i$i;
 $this$addr$i11$i$i = $this1$i$i10;
 $this1$i12$i$i = $this$addr$i11$i$i;
 $this$addr$i$i10$i$i = $this1$i12$i$i;
 $this1$i$i13$i$i = $this$addr$i$i10$i$i;
 ;HEAP32[$this1$i$i13$i$i>>2]=HEAP32[$this1$i$i9$i$i>>2]|0;HEAP32[$this1$i$i13$i$i+4>>2]=HEAP32[$this1$i$i9$i$i+4>>2]|0;HEAP32[$this1$i$i13$i$i+8>>2]=HEAP32[$this1$i$i9$i$i+8>>2]|0;
 $16 = $__str$addr$i$i;
 $this$addr$i18$i$i = $this1$i$i10;
 $__str$addr$i$i$i = $16;
 $this1$i19$i$i = $this$addr$i18$i$i;
 $17 = $__str$addr$i$i$i;
 ;HEAP8[$agg$tmp2$i$i$i>>0]=HEAP8[$agg$tmp$i$i$i>>0]|0;
 $this$addr$i$i17$i$i = $this1$i19$i$i;
 $__c$addr$i$i$i$i = $17;
 $this1$i$i20$i$i = $this$addr$i$i17$i$i;
 $18 = $__c$addr$i$i$i$i;
 $this$addr$i$i$i16$i$i = $18;
 $this1$i$i$i21$i$i = $this$addr$i$i$i16$i$i;
 $this$addr$i$i$i$i15$i$i = $this1$i$i$i21$i$i;
 $this1$i$i$i$i22$i$i = $this$addr$i$i$i$i15$i$i;
 $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i22$i$i;
 $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
 $__t$addr$i$i$i$i$i = $this1$i$i$i$i$i$i$i;
 $this$addr$i6$i$i$i$i = $this1$i$i20$i$i;
 $this1$i7$i$i$i$i = $this$addr$i6$i$i$i$i;
 $this$addr$i$i5$i$i$i$i = $this1$i7$i$i$i$i;
 $this1$i$i9$i$i$i$i = $this$addr$i$i5$i$i$i$i;
 $this$addr$i$i$i4$i$i$i$i = $this1$i$i9$i$i$i$i;
 $19 = $__str$addr$i$i;
 $this$addr$i25$i$i = $19;
 $this1$i26$i$i = $this$addr$i25$i$i;
 $this$addr$i$i24$i$i = $this1$i26$i$i;
 $this1$i$i27$i$i = $this$addr$i$i24$i$i;
 $this$addr$i$i$i23$i$i = $this1$i$i27$i$i;
 $this1$i$i$i28$i$i = $this$addr$i$i$i23$i$i;
 $__a$i$i$i = $this1$i$i$i28$i$i;
 $__i$i$i$i = 0;
 while(1) {
  $20 = $__i$i$i$i;
  $cmp$i$i$i = ($20>>>0)<(3);
  if (!($cmp$i$i$i)) {
   break;
  }
  $21 = $__a$i$i$i;
  $22 = $__i$i$i$i;
  $arrayidx$i$i$i = (($21) + ($22<<2)|0);
  HEAP32[$arrayidx$i$i$i>>2] = 0;
  $23 = $__i$i$i$i;
  $inc$i$i$i = (($23) + 1)|0;
  $__i$i$i$i = $inc$i$i$i;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $__c1$addr = 0, $__c2$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c2$addr;
 $1 = HEAP8[$0>>0]|0;
 $2 = $__c1$addr;
 HEAP8[$2>>0] = $1;
 STACKTOP = sp;return;
}
function __ZNK6canvas8Gradient7getNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0;
 var $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN6canvas9ImageDataC2EPKcii($this,$name,$width,$height) {
 $this = $this|0;
 $name = $name|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__s$addr$i = 0, $call$i = 0, $height$addr = 0, $m_Height = 0, $m_Width = 0, $name$addr = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i2$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0;
 var $this1$i$i$i = 0, $this1$i3$i$i = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $this$addr = $this;
 $name$addr = $name;
 $width$addr = $width;
 $height$addr = $height;
 $this1 = $this$addr;
 $0 = $name$addr;
 $this$addr$i = $this1;
 $__s$addr$i = $0;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $1 = $__s$addr$i;
 $2 = $__s$addr$i;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this1$i,$1,$call$i);
 $m_Width = ((($this1)) + 12|0);
 $3 = $width$addr;
 HEAP32[$m_Width>>2] = $3;
 $m_Height = ((($this1)) + 16|0);
 $4 = $height$addr;
 HEAP32[$m_Height>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN6canvas9ImageDataC2EOS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__a$i$i$i = 0, $__c$addr$i$i$i$i = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__s$addr$i$i$i$i = 0, $__s$addr$i38$i$i$i = 0, $__size_$i45$i$i$i = 0, $__str$addr$i = 0, $__str$addr$i$i = 0, $__str$addr$i$i$i = 0;
 var $__t$addr$i = 0, $__t$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $agg$tmp$i = 0, $agg$tmp$i$i$i = 0, $agg$tmp2$i = 0, $agg$tmp2$i$i$i = 0, $and$i$i$i$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i11$i$i$i = 0, $inc$i$i = 0, $inc$i$i$i = 0, $m_Height = 0, $m_Height6 = 0, $m_Width = 0, $m_Width5 = 0;
 var $other$addr = 0, $ref$tmp$i$i$i = 0, $ref$tmp4$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i$i = 0, $this$addr$i$i$i$i15$i$i = 0, $this$addr$i$i$i$i7 = 0, $this$addr$i$i$i16$i$i = 0, $this$addr$i$i$i17$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i$i23$i$i = 0, $this$addr$i$i$i25$i$i$i = 0, $this$addr$i$i$i35$i$i$i = 0, $this$addr$i$i$i4$i$i$i$i = 0;
 var $this$addr$i$i$i7$i$i$i = 0, $this$addr$i$i$i8 = 0, $this$addr$i$i10$i$i = 0, $this$addr$i$i17$i$i = 0, $this$addr$i$i18$i$i$i = 0, $this$addr$i$i24$i$i = 0, $this$addr$i$i26$i$i$i = 0, $this$addr$i$i3$i = 0, $this$addr$i$i36$i$i$i = 0, $this$addr$i$i5$i$i$i$i = 0, $this$addr$i$i6$i$i = 0, $this$addr$i$i8$i$i$i = 0, $this$addr$i$i9 = 0, $this$addr$i10 = 0, $this$addr$i11$i$i = 0, $this$addr$i18$i$i = 0, $this$addr$i19$i$i$i = 0, $this$addr$i2$i$i = 0, $this$addr$i25$i$i = 0, $this$addr$i27$i$i$i = 0;
 var $this$addr$i37$i$i$i = 0, $this$addr$i4$i = 0, $this$addr$i4$i$i = 0, $this$addr$i5$i$i$i = 0, $this$addr$i6$i$i$i$i = 0, $this$addr$i7$i$i = 0, $this$addr$i9$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i$i = 0, $this1$i$i$i$i22$i$i = 0, $this1$i$i$i13 = 0, $this1$i$i$i14$i$i$i = 0, $this1$i$i$i21$i$i = 0, $this1$i$i$i23$i$i$i = 0, $this1$i$i$i28$i$i = 0;
 var $this1$i$i$i31$i$i$i = 0, $this1$i$i$i42$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i12 = 0, $this1$i$i13$i$i = 0, $this1$i$i13$i$i$i = 0, $this1$i$i20$i$i = 0, $this1$i$i22$i$i$i = 0, $this1$i$i27$i$i = 0, $this1$i$i30$i$i$i = 0, $this1$i$i41$i$i$i = 0, $this1$i$i6$i = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i$i$i = 0, $this1$i10$i$i$i = 0, $this1$i11 = 0, $this1$i12$i$i = 0, $this1$i19$i$i = 0, $this1$i20$i$i$i = 0, $this1$i26$i$i = 0;
 var $this1$i28$i$i$i = 0, $this1$i3$i$i = 0, $this1$i39$i$i$i = 0, $this1$i5$i = 0, $this1$i5$i$i = 0, $this1$i6$i$i$i = 0, $this1$i7$i$i$i$i = 0, $this1$i8$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp2$i$i$i = sp + 8|0;
 $agg$tmp$i$i$i = sp + 251|0;
 $ref$tmp$i$i$i = sp + 250|0;
 $ref$tmp4$i$i$i = sp + 249|0;
 $agg$tmp2$i = sp;
 $agg$tmp$i = sp + 248|0;
 $this$addr = $this;
 $other$addr = $other;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 $4 = $other$addr;
 $__t$addr$i = $4;
 $5 = $__t$addr$i;
 $this$addr$i10 = $this1;
 $__str$addr$i = $5;
 $this1$i11 = $this$addr$i10;
 $6 = $__str$addr$i;
 ;HEAP8[$agg$tmp2$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $this$addr$i$i9 = $this1$i11;
 $__str$addr$i$i = $6;
 $this1$i$i12 = $this$addr$i$i9;
 $this$addr$i$i$i8 = $this1$i$i12;
 $this1$i$i$i13 = $this$addr$i$i$i8;
 $this$addr$i$i$i$i7 = $this1$i$i$i13;
 $this$addr$i5$i$i$i = $this1$i$i$i13;
 $this1$i6$i$i$i = $this$addr$i5$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i6$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $7 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $conv$i$i$i$i = $8&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i19$i$i$i = $this1$i$i$i13;
  $this1$i20$i$i$i = $this$addr$i19$i$i$i;
  $this$addr$i$i18$i$i$i = $this1$i20$i$i$i;
  $this1$i$i22$i$i$i = $this$addr$i$i18$i$i$i;
  $this$addr$i$i$i17$i$i$i = $this1$i$i22$i$i$i;
  $this1$i$i$i23$i$i$i = $this$addr$i$i$i17$i$i$i;
  $9 = HEAP32[$this1$i$i$i23$i$i$i>>2]|0;
  HEAP8[$ref$tmp$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($9,$ref$tmp$i$i$i);
  $this$addr$i37$i$i$i = $this1$i$i$i13;
  $__s$addr$i38$i$i$i = 0;
  $this1$i39$i$i$i = $this$addr$i37$i$i$i;
  $10 = $__s$addr$i38$i$i$i;
  $this$addr$i$i36$i$i$i = $this1$i39$i$i$i;
  $this1$i$i41$i$i$i = $this$addr$i$i36$i$i$i;
  $this$addr$i$i$i35$i$i$i = $this1$i$i41$i$i$i;
  $this1$i$i$i42$i$i$i = $this$addr$i$i$i35$i$i$i;
  $__size_$i45$i$i$i = ((($this1$i$i$i42$i$i$i)) + 4|0);
  HEAP32[$__size_$i45$i$i$i>>2] = $10;
 } else {
  $this$addr$i27$i$i$i = $this1$i$i$i13;
  $this1$i28$i$i$i = $this$addr$i27$i$i$i;
  $this$addr$i$i26$i$i$i = $this1$i28$i$i$i;
  $this1$i$i30$i$i$i = $this$addr$i$i26$i$i$i;
  $this$addr$i$i$i25$i$i$i = $this1$i$i30$i$i$i;
  $this1$i$i$i31$i$i$i = $this$addr$i$i$i25$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i31$i$i$i;
  $11 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $11;
  $12 = $__x$addr$i$i$i$i$i$i;
  HEAP8[$ref$tmp4$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($12,$ref$tmp4$i$i$i);
  $this$addr$i9$i$i$i = $this1$i$i$i13;
  $__s$addr$i$i$i$i = 0;
  $this1$i10$i$i$i = $this$addr$i9$i$i$i;
  $13 = $__s$addr$i$i$i$i;
  $conv$i11$i$i$i = $13&255;
  $this$addr$i$i8$i$i$i = $this1$i10$i$i$i;
  $this1$i$i13$i$i$i = $this$addr$i$i8$i$i$i;
  $this$addr$i$i$i7$i$i$i = $this1$i$i13$i$i$i;
  $this1$i$i$i14$i$i$i = $this$addr$i$i$i7$i$i$i;
  $14 = ((($this1$i$i$i14$i$i$i)) + 11|0);
  HEAP8[$14>>0] = $conv$i11$i$i$i;
 }
 $this$addr$i4$i$i = $this1$i$i12;
 $this1$i5$i$i = $this$addr$i4$i$i;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($this1$i5$i$i,0);
 $15 = $__str$addr$i$i;
 $this$addr$i7$i$i = $15;
 $this1$i8$i$i = $this$addr$i7$i$i;
 $this$addr$i$i6$i$i = $this1$i8$i$i;
 $this1$i$i9$i$i = $this$addr$i$i6$i$i;
 $this$addr$i11$i$i = $this1$i$i12;
 $this1$i12$i$i = $this$addr$i11$i$i;
 $this$addr$i$i10$i$i = $this1$i12$i$i;
 $this1$i$i13$i$i = $this$addr$i$i10$i$i;
 ;HEAP32[$this1$i$i13$i$i>>2]=HEAP32[$this1$i$i9$i$i>>2]|0;HEAP32[$this1$i$i13$i$i+4>>2]=HEAP32[$this1$i$i9$i$i+4>>2]|0;HEAP32[$this1$i$i13$i$i+8>>2]=HEAP32[$this1$i$i9$i$i+8>>2]|0;
 $16 = $__str$addr$i$i;
 $this$addr$i18$i$i = $this1$i$i12;
 $__str$addr$i$i$i = $16;
 $this1$i19$i$i = $this$addr$i18$i$i;
 $17 = $__str$addr$i$i$i;
 ;HEAP8[$agg$tmp2$i$i$i>>0]=HEAP8[$agg$tmp$i$i$i>>0]|0;
 $this$addr$i$i17$i$i = $this1$i19$i$i;
 $__c$addr$i$i$i$i = $17;
 $this1$i$i20$i$i = $this$addr$i$i17$i$i;
 $18 = $__c$addr$i$i$i$i;
 $this$addr$i$i$i16$i$i = $18;
 $this1$i$i$i21$i$i = $this$addr$i$i$i16$i$i;
 $this$addr$i$i$i$i15$i$i = $this1$i$i$i21$i$i;
 $this1$i$i$i$i22$i$i = $this$addr$i$i$i$i15$i$i;
 $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i22$i$i;
 $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
 $__t$addr$i$i$i$i$i = $this1$i$i$i$i$i$i$i;
 $this$addr$i6$i$i$i$i = $this1$i$i20$i$i;
 $this1$i7$i$i$i$i = $this$addr$i6$i$i$i$i;
 $this$addr$i$i5$i$i$i$i = $this1$i7$i$i$i$i;
 $this1$i$i9$i$i$i$i = $this$addr$i$i5$i$i$i$i;
 $this$addr$i$i$i4$i$i$i$i = $this1$i$i9$i$i$i$i;
 $19 = $__str$addr$i$i;
 $this$addr$i25$i$i = $19;
 $this1$i26$i$i = $this$addr$i25$i$i;
 $this$addr$i$i24$i$i = $this1$i26$i$i;
 $this1$i$i27$i$i = $this$addr$i$i24$i$i;
 $this$addr$i$i$i23$i$i = $this1$i$i27$i$i;
 $this1$i$i$i28$i$i = $this$addr$i$i$i23$i$i;
 $__a$i$i$i = $this1$i$i$i28$i$i;
 $__i$i$i$i = 0;
 while(1) {
  $20 = $__i$i$i$i;
  $cmp$i$i$i = ($20>>>0)<(3);
  if (!($cmp$i$i$i)) {
   break;
  }
  $21 = $__a$i$i$i;
  $22 = $__i$i$i$i;
  $arrayidx$i$i$i = (($21) + ($22<<2)|0);
  HEAP32[$arrayidx$i$i$i>>2] = 0;
  $23 = $__i$i$i$i;
  $inc$i$i$i = (($23) + 1)|0;
  $__i$i$i$i = $inc$i$i$i;
 }
 $24 = $other$addr;
 $m_Width = ((($24)) + 12|0);
 $25 = HEAP32[$m_Width>>2]|0;
 $m_Width5 = ((($this1)) + 12|0);
 HEAP32[$m_Width5>>2] = $25;
 $26 = $other$addr;
 $m_Height = ((($26)) + 16|0);
 $27 = HEAP32[$m_Height>>2]|0;
 $m_Height6 = ((($this1)) + 16|0);
 HEAP32[$m_Height6>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNK6canvas9ImageData4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0;
 var $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$addr$i$i = 0, $__c$addr$i$i$i = 0, $__fill_$i = 0, $__fill_4$i = 0, $__fill_5$i = 0, $__fmtflags_$i = 0, $__l$addr$i$i$i = 0;
 var $__len$addr = 0, $__os$addr = 0, $__rdbuf_$i$i$i = 0, $__rdstate_$i$i = 0, $__s = 0, $__s$addr$i = 0, $__state$addr$i = 0, $__state$addr$i$i = 0, $__str$addr = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr10 = 0, $add$ptr14 = 0, $add$ptr24 = 0, $add$ptr5 = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i = 0;
 var $call$i5$i$i = 0, $call$i6$i$i = 0, $call18 = 0, $call2$i = 0, $cmp = 0, $cmp$i = 0, $cond = 0, $conv$i = 0, $conv6$i = 0, $or$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i47 = 0, $this$addr$i$i38 = 0, $this$addr$i$i48 = 0, $this$addr$i36 = 0, $this$addr$i39 = 0;
 var $this$addr$i42 = 0, $this$addr$i44 = 0, $this$addr$i49 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i52 = 0, $this1$i$i41 = 0, $this1$i$i51 = 0, $this1$i37 = 0, $this1$i40 = 0, $this1$i43 = 0, $this1$i45 = 0, $this1$i50 = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$i = 0, $vbase$offset13 = 0, $vbase$offset23 = 0, $vbase$offset9 = 0;
 var $vtable = 0, $vtable$i = 0, $vtable$i$i$i = 0, $vtable11 = 0, $vtable21 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp$byval_copy = sp + 92|0;
 $ref$tmp$i$i = sp + 76|0;
 $__s = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 $__os$addr = $__os;
 $__str$addr = $__str;
 $__len$addr = $__len;
 $0 = $__os$addr;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$0);
 $this$addr$i = $__s;
 $this1$i = $this$addr$i;
 $1 = HEAP8[$this1$i>>0]|0;
 $tobool$i = $1&1;
 if (!($tobool$i)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  $32 = $__os$addr;
  STACKTOP = sp;return ($32|0);
 }
 $2 = $__os$addr;
 $this$addr$i36 = $agg$tmp;
 $__s$addr$i = $2;
 $this1$i37 = $this$addr$i36;
 $3 = $__s$addr$i;
 $vtable$i = HEAP32[$3>>2]|0;
 $4 = ((($vtable$i)) + -12|0);
 $vbase$offset$i = HEAP32[$4>>2]|0;
 $add$ptr$i = (($3) + ($vbase$offset$i)|0);
 $this$addr$i$i = $add$ptr$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $__rdbuf_$i$i$i = ((($this1$i$i$i)) + 24|0);
 $5 = HEAP32[$__rdbuf_$i$i$i>>2]|0;
 HEAP32[$this1$i37>>2] = $5;
 $6 = $__str$addr;
 $7 = $__os$addr;
 $vtable = HEAP32[$7>>2]|0;
 $8 = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$8>>2]|0;
 $add$ptr = (($7) + ($vbase$offset)|0);
 $this$addr$i42 = $add$ptr;
 $this1$i43 = $this$addr$i42;
 $__fmtflags_$i = ((($this1$i43)) + 4|0);
 $9 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $9 & 176;
 $cmp = ($and|0)==(32);
 $10 = $__str$addr;
 $11 = $__len$addr;
 $add$ptr5 = (($10) + ($11)|0);
 $12 = $__str$addr;
 $cond = $cmp ? $add$ptr5 : $12;
 $13 = $__str$addr;
 $14 = $__len$addr;
 $add$ptr6 = (($13) + ($14)|0);
 $15 = $__os$addr;
 $vtable7 = HEAP32[$15>>2]|0;
 $16 = ((($vtable7)) + -12|0);
 $vbase$offset9 = HEAP32[$16>>2]|0;
 $add$ptr10 = (($15) + ($vbase$offset9)|0);
 $17 = $__os$addr;
 $vtable11 = HEAP32[$17>>2]|0;
 $18 = ((($vtable11)) + -12|0);
 $vbase$offset13 = HEAP32[$18>>2]|0;
 $add$ptr14 = (($17) + ($vbase$offset13)|0);
 $this$addr$i49 = $add$ptr14;
 $this1$i50 = $this$addr$i49;
 $call$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__fill_$i = ((($this1$i50)) + 76|0);
 $19 = HEAP32[$__fill_$i>>2]|0;
 $call2$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($call$i,$19)|0);
 if ($call2$i) {
  $this$addr$i$i48 = $this1$i50;
  $__c$addr$i$i = 32;
  $this1$i$i51 = $this$addr$i$i48;
  __ZNKSt3__28ios_base6getlocEv($ref$tmp$i$i,$this1$i$i51);
  $__l$addr$i$i$i = $ref$tmp$i$i;
  $20 = $__l$addr$i$i$i;
  $call$i5$i$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($20,21028)|0);
  $21 = $__c$addr$i$i;
  $this$addr$i$i$i47 = $call$i5$i$i;
  $__c$addr$i$i$i = $21;
  $this1$i$i$i52 = $this$addr$i$i$i47;
  $vtable$i$i$i = HEAP32[$this1$i$i$i52>>2]|0;
  $22 = ((($vtable$i$i$i)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $__c$addr$i$i$i;
  $call$i6$i$i = (FUNCTION_TABLE_iii[$23 & 511]($this1$i$i$i52,$24)|0);
  __ZNSt3__26localeD2Ev($ref$tmp$i$i);
  $conv$i = $call$i6$i$i << 24 >> 24;
  $__fill_4$i = ((($this1$i50)) + 76|0);
  HEAP32[$__fill_4$i>>2] = $conv$i;
 }
 $__fill_5$i = ((($this1$i50)) + 76|0);
 $25 = HEAP32[$__fill_5$i>>2]|0;
 $conv6$i = $25&255;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call18 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$6,$cond,$add$ptr6,$add$ptr10,$conv6$i)|0);
 HEAP32[$ref$tmp>>2] = $call18;
 $this$addr$i44 = $ref$tmp;
 $this1$i45 = $this$addr$i44;
 $26 = HEAP32[$this1$i45>>2]|0;
 $cmp$i = ($26|0)==(0|0);
 if (!($cmp$i)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  $32 = $__os$addr;
  STACKTOP = sp;return ($32|0);
 }
 $27 = $__os$addr;
 $vtable21 = HEAP32[$27>>2]|0;
 $28 = ((($vtable21)) + -12|0);
 $vbase$offset23 = HEAP32[$28>>2]|0;
 $add$ptr24 = (($27) + ($vbase$offset23)|0);
 $this$addr$i39 = $add$ptr24;
 $__state$addr$i = 5;
 $this1$i40 = $this$addr$i39;
 $29 = $__state$addr$i;
 $this$addr$i$i38 = $this1$i40;
 $__state$addr$i$i = $29;
 $this1$i$i41 = $this$addr$i$i38;
 $__rdstate_$i$i = ((($this1$i$i41)) + 16|0);
 $30 = HEAP32[$__rdstate_$i$i>>2]|0;
 $31 = $__state$addr$i$i;
 $or$i$i = $30 | $31;
 __ZNSt3__28ios_base5clearEj($this1$i$i41,$or$i$i);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 $32 = $__os$addr;
 STACKTOP = sp;return ($32|0);
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$addr$i = 0, $__fl$addr = 0, $__iob$addr = 0, $__n$addr$i = 0, $__n$addr$i47 = 0, $__n$addr$i53 = 0, $__n$addr$i65 = 0;
 var $__np = 0, $__ns = 0, $__ob$addr = 0, $__oe$addr = 0, $__op$addr = 0, $__p$addr$i$i = 0, $__r$addr$i$i$i$i = 0, $__r$i = 0, $__s$addr$i = 0, $__s$addr$i46 = 0, $__s$addr$i64 = 0, $__sp = 0, $__sz = 0, $__wide$addr$i = 0, $__width_$i = 0, $__width_$i42 = 0, $__width_2$i = 0, $__x$addr$i$i$i$i$i = 0, $and$i$i$i = 0, $call$i = 0;
 var $call$i51 = 0, $call$i6970 = 0, $cleanup$dest = 0, $cleanup$dest$slot = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0, $cmp21 = 0, $cmp29 = 0, $cmp33 = 0, $cmp7 = 0, $cond$i$i = 0, $conv$i$i$i = 0, $retval = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast27 = 0, $sub$ptr$rhs$cast5 = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub6 = 0, $switch = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i55 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i56 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i$i57 = 0, $this$addr$i15$i$i = 0, $this$addr$i2$i$i = 0;
 var $this$addr$i40 = 0, $this$addr$i43 = 0, $this$addr$i45 = 0, $this$addr$i52 = 0, $this$addr$i58 = 0, $this$addr$i6$i$i = 0, $this$addr$i63 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i62 = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i61 = 0, $this1$i$i18$i$i = 0, $this1$i$i60 = 0, $this1$i$i9$i$i = 0, $this1$i16$i$i = 0, $this1$i3$i$i = 0;
 var $this1$i41 = 0, $this1$i44 = 0, $this1$i48 = 0, $this1$i54 = 0, $this1$i59 = 0, $this1$i66 = 0, $this1$i7$i$i = 0, $tobool$i$i$i = 0, $vtable$i = 0, $vtable$i49 = 0, $vtable$i67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $retval = sp + 44|0;
 $__sp = sp + 4|0;
 $__ob$addr = $__ob;
 $__op$addr = $__op;
 $__oe$addr = $__oe;
 $__iob$addr = $__iob;
 $__fl$addr = $__fl;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
  $52 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $1 = $__oe$addr;
 $2 = $__ob$addr;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $__sz = $sub$ptr$sub;
 $3 = $__iob$addr;
 $this$addr$i = $3;
 $this1$i = $this$addr$i;
 $__width_$i = ((($this1$i)) + 12|0);
 $4 = HEAP32[$__width_$i>>2]|0;
 $__ns = $4;
 $5 = $__ns;
 $6 = $__sz;
 $cmp1 = ($5|0)>($6|0);
 if ($cmp1) {
  $7 = $__sz;
  $8 = $__ns;
  $sub = (($8) - ($7))|0;
  $__ns = $sub;
 } else {
  $__ns = 0;
 }
 $9 = $__op$addr;
 $10 = $__ob$addr;
 $sub$ptr$lhs$cast4 = $9;
 $sub$ptr$rhs$cast5 = $10;
 $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast5))|0;
 $__np = $sub$ptr$sub6;
 $11 = $__np;
 $cmp7 = ($11|0)>(0);
 if ($cmp7) {
  $12 = HEAP32[$__s>>2]|0;
  $13 = $__ob$addr;
  $14 = $__np;
  $this$addr$i45 = $12;
  $__s$addr$i46 = $13;
  $__n$addr$i47 = $14;
  $this1$i48 = $this$addr$i45;
  $vtable$i49 = HEAP32[$this1$i48>>2]|0;
  $15 = ((($vtable$i49)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $__s$addr$i46;
  $18 = $__n$addr$i47;
  $call$i51 = (FUNCTION_TABLE_iiii[$16 & 511]($this1$i48,$17,$18)|0);
  $19 = $__np;
  $cmp11 = ($call$i51|0)!=($19|0);
  if ($cmp11) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $52 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($52|0);
  }
 }
 $20 = $__ns;
 $cmp16 = ($20|0)>(0);
 if ($cmp16) {
  $21 = $__ns;
  $22 = $__fl$addr;
  $this$addr$i52 = $__sp;
  $__n$addr$i53 = $21;
  $__c$addr$i = $22;
  $this1$i54 = $this$addr$i52;
  $this$addr$i$i = $this1$i54;
  $this1$i$i = $this$addr$i$i;
  $this$addr$i$i$i = $this1$i$i;
  $this1$i$i$i = $this$addr$i$i$i;
  ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
  $this$addr$i2$i$i = $this1$i$i;
  $this1$i3$i$i = $this$addr$i2$i$i;
  $this$addr$i$i$i$i = $this1$i3$i$i;
  $23 = $__n$addr$i53;
  $24 = $__c$addr$i;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($this1$i54,$23,$24);
  $25 = HEAP32[$__s>>2]|0;
  $this$addr$i58 = $__sp;
  $this1$i59 = $this$addr$i58;
  $this$addr$i$i57 = $this1$i59;
  $this1$i$i60 = $this$addr$i$i57;
  $this$addr$i$i$i56 = $this1$i$i60;
  $this1$i$i$i61 = $this$addr$i$i$i56;
  $this$addr$i$i$i$i55 = $this1$i$i$i61;
  $this1$i$i$i$i62 = $this$addr$i$i$i$i55;
  $this$addr$i$i$i$i$i = $this1$i$i$i$i62;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $26 = ((($this1$i$i$i$i$i)) + 11|0);
  $27 = HEAP8[$26>>0]|0;
  $conv$i$i$i = $27&255;
  $and$i$i$i = $conv$i$i$i & 128;
  $tobool$i$i$i = ($and$i$i$i|0)!=(0);
  if ($tobool$i$i$i) {
   $this$addr$i15$i$i = $this1$i$i60;
   $this1$i16$i$i = $this$addr$i15$i$i;
   $this$addr$i$i14$i$i = $this1$i16$i$i;
   $this1$i$i18$i$i = $this$addr$i$i14$i$i;
   $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
   $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
   $28 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
   $cond$i$i = $28;
  } else {
   $this$addr$i6$i$i = $this1$i$i60;
   $this1$i7$i$i = $this$addr$i6$i$i;
   $this$addr$i$i5$i$i = $this1$i7$i$i;
   $this1$i$i9$i$i = $this$addr$i$i5$i$i;
   $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
   $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
   $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
   $29 = $__r$addr$i$i$i$i;
   $__x$addr$i$i$i$i$i = $29;
   $30 = $__x$addr$i$i$i$i$i;
   $cond$i$i = $30;
  }
  $__p$addr$i$i = $cond$i$i;
  $31 = $__p$addr$i$i;
  $32 = $__ns;
  $this$addr$i63 = $25;
  $__s$addr$i64 = $31;
  $__n$addr$i65 = $32;
  $this1$i66 = $this$addr$i63;
  $vtable$i67 = HEAP32[$this1$i66>>2]|0;
  $33 = ((($vtable$i67)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $__s$addr$i64;
  $36 = $__n$addr$i65;
  $call$i6970 = (FUNCTION_TABLE_iiii[$34 & 511]($this1$i66,$35,$36)|0);
  $37 = $__ns;
  $cmp21 = ($call$i6970|0)!=($37|0);
  if ($cmp21) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $cleanup$dest$slot = 1;
  } else {
   $cleanup$dest$slot = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $cleanup$dest = $cleanup$dest$slot;
  $switch = ($cleanup$dest>>>0)<(1);
  if (!($switch)) {
   $52 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($52|0);
  }
 }
 $38 = $__oe$addr;
 $39 = $__op$addr;
 $sub$ptr$lhs$cast26 = $38;
 $sub$ptr$rhs$cast27 = $39;
 $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
 $__np = $sub$ptr$sub28;
 $40 = $__np;
 $cmp29 = ($40|0)>(0);
 if ($cmp29) {
  $41 = HEAP32[$__s>>2]|0;
  $42 = $__op$addr;
  $43 = $__np;
  $this$addr$i43 = $41;
  $__s$addr$i = $42;
  $__n$addr$i = $43;
  $this1$i44 = $this$addr$i43;
  $vtable$i = HEAP32[$this1$i44>>2]|0;
  $44 = ((($vtable$i)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $__s$addr$i;
  $47 = $__n$addr$i;
  $call$i = (FUNCTION_TABLE_iiii[$45 & 511]($this1$i44,$46,$47)|0);
  $48 = $__np;
  $cmp33 = ($call$i|0)!=($48|0);
  if ($cmp33) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $52 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($52|0);
  }
 }
 $49 = $__iob$addr;
 $this$addr$i40 = $49;
 $__wide$addr$i = 0;
 $this1$i41 = $this$addr$i40;
 $__width_$i42 = ((($this1$i41)) + 12|0);
 $50 = HEAP32[$__width_$i42>>2]|0;
 $__r$i = $50;
 $51 = $__wide$addr$i;
 $__width_2$i = ((($this1$i41)) + 12|0);
 HEAP32[$__width_2$i>>2] = $51;
 ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
 $52 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($52|0);
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $__c1$addr = 0, $__c2$addr = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c1$addr;
 $1 = $__c2$addr;
 $cmp = ($0|0)==($1|0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_560($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $iovs = sp;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $9 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($9>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($iovcnt$045) + ($dec))|0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $10 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($10) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $11 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($11) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $12 = HEAP32[$fd>>2]|0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $12;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $13;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $7 = HEAP32[$f>>2]|0;
   $or = $7 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($8))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $ret;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call)|0);
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19448|0);
}
function _dummy_560($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx21 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp8 = 0;
 var $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $tobool = 0, $tobool17 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $iov = sp;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iov;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call = (___syscall145(145,($vararg_buffer|0))|0);
 $call6 = (___syscall_ret($call)|0);
 $cmp = ($call6|0)<(1);
 if ($cmp) {
  $and = $call6 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $4 | $xor;
  HEAP32[$f>>2] = $or;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len>>2]|0;
  $cmp8 = ($call6>>>0)>($5>>>0);
  if ($cmp8) {
   $sub13 = (($call6) - ($5))|0;
   $6 = HEAP32[$buf3>>2]|0;
   $rpos = ((($f)) + 4|0);
   HEAP32[$rpos>>2] = $6;
   $$cast = $6;
   $add$ptr = (($$cast) + ($sub13)|0);
   $rend = ((($f)) + 8|0);
   HEAP32[$rend>>2] = $add$ptr;
   $7 = HEAP32[$buf_size>>2]|0;
   $tobool17 = ($7|0)==(0);
   if ($tobool17) {
    $retval$0 = $len;
   } else {
    $incdec$ptr = ((($$cast)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $8 = HEAP8[$$cast>>0]|0;
    $sub20 = (($len) + -1)|0;
    $arrayidx21 = (($buf) + ($sub20)|0);
    HEAP8[$arrayidx21>>0] = $8;
    $retval$0 = $len;
   }
  } else {
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 2;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = (getTempRet0() | 0);
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_735($s,$p,$base,-1,-1)|0);
 $1 = (getTempRet0() | 0);
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _strtox_735($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr6 = 0, $buf = 0, $cmp = 0, $conv5 = 0, $f = 0, $lock = 0, $rpos = 0;
 var $shcnt = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 HEAP32[$f>>2] = 0;
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $s;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $cmp = ($s|0)<(0|0);
 $add$ptr = ((($s)) + 2147483647|0);
 $$sink = $cmp ? (-1) : $add$ptr;
 $2 = ((($f)) + 8|0);
 HEAP32[$2>>2] = $$sink;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 ___shlim($f,0,0);
 $3 = (___intscan($f,$base,1,$0,$1)|0);
 $4 = (getTempRet0() | 0);
 $tobool = ($p|0)==(0|0);
 if (!($tobool)) {
  $shcnt = ((($f)) + 120|0);
  $5 = $shcnt;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$rpos>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $sub$ptr$sub = (($11) + ($7))|0;
  $conv5 = (($sub$ptr$sub) - ($12))|0;
  $add$ptr6 = (($s) + ($conv5)|0);
  HEAP32[$p>>2] = $add$ptr6;
 }
 setTempRet0(($4) | 0);
 STACKTOP = sp;return ($3|0);
}
function ___shlim($f,$0,$1) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend5 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $2 = $shlim;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $rend = ((($f)) + 8|0);
 $6 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $7 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $shcnt = ((($f)) + 120|0);
 $10 = $shcnt;
 $11 = $10;
 HEAP32[$11>>2] = $sub$ptr$sub;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = ($0|0)!=(0);
 $15 = ($1|0)!=(0);
 $16 = $14 | $15;
 $17 = ($9|0)>($1|0);
 $18 = ($sub$ptr$sub>>>0)>($0>>>0);
 $19 = ($9|0)==($1|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $or$cond = $16 & $21;
 if ($or$cond) {
  $22 = $7;
  $add$ptr = (($22) + ($0)|0);
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = $add$ptr;
 } else {
  $shend5 = ((($f)) + 104|0);
  HEAP32[$shend5>>2] = $6;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0;
 var $arrayidx178 = 0, $arrayidx178158 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237176 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0;
 var $call = 0, $call105 = 0, $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0;
 var $cmp112 = 0, $cmp112192 = 0, $cmp114 = 0, $cmp119 = 0, $cmp132 = 0, $cmp132184 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180160 = 0, $cmp183 = 0, $cmp193 = 0, $cmp208 = 0, $cmp208153 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239178 = 0, $cmp242 = 0, $cmp25 = 0;
 var $cmp253 = 0, $cmp268 = 0, $cmp268167 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0;
 var $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0, $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179159 = 0, $conv179162 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207152$pre$phiZ2D = 0, $conv229 = 0, $conv238 = 0, $conv238177 = 0, $conv238180 = 0, $conv258 = 0;
 var $conv267 = 0, $conv267166$pre$phiZ2D = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0, $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr340 = 0;
 var $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul = 0, $mul173 = 0, $mul246 = 0, $neg$0 = 0, $neg$1 = 0, $or = 0, $or$cond = 0, $or$cond155 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond5 = 0, $or189 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0;
 var $spec$select132 = 0, $spec$select133 = 0, $sub = 0, $sub111 = 0, $sub111191 = 0, $sub111194 = 0, $sub131 = 0, $sub131187 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool337 = 0, $tobool349 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 L1: do {
  if ($cmp) {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 22;
   $148 = 0;$149 = 0;
  } else {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $2 = HEAP32[$rpos>>2]|0;
    $3 = HEAP32[$shend>>2]|0;
    $cmp1 = ($2>>>0)<($3>>>0);
    if ($cmp1) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $4 = HEAP8[$2>>0]|0;
     $conv = $4&255;
     $cond = $conv;
    } else {
     $call3 = (___shgetc($f)|0);
     $cond = $call3;
    }
    $call4 = (_isspace($cond)|0);
    $tobool = ($call4|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L11: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp7 = ($cond|0)==(45);
     $sub = $cmp7 << 31 >> 31;
     $5 = HEAP32[$rpos>>2]|0;
     $6 = HEAP32[$shend>>2]|0;
     $cmp14 = ($5>>>0)<($6>>>0);
     if ($cmp14) {
      $incdec$ptr18 = ((($5)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr18;
      $7 = HEAP8[$5>>0]|0;
      $conv19 = $7&255;
      $c$0 = $conv19;$neg$0 = $sub;
      break L11;
     } else {
      $call21 = (___shgetc($f)|0);
      $c$0 = $call21;$neg$0 = $sub;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $cond;$neg$0 = 0;
    }
    }
   } while(0);
   $cmp25 = ($base|0)==(0);
   $8 = $base | 16;
   $9 = ($8|0)==(16);
   $cmp30 = ($c$0|0)==(48);
   $or$cond2 = $9 & $cmp30;
   do {
    if ($or$cond2) {
     $10 = HEAP32[$rpos>>2]|0;
     $11 = HEAP32[$shend>>2]|0;
     $cmp35 = ($10>>>0)<($11>>>0);
     if ($cmp35) {
      $incdec$ptr39 = ((($10)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr39;
      $12 = HEAP8[$10>>0]|0;
      $conv40 = $12&255;
      $cond44 = $conv40;
     } else {
      $call42 = (___shgetc($f)|0);
      $cond44 = $call42;
     }
     $or = $cond44 | 32;
     $cmp45 = ($or|0)==(120);
     if (!($cmp45)) {
      if ($cmp25) {
       $base$addr$1135 = 8;$c$1137 = $cond44;
       label = 47;
       break;
      } else {
       $base$addr$1 = $base;$c$1 = $cond44;
       label = 32;
       break;
      }
     }
     $13 = HEAP32[$rpos>>2]|0;
     $14 = HEAP32[$shend>>2]|0;
     $cmp50 = ($13>>>0)<($14>>>0);
     if ($cmp50) {
      $incdec$ptr54 = ((($13)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr54;
      $15 = HEAP8[$13>>0]|0;
      $conv55 = $15&255;
      $cond59 = $conv55;
     } else {
      $call57 = (___shgetc($f)|0);
      $cond59 = $call57;
     }
     $arrayidx = ((257) + ($cond59)|0);
     $16 = HEAP8[$arrayidx>>0]|0;
     $cmp61 = ($16&255)>(15);
     if ($cmp61) {
      $17 = HEAP32[$shend>>2]|0;
      $tobool65 = ($17|0)==(0|0);
      if (!($tobool65)) {
       $18 = HEAP32[$rpos>>2]|0;
       $incdec$ptr68 = ((($18)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr68;
      }
      $tobool71 = ($pok|0)==(0);
      if ($tobool71) {
       ___shlim($f,0,0);
       $148 = 0;$149 = 0;
       break L1;
      }
      if ($tobool65) {
       $148 = 0;$149 = 0;
       break L1;
      }
      $19 = HEAP32[$rpos>>2]|0;
      $incdec$ptr77 = ((($19)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr77;
      $148 = 0;$149 = 0;
      break L1;
     } else {
      $base$addr$1135 = 16;$c$1137 = $cond59;
      label = 47;
     }
    } else {
     $spec$select132 = $cmp25 ? 10 : $base;
     $arrayidx93 = ((257) + ($c$0)|0);
     $20 = HEAP8[$arrayidx93>>0]|0;
     $conv94 = $20&255;
     $cmp95 = ($spec$select132>>>0)>($conv94>>>0);
     if ($cmp95) {
      $base$addr$1 = $spec$select132;$c$1 = $c$0;
      label = 32;
     } else {
      $21 = HEAP32[$shend>>2]|0;
      $tobool99 = ($21|0)==(0|0);
      if (!($tobool99)) {
       $22 = HEAP32[$rpos>>2]|0;
       $incdec$ptr102 = ((($22)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr102;
      }
      ___shlim($f,0,0);
      $call105 = (___errno_location()|0);
      HEAP32[$call105>>2] = 22;
      $148 = 0;$149 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $cmp108 = ($base$addr$1|0)==(10);
     if ($cmp108) {
      $sub111191 = (($c$1) + -48)|0;
      $cmp112192 = ($sub111191>>>0)<(10);
      if ($cmp112192) {
       $sub111194 = $sub111191;$x$0193 = 0;
       while(1) {
        $mul = ($x$0193*10)|0;
        $add = (($mul) + ($sub111194))|0;
        $23 = HEAP32[$rpos>>2]|0;
        $24 = HEAP32[$shend>>2]|0;
        $cmp119 = ($23>>>0)<($24>>>0);
        if ($cmp119) {
         $incdec$ptr123 = ((($23)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr123;
         $25 = HEAP8[$23>>0]|0;
         $conv124 = $25&255;
         $cond128 = $conv124;
        } else {
         $call126 = (___shgetc($f)|0);
         $cond128 = $call126;
        }
        $sub111 = (($cond128) + -48)|0;
        $cmp112 = ($sub111>>>0)<(10);
        $cmp114 = ($add>>>0)<(429496729);
        $26 = $cmp112 & $cmp114;
        if ($26) {
         $sub111194 = $sub111;$x$0193 = $add;
        } else {
         break;
        }
       }
       $cmp132184 = ($sub111>>>0)<(10);
       if ($cmp132184) {
        $27 = $add;$28 = 0;$c$3185 = $cond128;$sub131187 = $sub111;
        while(1) {
         $29 = (___muldi3(($27|0),($28|0),10,0)|0);
         $30 = (getTempRet0() | 0);
         $31 = ($sub131187|0)<(0);
         $32 = $31 << 31 >> 31;
         $33 = $sub131187 ^ -1;
         $34 = $32 ^ -1;
         $35 = ($30>>>0)>($34>>>0);
         $36 = ($29>>>0)>($33>>>0);
         $37 = ($30|0)==($34|0);
         $38 = $37 & $36;
         $39 = $35 | $38;
         if ($39) {
          $150 = $27;$151 = $28;$base$addr$1136 = 10;$c$8 = $c$3185;
          label = 76;
          break L43;
         }
         $40 = (_i64Add(($29|0),($30|0),($sub131187|0),($32|0))|0);
         $41 = (getTempRet0() | 0);
         $42 = HEAP32[$rpos>>2]|0;
         $43 = HEAP32[$shend>>2]|0;
         $cmp153 = ($42>>>0)<($43>>>0);
         if ($cmp153) {
          $incdec$ptr157 = ((($42)) + 1|0);
          HEAP32[$rpos>>2] = $incdec$ptr157;
          $44 = HEAP8[$42>>0]|0;
          $conv158 = $44&255;
          $cond162 = $conv158;
         } else {
          $call160 = (___shgetc($f)|0);
          $cond162 = $call160;
         }
         $sub131 = (($cond162) + -48)|0;
         $cmp132 = ($sub131>>>0)<(10);
         $45 = ($41>>>0)<(429496729);
         $46 = ($40>>>0)<(2576980378);
         $47 = ($41|0)==(429496729);
         $48 = $47 & $46;
         $49 = $45 | $48;
         $or$cond3 = $cmp132 & $49;
         if ($or$cond3) {
          $27 = $40;$28 = $41;$c$3185 = $cond162;$sub131187 = $sub131;
         } else {
          break;
         }
        }
        $cmp165 = ($sub131>>>0)>(9);
        if ($cmp165) {
         $125 = $41;$127 = $40;$neg$1 = $neg$0;
        } else {
         $150 = $40;$151 = $41;$base$addr$1136 = 10;$c$8 = $cond162;
         label = 76;
        }
       } else {
        $125 = 0;$127 = $add;$neg$1 = $neg$0;
       }
      } else {
       $125 = 0;$127 = 0;$neg$1 = $neg$0;
      }
     } else {
      $base$addr$1135 = $base$addr$1;$c$1137 = $c$1;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $sub170 = (($base$addr$1135) + -1)|0;
     $and = $sub170 & $base$addr$1135;
     $tobool171 = ($and|0)==(0);
     if ($tobool171) {
      $mul173 = ($base$addr$1135*23)|0;
      $shr = $mul173 >>> 5;
      $and174 = $shr & 7;
      $arrayidx175 = (12056 + ($and174)|0);
      $50 = HEAP8[$arrayidx175>>0]|0;
      $conv176 = $50 << 24 >> 24;
      $arrayidx178158 = ((257) + ($c$1137)|0);
      $51 = HEAP8[$arrayidx178158>>0]|0;
      $conv179159 = $51&255;
      $cmp180160 = ($base$addr$1135>>>0)>($conv179159>>>0);
      if ($cmp180160) {
       $conv179162 = $conv179159;$x$1161 = 0;
       while(1) {
        $shl = $x$1161 << $conv176;
        $or189 = $conv179162 | $shl;
        $52 = HEAP32[$rpos>>2]|0;
        $53 = HEAP32[$shend>>2]|0;
        $cmp193 = ($52>>>0)<($53>>>0);
        if ($cmp193) {
         $incdec$ptr197 = ((($52)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr197;
         $54 = HEAP8[$52>>0]|0;
         $conv198 = $54&255;
         $cond202 = $conv198;
        } else {
         $call200 = (___shgetc($f)|0);
         $cond202 = $call200;
        }
        $arrayidx178 = ((257) + ($cond202)|0);
        $55 = HEAP8[$arrayidx178>>0]|0;
        $conv179 = $55&255;
        $cmp180 = ($base$addr$1135>>>0)>($conv179>>>0);
        $cmp183 = ($or189>>>0)<(134217728);
        $56 = $cmp183 & $cmp180;
        if ($56) {
         $conv179162 = $conv179;$x$1161 = $or189;
        } else {
         break;
        }
       }
       $152 = $55;$60 = 0;$62 = $or189;$c$4$lcssa = $cond202;$conv207152$pre$phiZ2D = $conv179;
      } else {
       $152 = $51;$60 = 0;$62 = 0;$c$4$lcssa = $c$1137;$conv207152$pre$phiZ2D = $conv179159;
      }
      $57 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
      $58 = (getTempRet0() | 0);
      $cmp208153 = ($base$addr$1135>>>0)<=($conv207152$pre$phiZ2D>>>0);
      $59 = ($58>>>0)<($60>>>0);
      $61 = ($57>>>0)<($62>>>0);
      $63 = ($58|0)==($60|0);
      $64 = $63 & $61;
      $65 = $59 | $64;
      $or$cond155 = $cmp208153 | $65;
      if ($or$cond155) {
       $150 = $62;$151 = $60;$base$addr$1136 = $base$addr$1135;$c$8 = $c$4$lcssa;
       label = 76;
       break;
      }
      $66 = $62;$67 = $60;$71 = $152;
      while(1) {
       $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
       $69 = (getTempRet0() | 0);
       $70 = $71&255;
       $72 = $68 | $70;
       $73 = HEAP32[$rpos>>2]|0;
       $74 = HEAP32[$shend>>2]|0;
       $cmp224 = ($73>>>0)<($74>>>0);
       if ($cmp224) {
        $incdec$ptr228 = ((($73)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr228;
        $75 = HEAP8[$73>>0]|0;
        $conv229 = $75&255;
        $cond233 = $conv229;
       } else {
        $call231 = (___shgetc($f)|0);
        $cond233 = $call231;
       }
       $arrayidx206 = ((257) + ($cond233)|0);
       $76 = HEAP8[$arrayidx206>>0]|0;
       $conv207 = $76&255;
       $cmp208 = ($base$addr$1135>>>0)<=($conv207>>>0);
       $77 = ($69>>>0)>($58>>>0);
       $78 = ($72>>>0)>($57>>>0);
       $79 = ($69|0)==($58|0);
       $80 = $79 & $78;
       $81 = $77 | $80;
       $or$cond = $cmp208 | $81;
       if ($or$cond) {
        $150 = $72;$151 = $69;$base$addr$1136 = $base$addr$1135;$c$8 = $cond233;
        label = 76;
        break L63;
       } else {
        $66 = $72;$67 = $69;$71 = $76;
       }
      }
     }
     $arrayidx237176 = ((257) + ($c$1137)|0);
     $82 = HEAP8[$arrayidx237176>>0]|0;
     $conv238177 = $82&255;
     $cmp239178 = ($base$addr$1135>>>0)>($conv238177>>>0);
     if ($cmp239178) {
      $conv238180 = $conv238177;$x$2179 = 0;
      while(1) {
       $mul246 = Math_imul($x$2179, $base$addr$1135)|0;
       $add249 = (($conv238180) + ($mul246))|0;
       $83 = HEAP32[$rpos>>2]|0;
       $84 = HEAP32[$shend>>2]|0;
       $cmp253 = ($83>>>0)<($84>>>0);
       if ($cmp253) {
        $incdec$ptr257 = ((($83)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr257;
        $85 = HEAP8[$83>>0]|0;
        $conv258 = $85&255;
        $cond262 = $conv258;
       } else {
        $call260 = (___shgetc($f)|0);
        $cond262 = $call260;
       }
       $arrayidx237 = ((257) + ($cond262)|0);
       $86 = HEAP8[$arrayidx237>>0]|0;
       $conv238 = $86&255;
       $cmp239 = ($base$addr$1135>>>0)>($conv238>>>0);
       $cmp242 = ($add249>>>0)<(119304647);
       $87 = $cmp242 & $cmp239;
       if ($87) {
        $conv238180 = $conv238;$x$2179 = $add249;
       } else {
        break;
       }
      }
      $153 = $86;$154 = $add249;$155 = 0;$c$6$lcssa = $cond262;$conv267166$pre$phiZ2D = $conv238;
     } else {
      $153 = $82;$154 = 0;$155 = 0;$c$6$lcssa = $c$1137;$conv267166$pre$phiZ2D = $conv238177;
     }
     $cmp268167 = ($base$addr$1135>>>0)>($conv267166$pre$phiZ2D>>>0);
     if ($cmp268167) {
      $88 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
      $89 = (getTempRet0() | 0);
      $100 = $153;$91 = $155;$93 = $154;$c$7168 = $c$6$lcssa;
      while(1) {
       $90 = ($91>>>0)>($89>>>0);
       $92 = ($93>>>0)>($88>>>0);
       $94 = ($91|0)==($89|0);
       $95 = $94 & $92;
       $96 = $90 | $95;
       if ($96) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $97 = (___muldi3(($93|0),($91|0),($base$addr$1135|0),0)|0);
       $98 = (getTempRet0() | 0);
       $99 = $100&255;
       $101 = $99 ^ -1;
       $102 = ($98>>>0)>(4294967295);
       $103 = ($97>>>0)>($101>>>0);
       $104 = ($98|0)==(-1);
       $105 = $104 & $103;
       $106 = $102 | $105;
       if ($106) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $107 = (_i64Add(($97|0),($98|0),($99|0),0)|0);
       $108 = (getTempRet0() | 0);
       $109 = HEAP32[$rpos>>2]|0;
       $110 = HEAP32[$shend>>2]|0;
       $cmp292 = ($109>>>0)<($110>>>0);
       if ($cmp292) {
        $incdec$ptr296 = ((($109)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr296;
        $111 = HEAP8[$109>>0]|0;
        $conv297 = $111&255;
        $cond301 = $conv297;
       } else {
        $call299 = (___shgetc($f)|0);
        $cond301 = $call299;
       }
       $arrayidx266 = ((257) + ($cond301)|0);
       $112 = HEAP8[$arrayidx266>>0]|0;
       $conv267 = $112&255;
       $cmp268 = ($base$addr$1135>>>0)>($conv267>>>0);
       if ($cmp268) {
        $100 = $112;$91 = $108;$93 = $107;$c$7168 = $cond301;
       } else {
        $150 = $107;$151 = $108;$base$addr$1136 = $base$addr$1135;$c$8 = $cond301;
        label = 76;
        break;
       }
      }
     } else {
      $150 = $154;$151 = $155;$base$addr$1136 = $base$addr$1135;$c$8 = $c$6$lcssa;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $arrayidx305 = ((257) + ($c$8)|0);
    $113 = HEAP8[$arrayidx305>>0]|0;
    $conv306 = $113&255;
    $cmp307 = ($base$addr$1136>>>0)>($conv306>>>0);
    if ($cmp307) {
     while(1) {
      $114 = HEAP32[$rpos>>2]|0;
      $115 = HEAP32[$shend>>2]|0;
      $cmp319 = ($114>>>0)<($115>>>0);
      if ($cmp319) {
       $incdec$ptr323 = ((($114)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr323;
       $116 = HEAP8[$114>>0]|0;
       $conv324 = $116&255;
       $cond328 = $conv324;
      } else {
       $call326 = (___shgetc($f)|0);
       $cond328 = $call326;
      }
      $arrayidx311 = ((257) + ($cond328)|0);
      $117 = HEAP8[$arrayidx311>>0]|0;
      $conv312 = $117&255;
      $cmp313 = ($base$addr$1136>>>0)>($conv312>>>0);
      if (!($cmp313)) {
       break;
      }
     }
     $call330 = (___errno_location()|0);
     HEAP32[$call330>>2] = 34;
     $118 = $0 & 1;
     $119 = ($118|0)==(0);
     $120 = (0)==(0);
     $121 = $119 & $120;
     $spec$select133 = $121 ? $neg$0 : 0;
     $125 = $1;$127 = $0;$neg$1 = $spec$select133;
    } else {
     $125 = $151;$127 = $150;$neg$1 = $neg$0;
    }
   }
   $122 = HEAP32[$shend>>2]|0;
   $tobool337 = ($122|0)==(0|0);
   if (!($tobool337)) {
    $123 = HEAP32[$rpos>>2]|0;
    $incdec$ptr340 = ((($123)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr340;
   }
   $124 = ($125>>>0)<($1>>>0);
   $126 = ($127>>>0)<($0>>>0);
   $128 = ($125|0)==($1|0);
   $129 = $128 & $126;
   $130 = $124 | $129;
   if (!($130)) {
    $131 = $0 & 1;
    $132 = ($131|0)!=(0);
    $133 = (0)!=(0);
    $134 = $132 | $133;
    $tobool349 = ($neg$1|0)!=(0);
    $or$cond5 = $134 | $tobool349;
    if (!($or$cond5)) {
     $call351 = (___errno_location()|0);
     HEAP32[$call351>>2] = 34;
     $135 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $136 = (getTempRet0() | 0);
     $148 = $136;$149 = $135;
     break;
    }
    $137 = ($125>>>0)>($1>>>0);
    $138 = ($127>>>0)>($0>>>0);
    $139 = ($125|0)==($1|0);
    $140 = $139 & $138;
    $141 = $137 | $140;
    if ($141) {
     $call357 = (___errno_location()|0);
     HEAP32[$call357>>2] = 34;
     $148 = $1;$149 = $0;
     break;
    }
   }
   $142 = ($neg$1|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = $127 ^ $neg$1;
   $145 = $125 ^ $143;
   $146 = (_i64Subtract(($144|0),($145|0),($neg$1|0),($143|0))|0);
   $147 = (getTempRet0() | 0);
   $148 = $147;$149 = $146;
  }
 } while(0);
 setTempRet0(($148) | 0);
 return ($149|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $cmp2 = 0, $cmp35 = 0, $conv34 = 0, $conv38 = 0, $idx$ext = 0, $rend18$phi$trans$insert = 0, $retval$0 = 0;
 var $rpos = 0, $rpos33$phi$trans$insert = 0, $shcnt = 0, $shcnt30 = 0, $shcnt7 = 0, $shend = 0, $shend17 = 0, $shend19 = 0, $shlim = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $tobool22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $0 = $shlim;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 120|0);
  $9 = $shcnt;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<($5|0);
  $16 = ($11>>>0)<($2>>>0);
  $17 = ($14|0)==($5|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $20 = $shlim;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   $rend18$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$rend18$phi$trans$insert>>2]|0;
   if ($28) {
    $29 = $$pre;
    $66 = $29;
    label = 9;
   } else {
    $rpos = ((($f)) + 4|0);
    $30 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $30;
    $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
    $31 = ($sub$ptr$sub|0)<(0);
    $32 = $31 << 31 >> 31;
    $shcnt7 = ((($f)) + 120|0);
    $33 = $shcnt7;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Subtract(($22|0),($25|0),($35|0),($38|0))|0);
    $40 = (getTempRet0() | 0);
    $41 = ($40|0)>($32|0);
    $42 = ($39>>>0)>($sub$ptr$sub>>>0);
    $43 = ($40|0)==($32|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $46 = $$pre;
    if ($45) {
     $66 = $46;
     label = 9;
    } else {
     $idx$ext = (($39) + -1)|0;
     $add$ptr = (($30) + ($idx$ext)|0);
     $shend17 = ((($f)) + 104|0);
     HEAP32[$shend17>>2] = $add$ptr;
     $47 = $46;
    }
   }
   if ((label|0) == 9) {
    $shend19 = ((($f)) + 104|0);
    HEAP32[$shend19>>2] = $$pre;
    $47 = $66;
   }
   $tobool22 = ($47|0)==(0|0);
   $rpos33$phi$trans$insert = ((($f)) + 4|0);
   if ($tobool22) {
    $$pre25 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $64 = $$pre25;
   } else {
    $48 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $sub$ptr$lhs$cast26 = $47;
    $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) + 1)|0;
    $add = (($sub$ptr$sub28) - ($48))|0;
    $49 = ($add|0)<(0);
    $50 = $49 << 31 >> 31;
    $shcnt30 = ((($f)) + 120|0);
    $51 = $shcnt30;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (_i64Add(($53|0),($56|0),($add|0),($50|0))|0);
    $58 = (getTempRet0() | 0);
    $59 = $shcnt30;
    $60 = $59;
    HEAP32[$60>>2] = $57;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    $63 = $48;
    $64 = $63;
   }
   $arrayidx = ((($64)) + -1|0);
   $65 = HEAP8[$arrayidx>>0]|0;
   $conv34 = $65&255;
   $cmp35 = ($call|0)==($conv34|0);
   if ($cmp35) {
    $retval$0 = $call;
   } else {
    $conv38 = $call&255;
    HEAP8[$arrayidx>>0] = $conv38;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $narrow = $cmp | $cmp1;
 $0 = $narrow&1;
 return ($0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 511]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 511]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = (getTempRet0() | 0);
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_735($s,$p,$base,0,-2147483648)|0);
 $1 = (getTempRet0() | 0);
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(5648|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,330,331)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_670($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_670($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 12082;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (12083) : (12088);
  $spec$select416 = $tobool9 ? $$ : (12085);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 12101 : 12105;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 12124 : 12109;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_667($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_667($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (992 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_667($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_667($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_667($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_667($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_667($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_667($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,12113,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_667($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,12113,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_667($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_667($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 511]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((528 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 12065;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 12065;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 12065 : (12067);
       $spec$select205 = $tobool291 ? $$ : (12066);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 12065;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 12065;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 12075 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 12065;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_667($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 511]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 12065;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (12065 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 12065 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_667($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_667($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_667($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_667($f,48,$w$2,$add436,$xor444);
    _pad_667($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_667($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 511]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (992 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _pad_667($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_423()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_423() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7308|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 511]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 511]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_670($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7552|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $locale = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0|0);
 $cond = $tobool ? 1 : 4;
 return ($cond|0);
}
function ___pthread_self() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7556|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7560|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $0 = 0, $incdec$ptr = 0, $s$addr$0 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP32[$s$addr$0>>2]|0;
  $tobool = ($0|0)==(0);
  $incdec$ptr = ((($s$addr$0)) + 4|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $sub$ptr$lhs$cast = $s$addr$0;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $call = 0, $cmp = 0, $narrow = 0, $or = 0, $spec$select = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isdigit($c)|0);
 $tobool = ($call|0)!=(0);
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(6);
 $narrow = $cmp | $tobool;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp7089 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0;
 var $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond98 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0;
 var $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0 = 24;$emin$0 = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (12115 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$trunc = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($trunc>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($trunc|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($trunc|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (12124 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = 3;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $trunc;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if (!($cmp136)) {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 22;
       ___shlim($f,0,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0,$emin$0,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0,$emin$0,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 22;
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp7089 = ($trunc>>>0)>(3);
    $or$cond98 = $tobool67 & $cmp7089;
    if ($or$cond98) {
     $i$190 = $trunc;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$190) + -1)|0;
      $cmp70 = ($dec>>>0)>(3);
      if ($cmp70) {
       $i$190 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0, $$pre136 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0;
 var $add86 = 0.0, $and = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $brmerge = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0;
 var $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0, $cmp20 = 0, $cmp203 = 0, $cmp203118 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31128 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp54 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp94 = 0, $cond29 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0, $conv188 = 0.0, $conv198 = 0.0, $conv241112 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0;
 var $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0;
 var $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0, $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or$cond = 0, $or$cond103 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $retval$0 = 0.0, $rpos = 0;
 var $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $spec$select113 = 0.0, $spec$select114 = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239111 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0;
 var $tobool123 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0, $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $x$6 = 0;
 var $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0$ph = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $c$0$ph = $call;
 }
 $c$0 = $c$0$ph;$gotdig$0 = 0;
 L5: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$3$ph = $c$0;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 0;
   break L5;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0$be = $conv11;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0$be = $call13;
  }
  $c$0 = $c$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 10) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $cond29 = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $cond29 = $call27;
  }
  $cmp31128 = ($cond29|0)==(48);
  if ($cmp31128) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = (getTempRet0() | 0);
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $106 = $14;$107 = $15;$c$3$ph = $cond46;$gotdig$3$ph = 1;$gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$3$ph = $cond29;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 1;
  }
 }
 $17 = 0;$19 = 0;$38 = $106;$40 = $107;$c$3 = $c$3$ph;$gotdig$3 = $gotdig$3$ph;$gotrad$1 = $gotrad$1$ph;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
 while(1) {
  $sub = (($c$3) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $$pre = $c$3 | 32;
  if ($cmp49) {
   label = 24;
  } else {
   $sub51 = (($$pre) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $cmp54 = ($c$3|0)==(46);
   $or$cond3 = $cmp54 | $cmp52;
   if (!($or$cond3)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) {
    $tobool = ($gotrad$1|0)==(0);
    if ($tobool) {
     $108 = $19;$109 = $17;$110 = $19;$111 = $17;$gotdig$4 = $gotdig$3;$gotrad$2 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
    } else {
     $c$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $cmp62 = ($c$3|0)>(57);
   $sub66 = (($$pre) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $spec$select113 = $or$cond ? $y$0 : $add86;
      $spec$select114 = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $spec$select114;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $spec$select113;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = (getTempRet0() | 0);
   $108 = $38;$109 = $40;$110 = $28;$111 = $29;$gotdig$4 = 1;$gotrad$2 = $gotrad$1;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $c$3$be = $conv99;
  } else {
   $call101 = (___shgetc($f)|0);
   $c$3$be = $call101;
  }
  $17 = $111;$19 = $110;$38 = $108;$40 = $109;$c$3 = $c$3$be;$gotdig$3 = $gotdig$4;$gotrad$1 = $gotrad$2;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
 }
 $tobool105 = ($gotdig$3|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)==(0|0);
   if (!($tobool108)) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0,0);
   } else {
    if (!($tobool108)) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
     $tobool123 = ($gotrad$1|0)==(0);
     $brmerge = $tobool123 | $tobool108;
     if (!($brmerge)) {
      $36 = HEAP32[$rpos>>2]|0;
      $incdec$ptr129 = ((($36)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr129;
     }
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$1|0)==(0);
   $37 = $tobool138 ? $19 : $38;
   $39 = $tobool138 ? $17 : $40;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3125 = $x$0;
    while(1) {
     $mul143 = $x$3125 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = (getTempRet0() | 0);
     $50 = ($47|0)<(0);
     $51 = ($46>>>0)<(7);
     $52 = ($47|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3125 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$3$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = (getTempRet0() | 0);
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($37|0),($39|0),2)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = (getTempRet0() | 0);
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = (getTempRet0() | 0);
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 34;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 34;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203118 = ($x$3$lcssa|0)>(-1);
   if ($cmp203118) {
    $86 = $70;$87 = $71;$x$4119 = $x$3$lcssa;$y$3120 = $y$0;
    while(1) {
     $cmp206 = !($y$3120 >= 0.5);
     $add214 = $x$4119 << 1;
     $sub211 = $y$3120 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3120 : $sub211;
     $y$4 = $y$3120 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = (getTempRet0() | 0);
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4119 = $x$5;$y$3120 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = (getTempRet0() | 0);
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = (getTempRet0() | 0);
   $100 = ($99|0)<($91|0);
   $101 = ($98>>>0)<($bits>>>0);
   $102 = ($99|0)==($91|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 65;
    } else {
     $bits$addr$0110 = 0;$sub239111 = 84;
     label = 67;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 65;
   }
   if ((label|0) == 65) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0110 = $bits$addr$0;$sub239111 = $sub239;
     label = 67;
    } else {
     $$pre136 = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0109 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre136;
    }
   }
   if ((label|0) == 67) {
    $conv241112 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239111));
    $call242 = (+_copysignl($call240,$conv241112));
    $bias$0 = $call242;$bits$addr$0109 = $bits$addr$0110;$conv253$pre$phiZ2D = $conv241112;
   }
   $cmp244 = ($bits$addr$0109|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($x$4$lcssa) + ($inc251))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $y$5 * $conv253$pre$phiZ2D;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 34;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$neg = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add252 = 0, $add265 = 0, $add275 = 0, $add287 = 0, $add307$sink$off0 = 0, $add345 = 0, $add367 = 0, $add400 = 0;
 var $add412 = 0, $add422 = 0, $add428 = 0, $add433 = 0, $add457 = 0, $add462 = 0, $add472 = 0.0, $add478 = 0, $add501 = 0.0, $add503 = 0, $add517 = 0, $add524 = 0.0, $add531 = 0.0, $add537 = 0, $add544 = 0.0, $add548 = 0.0, $add563 = 0.0, $add59 = 0, $and = 0, $and321 = 0;
 var $and347 = 0, $and352 = 0, $and355 = 0, $and368 = 0, $and409 = 0, $and423 = 0, $and429 = 0, $and434 = 0, $and443 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $and518 = 0, $and538 = 0, $and566 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0, $arrayidx256 = 0;
 var $arrayidx261 = 0, $arrayidx284 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx372 = 0, $arrayidx373 = 0, $arrayidx406 = 0, $arrayidx438 = 0, $arrayidx444 = 0, $arrayidx465 = 0, $arrayidx470 = 0, $arrayidx510 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0;
 var $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call495 = 0.0, $call496 = 0.0, $call498 = 0.0, $call499 = 0.0, $call557 = 0.0, $call571 = 0.0, $call594 = 0, $call597 = 0.0, $call91 = 0, $carry$0335 = 0;
 var $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183 = 0, $cmp183339 = 0, $cmp19 = 0, $cmp19363 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0, $cmp231 = 0, $cmp246 = 0;
 var $cmp25 = 0, $cmp258 = 0, $cmp258331 = 0, $cmp269 = 0, $cmp289 = 0, $cmp292 = 0, $cmp295 = 0, $cmp322 = 0, $cmp325 = 0, $cmp348 = 0, $cmp364 = 0, $cmp369 = 0, $cmp374 = 0, $cmp38 = 0, $cmp382 = 0, $cmp38343 = 0, $cmp392 = 0, $cmp396 = 0, $cmp40 = 0, $cmp402 = 0;
 var $cmp402324 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp416 = 0, $cmp435 = 0, $cmp459 = 0, $cmp48 = 0, $cmp480 = 0, $cmp490 = 0, $cmp505 = 0, $cmp51 = 0, $cmp511 = 0, $cmp519 = 0, $cmp526 = 0, $cmp539 = 0, $cmp554 = 0, $cmp568 = 0, $cmp572 = 0, $cmp579 = 0, $cmp587 = 0;
 var $cmp67 = 0, $cmp8 = 0, $cmp84 = 0, $cond17 = 0, $cond254 = 0, $cond268 = 0, $cond34 = 0, $cond93 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0, $conv216 = 0.0, $conv220 = 0.0;
 var $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0, $conv471 = 0.0, $conv476 = 0.0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $exitcond = 0;
 var $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc189 = 0, $inc191 = 0, $inc279 = 0, $inc283 = 0, $inc387 = 0, $inc474 = 0;
 var $inc560 = 0.0, $inc584 = 0, $inc66 = 0, $inc70 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0;
 var $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0, $mul168 = 0.0, $mul177 = 0.0;
 var $mul178 = 0.0, $mul187 = 0, $mul187341 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul268 = 0, $mul415 = 0, $mul467 = 0.0, $mul477 = 0.0, $mul523 = 0.0, $mul530 = 0.0, $mul543 = 0.0, $mul547 = 0.0, $mul583 = 0.0, $narrow = 0, $not$cmp572 = 0, $or = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond260 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond263 = 0, $or$cond266 = 0, $or$cond392 = 0, $or$cond5 = 0, $or357 = 0, $or445 = 0, $or99 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0;
 var $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shl407 = 0, $shr = 0, $shr230 = 0, $shr411 = 0, $shr414 = 0, $spec$select = 0, $spec$select257 = 0, $spec$select258 = 0, $spec$select264 = 0, $spec$select265 = 0, $spec$select290 = 0, $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$store$select = 0;
 var $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub255 = 0, $sub276 = 0, $sub286 = 0, $sub299 = 0, $sub300 = 0, $sub320 = 0, $sub340 = 0, $sub346 = 0, $sub351 = 0, $sub354 = 0, $sub37 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0;
 var $sub425 = 0, $sub442 = 0, $sub464 = 0, $sub479 = 0, $sub494 = 0, $sub497 = 0, $sub500 = 0.0, $sub553 = 0, $sub564 = 0.0, $sub567 = 0, $sub60 = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool244 = 0, $tobool273 = 0, $tobool281 = 0, $tobool329 = 0;
 var $tobool343 = 0, $tobool420 = 0, $tobool431 = 0, $tobool514 = 0, $tobool558 = 0, $tobool56 = 0, $tobool592 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98269 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0;
 var $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $0 = (($emin) + ($bits))|0;
 $sub1 = (0 - ($0))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 104|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $1 = HEAP32[$rpos>>2]|0;
  $2 = HEAP32[$shend>>2]|0;
  $cmp2 = ($1>>>0)<($2>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($1)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $3 = HEAP8[$1>>0]|0;
   $conv = $3&255;
   $c$addr$0$be = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0$be = $call;
  }
  $c$addr$0 = $c$addr$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 7) {
  $4 = HEAP32[$rpos>>2]|0;
  $5 = HEAP32[$shend>>2]|0;
  $cmp8 = ($4>>>0)<($5>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($4)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $6 = HEAP8[$4>>0]|0;
   $conv13 = $6&255;
   $cond17 = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $cond17 = $call15;
  }
  $cmp19363 = ($cond17|0)==(48);
  if ($cmp19363) {
   $7 = 0;$8 = 0;
   while(1) {
    $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
    $10 = (getTempRet0() | 0);
    $11 = HEAP32[$rpos>>2]|0;
    $12 = HEAP32[$shend>>2]|0;
    $cmp25 = ($11>>>0)<($12>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($11)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $13 = HEAP8[$11>>0]|0;
     $conv30 = $13&255;
     $cond34 = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $cond34 = $call32;
    }
    $cmp19 = ($cond34|0)==(48);
    if ($cmp19) {
     $7 = $9;$8 = $10;
    } else {
     $106 = $9;$107 = $10;$c$addr$2 = $cond34;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$addr$2 = $cond17;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37342 = (($c$addr$2) + -48)|0;
 $cmp38343 = ($sub37342>>>0)<(10);
 $cmp40344 = ($c$addr$2|0)==(46);
 $14 = $cmp40344 | $cmp38343;
 L22: do {
  if ($14) {
   $arrayidx77 = ((($x)) + 496|0);
   $108 = $106;$109 = $107;$15 = 0;$16 = 0;$c$addr$3352 = $c$addr$2;$cmp40354 = $cmp40344;$gotdig$3348 = $gotdig$2;$gotrad$1349 = $gotrad$0;$j$0351 = 0;$k$0350 = 0;$lnz$0347 = 0;$sub37353 = $sub37342;
   L24: while(1) {
    do {
     if ($cmp40354) {
      $cond268 = ($gotrad$1349|0)==(0);
      if ($cond268) {
       $110 = $15;$111 = $16;$112 = $15;$113 = $16;$gotdig$4 = $gotdig$3348;$gotrad$2 = 1;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
      } else {
       break L24;
      }
     } else {
      $cmp48 = ($k$0350|0)<(125);
      $17 = (_i64Add(($15|0),($16|0),1,0)|0);
      $18 = (getTempRet0() | 0);
      $cmp51 = ($c$addr$3352|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
        break;
       }
       $20 = HEAP32[$arrayidx77>>2]|0;
       $or = $20 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
       break;
      }
      $spec$select = $cmp51 ? $17 : $lnz$0347;
      $tobool56 = ($j$0351|0)==(0);
      $arrayidx64 = (($x) + ($k$0350<<2)|0);
      if ($tobool56) {
       $storemerge296 = $sub37353;
      } else {
       $19 = HEAP32[$arrayidx64>>2]|0;
       $mul = ($19*10)|0;
       $add59 = (($c$addr$3352) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $storemerge296 = $sub60;
      }
      HEAP32[$arrayidx64>>2] = $storemerge296;
      $inc66 = (($j$0351) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $spec$select257 = (($k$0350) + ($inc70))|0;
      $spec$select258 = $cmp67 ? 0 : $inc66;
      $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = 1;$gotrad$2 = $gotrad$1349;$j$2 = $spec$select258;$k$2 = $spec$select257;$lnz$2 = $spec$select;
     }
    } while(0);
    $21 = HEAP32[$rpos>>2]|0;
    $22 = HEAP32[$shend>>2]|0;
    $cmp84 = ($21>>>0)<($22>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($21)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $23 = HEAP8[$21>>0]|0;
     $conv89 = $23&255;
     $cond93 = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $cond93 = $call91;
    }
    $sub37 = (($cond93) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($cond93|0)==(46);
    $24 = $cmp40 | $cmp38;
    if ($24) {
     $108 = $110;$109 = $111;$15 = $112;$16 = $113;$c$addr$3352 = $cond93;$cmp40354 = $cmp40;$gotdig$3348 = $gotdig$4;$gotrad$1349 = $gotrad$2;$j$0351 = $j$2;$k$0350 = $k$2;$lnz$0347 = $lnz$2;$sub37353 = $sub37;
    } else {
     $26 = $112;$27 = $110;$29 = $113;$30 = $111;$c$addr$3$lcssa = $cond93;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 31;
     break L22;
    }
   }
   $tobool98269 = ($gotdig$3348|0)!=(0);
   $114 = $15;$115 = $16;$116 = $108;$117 = $109;$j$0302 = $j$0351;$k$0306 = $k$0350;$lnz$0312 = $lnz$0347;$tobool98275277 = $tobool98269;
   label = 39;
  } else {
   $26 = 0;$27 = $106;$29 = 0;$30 = $107;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $25 = $tobool95 ? $26 : $27;
   $28 = $tobool95 ? $29 : $30;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond260 = $tobool98 & $cmp100;
   if (!($or$cond260)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $114 = $26;$115 = $29;$116 = $25;$117 = $28;$j$0302 = $j$0$lcssa;$k$0306 = $k$0$lcssa;$lnz$0312 = $lnz$0$lcssa;$tobool98275277 = $tobool98;
     label = 39;
     break;
    } else {
     $118 = $26;$119 = $29;$120 = $25;$121 = $28;$j$0301 = $j$0$lcssa;$k$0305 = $k$0$lcssa;$lnz$0311 = $lnz$0$lcssa;$tobool98274 = $tobool98;
     label = 41;
     break;
    }
   }
   $31 = (_scanexp($f,$pok)|0);
   $32 = (getTempRet0() | 0);
   $33 = ($31|0)==(0);
   $34 = ($32|0)==(-2147483648);
   $35 = $33 & $34;
   if ($35) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0,0);
     $retval$1 = 0.0;
     break;
    }
    $36 = HEAP32[$shend>>2]|0;
    $tobool110 = ($36|0)==(0|0);
    if ($tobool110) {
     $38 = 0;$39 = 0;
    } else {
     $37 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($37)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $38 = 0;$39 = 0;
    }
   } else {
    $38 = $31;$39 = $32;
   }
   $40 = (_i64Add(($38|0),($39|0),($25|0),($28|0))|0);
   $41 = (getTempRet0() | 0);
   $46 = $40;$47 = $26;$49 = $41;$50 = $29;$j$0300 = $j$0$lcssa;$k$0304 = $k$0$lcssa;$lnz$0310 = $lnz$0$lcssa;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $42 = HEAP32[$shend>>2]|0;
  $tobool125 = ($42|0)==(0|0);
  if ($tobool125) {
   $118 = $114;$119 = $115;$120 = $116;$121 = $117;$j$0301 = $j$0302;$k$0305 = $k$0306;$lnz$0311 = $lnz$0312;$tobool98274 = $tobool98275277;
   label = 41;
  } else {
   $43 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($43)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98275277) {
    $46 = $116;$47 = $114;$49 = $117;$50 = $115;$j$0300 = $j$0302;$k$0304 = $k$0306;$lnz$0310 = $lnz$0312;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($tobool98274) {
   $46 = $120;$47 = $118;$49 = $121;$50 = $119;$j$0300 = $j$0301;$k$0304 = $k$0305;$lnz$0310 = $lnz$0311;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 22;
   ___shlim($f,0,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $44 = HEAP32[$x>>2]|0;
   $tobool138 = ($44|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $45 = ($46|0)==($47|0);
   $48 = ($49|0)==($50|0);
   $51 = $45 & $48;
   $52 = ($50|0)<(0);
   $53 = ($47>>>0)<(10);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   $or$cond = $56 & $51;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $44 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond261 = $cmp149 | $cmp152;
    if ($or$cond261) {
     $conv155 = (+($sign|0));
     $conv157 = (+($44>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $57 = ($div|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = ($49|0)>($58|0);
   $60 = ($46>>>0)>($div>>>0);
   $61 = ($49|0)==($58|0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 34;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $64 = ($sub170|0)<(0);
   $65 = $64 << 31 >> 31;
   $66 = ($49|0)<($65|0);
   $67 = ($46>>>0)<($sub170>>>0);
   $68 = ($49|0)==($65|0);
   $69 = $68 & $67;
   $70 = $66 | $69;
   if ($70) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 34;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0300|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0304;
   } else {
    $cmp183339 = ($j$0300|0)<(9);
    if ($cmp183339) {
     $arrayidx186 = (($x) + ($k$0304<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3340 = $j$0300;$mul187341 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187341*10)|0;
      $inc189 = (($j$3340) + 1)|0;
      $cmp183 = ($j$3340|0)<(8);
      if ($cmp183) {
       $j$3340 = $inc189;$mul187341 = $mul187;
      } else {
       break;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0304) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0310|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0310|0)<=($46|0);
    $cmp200 = ($46|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($46|0)==(9);
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $71 = HEAP32[$x>>2]|0;
      $conv208 = (+($71>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($46|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $72 = HEAP32[$x>>2]|0;
      $conv216 = (+($72>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($46))|0;
      $arrayidx219 = (4848 + ($sub218<<2)|0);
      $73 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($73|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($46, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $$pre = HEAP32[$x>>2]|0;
     $shr230 = $$pre >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond392 = $cmp226 | $cmp231;
     if ($or$cond392) {
      $conv234 = (+($sign|0));
      $conv236 = (+($$pre>>>0));
      $mul237 = $conv234 * $conv236;
      $sub238 = (($46) + -10)|0;
      $arrayidx239 = (4848 + ($sub238<<2)|0);
      $74 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($74|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $rem = (($46|0) % 9)&-1;
   $tobool244 = ($rem|0)==(0);
   if ($tobool244) {
    $a$3$ph = 0;$rp$3$ph = $46;$z$2$ph = $k$3;
   } else {
    $cmp246 = ($46|0)>(-1);
    $add252 = (($rem) + 9)|0;
    $cond254 = $cmp246 ? $rem : $add252;
    $sub255 = (8 - ($cond254))|0;
    $arrayidx256 = (4848 + ($sub255<<2)|0);
    $75 = HEAP32[$arrayidx256>>2]|0;
    $cmp258331 = ($k$3|0)==(0);
    if ($cmp258331) {
     $a$0$lcssa379 = 0;$rp$0$lcssa378 = $46;$z$0 = 0;
    } else {
     $div267 = (1000000000 / ($75|0))&-1;
     $a$0333 = 0;$carry$0335 = 0;$k$4334 = 0;$rp$0332 = $46;
     while(1) {
      $arrayidx261 = (($x) + ($k$4334<<2)|0);
      $76 = HEAP32[$arrayidx261>>2]|0;
      $div264 = (($76>>>0) / ($75>>>0))&-1;
      $77 = Math_imul($div264, $75)|0;
      $78 = (($76) - ($77))|0;
      $add265 = (($div264) + ($carry$0335))|0;
      HEAP32[$arrayidx261>>2] = $add265;
      $mul268 = Math_imul($div267, $78)|0;
      $cmp269 = ($k$4334|0)==($a$0333|0);
      $tobool273 = ($add265|0)==(0);
      $or$cond262 = $cmp269 & $tobool273;
      $add275 = (($a$0333) + 1)|0;
      $and = $add275 & 127;
      $sub276 = (($rp$0332) + -9)|0;
      $spec$select290 = $or$cond262 ? $sub276 : $rp$0332;
      $spec$select291 = $or$cond262 ? $and : $a$0333;
      $inc279 = (($k$4334) + 1)|0;
      $cmp258 = ($inc279|0)==($k$3|0);
      if ($cmp258) {
       break;
      } else {
       $a$0333 = $spec$select291;$carry$0335 = $mul268;$k$4334 = $inc279;$rp$0332 = $spec$select290;
      }
     }
     $tobool281 = ($mul268|0)==(0);
     if ($tobool281) {
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $k$3;
     } else {
      $arrayidx284 = (($x) + ($k$3<<2)|0);
      $inc283 = (($k$3) + 1)|0;
      HEAP32[$arrayidx284>>2] = $mul268;
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $inc283;
     }
    }
    $sub286 = (9 - ($cond254))|0;
    $add287 = (($sub286) + ($rp$0$lcssa378))|0;
    $a$3$ph = $a$0$lcssa379;$rp$3$ph = $add287;$z$2$ph = $z$0;
   }
   $a$3$ph406 = $a$3$ph;$e2$0$ph = 0;$rp$3$ph404 = $rp$3$ph;$z$2$ph405 = $z$2$ph;
   L104: while(1) {
    $cmp289 = ($rp$3$ph404|0)<(18);
    $cmp292 = ($rp$3$ph404|0)==(18);
    $arrayidx294 = (($x) + ($a$3$ph406<<2)|0);
    $e2$0 = $e2$0$ph;$z$2 = $z$2$ph405;
    while(1) {
     if (!($cmp289)) {
      if (!($cmp292)) {
       $rp$5$ph = $rp$3$ph404;
       break L104;
      }
      $79 = HEAP32[$arrayidx294>>2]|0;
      $cmp295 = ($79>>>0)<(9007199);
      if (!($cmp295)) {
       $rp$5$ph = 18;
       break L104;
      }
     }
     $sub300 = (($z$2) + 127)|0;
     $carry298$0 = 0;$k$5$in = $sub300;$z$3 = $z$2;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx304 = (($x) + ($k$5<<2)|0);
      $80 = HEAP32[$arrayidx304>>2]|0;
      $81 = (_bitshift64Shl(($80|0),0,29)|0);
      $82 = (getTempRet0() | 0);
      $83 = (_i64Add(($81|0),($82|0),($carry298$0|0),0)|0);
      $84 = (getTempRet0() | 0);
      $85 = ($84>>>0)>(0);
      $86 = ($83>>>0)>(1000000000);
      $87 = ($84|0)==(0);
      $88 = $87 & $86;
      $89 = $85 | $88;
      if ($89) {
       $90 = (___udivdi3(($83|0),($84|0),1000000000,0)|0);
       $91 = (getTempRet0() | 0);
       $92 = (___muldi3(($90|0),($91|0),1000000000,0)|0);
       $93 = (getTempRet0() | 0);
       $94 = (_i64Subtract(($83|0),($84|0),($92|0),($93|0))|0);
       $95 = (getTempRet0() | 0);
       $add307$sink$off0 = $94;$carry298$1 = $90;
      } else {
       $add307$sink$off0 = $83;$carry298$1 = 0;
      }
      HEAP32[$arrayidx304>>2] = $add307$sink$off0;
      $sub320 = (($z$3) + 127)|0;
      $and321 = $sub320 & 127;
      $cmp322 = ($k$5|0)!=($and321|0);
      $cmp325 = ($k$5|0)==($a$3$ph406|0);
      $or$cond263 = $cmp322 | $cmp325;
      $tobool329 = ($add307$sink$off0|0)==(0);
      $spec$select264 = $tobool329 ? $k$5 : $z$3;
      $spec$select292 = $or$cond263 ? $z$3 : $spec$select264;
      $sub340 = (($k$5) + -1)|0;
      if ($cmp325) {
       break;
      } else {
       $carry298$0 = $carry298$1;$k$5$in = $sub340;$z$3 = $spec$select292;
      }
     }
     $sub299 = (($e2$0) + -29)|0;
     $tobool343 = ($carry298$1|0)==(0);
     if ($tobool343) {
      $e2$0 = $sub299;$z$2 = $z$3;
     } else {
      break;
     }
    }
    $add345 = (($rp$3$ph404) + 9)|0;
    $sub346 = (($a$3$ph406) + 127)|0;
    $and347 = $sub346 & 127;
    $cmp348 = ($and347|0)==($spec$select292|0);
    $sub351 = (($spec$select292) + 127)|0;
    $and352 = $sub351 & 127;
    $sub354 = (($spec$select292) + 126)|0;
    $and355 = $sub354 & 127;
    $arrayidx356 = (($x) + ($and355<<2)|0);
    if ($cmp348) {
     $arrayidx353 = (($x) + ($and352<<2)|0);
     $96 = HEAP32[$arrayidx353>>2]|0;
     $97 = HEAP32[$arrayidx356>>2]|0;
     $or357 = $97 | $96;
     HEAP32[$arrayidx356>>2] = $or357;
     $z$5 = $and352;
    } else {
     $z$5 = $z$3;
    }
    $arrayidx359 = (($x) + ($and347<<2)|0);
    HEAP32[$arrayidx359>>2] = $carry298$1;
    $a$3$ph406 = $and347;$e2$0$ph = $sub299;$rp$3$ph404 = $add345;$z$2$ph405 = $z$5;
   }
   $a$5$ph$ph = $a$3$ph406;$e2$1$ph$ph = $e2$0;$rp$5$ph403$ph = $rp$5$ph;$z$7$ph$ph = $z$2;
   L123: while(1) {
    $add433 = (($z$7$ph$ph) + 1)|0;
    $and434 = $add433 & 127;
    $sub442 = (($z$7$ph$ph) + 127)|0;
    $and443 = $sub442 & 127;
    $arrayidx444 = (($x) + ($and443<<2)|0);
    $a$5$ph = $a$5$ph$ph;$e2$1$ph = $e2$1$ph$ph;$rp$5$ph403 = $rp$5$ph403$ph;
    while(1) {
     $cmp392 = ($rp$5$ph403|0)==(18);
     $cmp396 = ($rp$5$ph403|0)>(27);
     $spec$select265 = $cmp396 ? 9 : 1;
     $a$5 = $a$5$ph;$e2$1 = $e2$1$ph;
     while(1) {
      $i$0323 = 0;
      while(1) {
       $add367 = (($i$0323) + ($a$5))|0;
       $and368 = $add367 & 127;
       $cmp369 = ($and368|0)==($z$7$ph$ph|0);
       if ($cmp369) {
        label = 92;
        break;
       }
       $arrayidx372 = (($x) + ($and368<<2)|0);
       $98 = HEAP32[$arrayidx372>>2]|0;
       $arrayidx373 = (7564 + ($i$0323<<2)|0);
       $99 = HEAP32[$arrayidx373>>2]|0;
       $cmp374 = ($98>>>0)<($99>>>0);
       if ($cmp374) {
        label = 92;
        break;
       }
       $cmp382 = ($98>>>0)>($99>>>0);
       if ($cmp382) {
        break;
       }
       $inc387 = (($i$0323) + 1)|0;
       $cmp364 = ($inc387>>>0)<(2);
       if ($cmp364) {
        $i$0323 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($cmp392) {
        break L123;
       }
      }
      $add400 = (($spec$select265) + ($e2$1))|0;
      $cmp402324 = ($a$5|0)==($z$7$ph$ph|0);
      if ($cmp402324) {
       $a$5 = $z$7$ph$ph;$e2$1 = $add400;
      } else {
       break;
      }
     }
     $shl407 = 1 << $spec$select265;
     $sub408 = (($shl407) + -1)|0;
     $shr414 = 1000000000 >>> $spec$select265;
     $a$6326 = $a$5;$carry362$0328 = 0;$k$6327 = $a$5;$rp$6325 = $rp$5$ph403;
     while(1) {
      $arrayidx406 = (($x) + ($k$6327<<2)|0);
      $100 = HEAP32[$arrayidx406>>2]|0;
      $and409 = $100 & $sub408;
      $shr411 = $100 >>> $spec$select265;
      $add412 = (($shr411) + ($carry362$0328))|0;
      HEAP32[$arrayidx406>>2] = $add412;
      $mul415 = Math_imul($and409, $shr414)|0;
      $cmp416 = ($k$6327|0)==($a$6326|0);
      $tobool420 = ($add412|0)==(0);
      $or$cond266 = $cmp416 & $tobool420;
      $add422 = (($a$6326) + 1)|0;
      $and423 = $add422 & 127;
      $sub425 = (($rp$6325) + -9)|0;
      $spec$select293 = $or$cond266 ? $sub425 : $rp$6325;
      $spec$select294 = $or$cond266 ? $and423 : $a$6326;
      $add428 = (($k$6327) + 1)|0;
      $and429 = $add428 & 127;
      $cmp402 = ($and429|0)==($z$7$ph$ph|0);
      if ($cmp402) {
       break;
      } else {
       $a$6326 = $spec$select294;$carry362$0328 = $mul415;$k$6327 = $and429;$rp$6325 = $spec$select293;
      }
     }
     $tobool431 = ($mul415|0)==(0);
     if (!($tobool431)) {
      $cmp435 = ($and434|0)==($spec$select294|0);
      if (!($cmp435)) {
       break;
      }
      $101 = HEAP32[$arrayidx444>>2]|0;
      $or445 = $101 | 1;
      HEAP32[$arrayidx444>>2] = $or445;
     }
     $a$5$ph = $spec$select294;$e2$1$ph = $add400;$rp$5$ph403 = $spec$select293;
    }
    $arrayidx438 = (($x) + ($z$7$ph$ph<<2)|0);
    HEAP32[$arrayidx438>>2] = $mul415;
    $a$5$ph$ph = $spec$select294;$e2$1$ph$ph = $add400;$rp$5$ph403$ph = $spec$select293;$z$7$ph$ph = $and434;
   }
   $i$4322 = 0;$y$0321 = 0.0;$z$10320 = $z$7$ph$ph;
   while(1) {
    $add457 = (($i$4322) + ($a$5))|0;
    $and458 = $add457 & 127;
    $cmp459 = ($and458|0)==($z$10320|0);
    $add462 = (($z$10320) + 1)|0;
    $and463 = $add462 & 127;
    if ($cmp459) {
     $sub464 = (($and463) + -1)|0;
     $arrayidx465 = (($x) + ($sub464<<2)|0);
     HEAP32[$arrayidx465>>2] = 0;
     $z$11 = $and463;
    } else {
     $z$11 = $z$10320;
    }
    $mul467 = $y$0321 * 1.0E+9;
    $arrayidx470 = (($x) + ($and458<<2)|0);
    $102 = HEAP32[$arrayidx470>>2]|0;
    $conv471 = (+($102>>>0));
    $add472 = $mul467 + $conv471;
    $inc474 = (($i$4322) + 1)|0;
    $exitcond = ($inc474|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4322 = $inc474;$y$0321 = $add472;$z$10320 = $z$11;
    }
   }
   $conv476 = (+($sign|0));
   $mul477 = $add472 * $conv476;
   $add478 = (($e2$1) + 53)|0;
   $sub479 = (($add478) - ($emin))|0;
   $cmp480 = ($sub479|0)<($bits|0);
   $103 = ($sub479|0)>(0);
   $spec$store$select = $103 ? $sub479 : 0;
   $bits$addr$0 = $cmp480 ? $spec$store$select : $bits;
   $cmp490 = ($bits$addr$0|0)<(53);
   if ($cmp490) {
    $sub494 = (105 - ($bits$addr$0))|0;
    $call495 = (+_scalbn(1.0,$sub494));
    $call496 = (+_copysignl($call495,$mul477));
    $sub497 = (53 - ($bits$addr$0))|0;
    $call498 = (+_scalbn(1.0,$sub497));
    $call499 = (+_fmodl($mul477,$call498));
    $sub500 = $mul477 - $call499;
    $add501 = $call496 + $sub500;
    $bias$0 = $call496;$frac$0 = $call499;$y$1 = $add501;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul477;
   }
   $add503 = (($a$5) + 2)|0;
   $and504 = $add503 & 127;
   $cmp505 = ($and504|0)==($z$11|0);
   if ($cmp505) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx510 = (($x) + ($and504<<2)|0);
    $104 = HEAP32[$arrayidx510>>2]|0;
    $cmp511 = ($104>>>0)<(500000000);
    do {
     if ($cmp511) {
      $tobool514 = ($104|0)==(0);
      if ($tobool514) {
       $add517 = (($a$5) + 3)|0;
       $and518 = $add517 & 127;
       $cmp519 = ($and518|0)==($z$11|0);
       if ($cmp519) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul523 = $conv476 * 0.25;
      $add524 = $mul523 + $frac$0;
      $frac$1 = $add524;
     } else {
      $cmp526 = ($104|0)==(500000000);
      if (!($cmp526)) {
       $mul530 = $conv476 * 0.75;
       $add531 = $mul530 + $frac$0;
       $frac$1 = $add531;
       break;
      }
      $add537 = (($a$5) + 3)|0;
      $and538 = $add537 & 127;
      $cmp539 = ($and538|0)==($z$11|0);
      if ($cmp539) {
       $mul543 = $conv476 * 0.5;
       $add544 = $mul543 + $frac$0;
       $frac$1 = $add544;
       break;
      } else {
       $mul547 = $conv476 * 0.75;
       $add548 = $mul547 + $frac$0;
       $frac$1 = $add548;
       break;
      }
     }
    } while(0);
    $sub553 = (53 - ($bits$addr$0))|0;
    $cmp554 = ($sub553|0)>(1);
    if ($cmp554) {
     $call557 = (+_fmodl($frac$1,1.0));
     $tobool558 = $call557 != 0.0;
     if ($tobool558) {
      $frac$3 = $frac$1;
     } else {
      $inc560 = $frac$1 + 1.0;
      $frac$3 = $inc560;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add563 = $y$1 + $frac$3;
   $sub564 = $add563 - $bias$0;
   $and566 = $add478 & 2147483647;
   $sub567 = (-2 - ($0))|0;
   $cmp568 = ($and566|0)>($sub567|0);
   do {
    if ($cmp568) {
     $call571 = (+Math_abs((+$sub564)));
     $cmp572 = !($call571 >= 9007199254740992.0);
     $mul583 = $sub564 * 0.5;
     $not$cmp572 = $cmp572 ^ 1;
     $inc584 = $not$cmp572&1;
     $e2$3 = (($e2$1) + ($inc584))|0;
     $y$2 = $cmp572 ? $sub564 : $mul583;
     $105 = (($e2$3) + 50)|0;
     $cmp587 = ($105|0)>($sub1|0);
     if (!($cmp587)) {
      $cmp579 = ($bits$addr$0|0)!=($sub479|0);
      $narrow = $cmp579 | $cmp572;
      $denormal$2$v = $cmp480 & $narrow;
      $tobool592 = $frac$3 != 0.0;
      $or$cond5 = $tobool592 & $denormal$2$v;
      if (!($or$cond5)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call594 = (___errno_location()|0);
     HEAP32[$call594>>2] = 34;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub564;
    }
   } while(0);
   $call597 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call597;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv = 0, $conv102 = 0, $conv15 = 0;
 var $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub90 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$047 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $45 = -2147483648;$46 = 0;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    label = 14;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;$sub31$pre$phiZ2D = $sub;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($cond) + -48)|0;
  $c$0 = $cond;$neg$0 = 0;$sub31$pre$phiZ2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $cmp32 = ($sub31$pre$phiZ2D>>>0)>(9);
  if ($cmp32) {
   label = 14;
  } else {
   $c$146 = $c$0;$x$047 = 0;
   while(1) {
    $mul = ($x$047*10)|0;
    $add = (($c$146) + -48)|0;
    $sub48 = (($add) + ($mul))|0;
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp51 = ($9>>>0)<($10>>>0);
    if ($cmp51) {
     $incdec$ptr55 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr55;
     $11 = HEAP8[$9>>0]|0;
     $conv56 = $11&255;
     $cond60 = $conv56;
    } else {
     $call58 = (___shgetc($f)|0);
     $cond60 = $call58;
    }
    $sub43 = (($cond60) + -48)|0;
    $cmp44 = ($sub43>>>0)<(10);
    $cmp46 = ($sub48|0)<(214748364);
    $12 = $cmp44 & $cmp46;
    if ($12) {
     $c$146 = $cond60;$x$047 = $sub48;
    } else {
     break;
    }
   }
   $13 = ($sub48|0)<(0);
   $14 = $13 << 31 >> 31;
   $cmp6440 = ($sub43>>>0)<(10);
   if ($cmp6440) {
    $15 = $sub48;$16 = $14;$c$241 = $cond60;
    while(1) {
     $17 = (___muldi3(($15|0),($16|0),10,0)|0);
     $18 = (getTempRet0() | 0);
     $19 = ($c$241|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = (_i64Add(($c$241|0),($20|0),-48,-1)|0);
     $22 = (getTempRet0() | 0);
     $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
     $24 = (getTempRet0() | 0);
     $25 = HEAP32[$rpos>>2]|0;
     $26 = HEAP32[$shend>>2]|0;
     $cmp78 = ($25>>>0)<($26>>>0);
     if ($cmp78) {
      $incdec$ptr82 = ((($25)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr82;
      $27 = HEAP8[$25>>0]|0;
      $conv83 = $27&255;
      $cond87 = $conv83;
     } else {
      $call85 = (___shgetc($f)|0);
      $cond87 = $call85;
     }
     $sub63 = (($cond87) + -48)|0;
     $cmp64 = ($sub63>>>0)<(10);
     $28 = ($24|0)<(21474836);
     $29 = ($23>>>0)<(2061584302);
     $30 = ($24|0)==(21474836);
     $31 = $30 & $29;
     $32 = $28 | $31;
     $33 = $cmp64 & $32;
     if ($33) {
      $15 = $23;$16 = $24;$c$241 = $cond87;
     } else {
      break;
     }
    }
    $cmp9138 = ($sub63>>>0)<(10);
    if ($cmp9138) {
     while(1) {
      $34 = HEAP32[$rpos>>2]|0;
      $35 = HEAP32[$shend>>2]|0;
      $cmp97 = ($34>>>0)<($35>>>0);
      if ($cmp97) {
       $incdec$ptr101 = ((($34)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr101;
       $36 = HEAP8[$34>>0]|0;
       $conv102 = $36&255;
       $cond106 = $conv102;
      } else {
       $call104 = (___shgetc($f)|0);
       $cond106 = $call104;
      }
      $sub90 = (($cond106) + -48)|0;
      $cmp91 = ($sub90>>>0)<(10);
      if (!($cmp91)) {
       $39 = $23;$40 = $24;
       break;
      }
     }
    } else {
     $39 = $23;$40 = $24;
    }
   } else {
    $39 = $sub48;$40 = $14;
   }
   $37 = HEAP32[$shend>>2]|0;
   $tobool109 = ($37|0)==(0|0);
   if (!($tobool109)) {
    $38 = HEAP32[$rpos>>2]|0;
    $incdec$ptr112 = ((($38)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr112;
   }
   $tobool115 = ($neg$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = (getTempRet0() | 0);
   $43 = $tobool115 ? $39 : $41;
   $44 = $tobool115 ? $40 : $42;
   $45 = $44;$46 = $43;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$shend>>2]|0;
  $tobool36 = ($$pr|0)==(0|0);
  if ($tobool36) {
   $45 = -2147483648;$46 = 0;
  } else {
   $8 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($8)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $45 = -2147483648;$46 = 0;
  }
 }
 setTempRet0(($45) | 0);
 return ($46|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $spec$select = 0, $spec$select20 = 0.0;
 var $spec$select21 = 0, $spec$select22 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($n|0)>(2046);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $spec$store$select = $0 ? $sub4 : 1023;
  $spec$select = $cmp1 ? $spec$store$select : $sub;
  $spec$select20 = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $spec$select;$y$0 = $spec$select20;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($n|0)<(-2044);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $spec$store$select1 = $1 ? $add14 : -1022;
   $spec$select21 = $cmp11 ? $spec$store$select1 : $add;
   $spec$select22 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $spec$select21;$y$0 = $spec$select22;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7965 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0;
 var $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $spec$select = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = (getTempRet0() | 0);
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_273($y)|0);
   $15 = (getTempRet0() | 0);
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = (getTempRet0() | 0);
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $spec$select = $31 ? $mul42 : $x;
     return (+$spec$select);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = (getTempRet0() | 0);
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$081 = 0;
      while(1) {
       $dec = (($ex$081) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = (getTempRet0() | 0);
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$081 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = (getTempRet0() | 0);
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = (getTempRet0() | 0);
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$077 = 0;
      while(1) {
       $dec64 = (($ey$077) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = (getTempRet0() | 0);
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$077 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = (getTempRet0() | 0);
     $74 = $68;$75 = $69;$ey$1 = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1 = $conv5;
    }
    $cmp7965 = ($ex$1|0)>($ey$1|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L25: do {
     if ($cmp7965) {
      $136 = $72;$137 = $73;$84 = $76;$86 = $77;$cmp8571 = $82;$ex$268 = $ex$1;
      while(1) {
       if ($cmp8571) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $136;$89 = $137;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = (getTempRet0() | 0);
       $dec96 = (($ex$268) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = (getTempRet0() | 0);
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $136 = $90;$137 = $91;$84 = $92;$86 = $93;$cmp8571 = $98;$ex$268 = $dec96;
       } else {
        $100 = $92;$102 = $93;$134 = $90;$135 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L25;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$134 = $72;$135 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $135;$107 = $134;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$362 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = (getTempRet0() | 0);
      $dec117 = (($ex$362) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$362 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = (getTempRet0() | 0);
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = (getTempRet0() | 0);
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$132 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = (getTempRet0() | 0);
     $131 = $129;$132 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $132;HEAP32[tempDoublePtr+4>>2] = $130;$133 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $133;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_273($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function ___munmap($start,$len) {
 $start = $start|0;
 $len = $len|0;
 var $0 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = $start;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $call = (___syscall91(91,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _dummy_405() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _freelocale($l) {
 $l = $l|0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___loc_is_allocated($l)|0);
 $tobool = ($call|0)==(0);
 if (!($tobool)) {
  _free($l);
 }
 return;
}
function ___loc_is_allocated($loc) {
 $loc = $loc|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($loc|0)!=(0|0);
 $cmp = ($loc|0)!=(19424|0);
 $or$cond = $tobool & $cmp;
 $cmp1 = ($loc|0)!=(7268|0);
 $narrow = $cmp1 & $or$cond;
 $0 = $narrow&1;
 return ($0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx38 = 0, $c$036 = 0, $c$2 = 0, $call = 0, $call71 = 0, $cmp = 0, $cmp32 = 0, $cmp65 = 0;
 var $conv = 0, $conv29 = 0, $conv31 = 0, $conv42 = 0, $conv52 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $incdec$ptr = 0, $incdec$ptr5149 = 0, $lnot$ext = 0, $locale = 0, $n$addr$035 = 0, $or = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0;
 var $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $shl = 0, $shl42 = 0, $shr46 = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, $sub43 = 0, $sub53 = 0, $sub5345 = 0, $sub59 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool21 = 0;
 var $tobool3 = 0, $tobool40 = 0, $tobool48 = 0, $tobool57 = 0, $tobool5748 = 0, $tobool6 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($st|0)==(0|0);
 $spec$select = $tobool ? 19452 : $st;
 $0 = HEAP32[$spec$select>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   $spec$select32 = $tobool6 ? $dummy : $wc;
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
   } else {
    $tobool13 = ($0|0)==(0);
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      $conv = $1&255;
      HEAP32[$spec$select32>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      break;
     }
     $call = (___pthread_self_414()|0);
     $locale = ((($call)) + 188|0);
     $2 = HEAP32[$locale>>2]|0;
     $3 = HEAP32[$2>>2]|0;
     $tobool21 = ($3|0)==(0|0);
     $4 = HEAP8[$src>>0]|0;
     if ($tobool21) {
      $conv29 = $4 << 24 >> 24;
      $and = $conv29 & 57343;
      HEAP32[$spec$select32>>2] = $and;
      $retval$0 = 1;
      break;
     }
     $conv31 = $4&255;
     $sub = (($conv31) + -194)|0;
     $cmp32 = ($sub>>>0)>(50);
     if ($cmp32) {
      label = 19;
      break;
     }
     $incdec$ptr = ((($src)) + 1|0);
     $arrayidx38 = (48 + ($sub<<2)|0);
     $5 = HEAP32[$arrayidx38>>2]|0;
     $dec = (($n) + -1)|0;
     $tobool40 = ($dec|0)==(0);
     if ($tobool40) {
      $c$2 = $5;
     } else {
      $c$036 = $5;$n$addr$035 = $dec;$s$037 = $incdec$ptr;
      label = 11;
     }
    } else {
     $c$036 = $0;$n$addr$035 = $n;$s$037 = $src;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $6 = HEAP8[$s$037>>0]|0;
      $conv42 = $6&255;
      $7 = $conv42 >>> 3;
      $sub43 = (($7) + -16)|0;
      $shr46 = $c$036 >> 26;
      $add = (($7) + ($shr46))|0;
      $or = $sub43 | $add;
      $tobool48 = ($or>>>0)>(7);
      if ($tobool48) {
       label = 19;
       break L1;
      }
      $shl42 = $c$036 << 6;
      $sub5345 = (($conv42) + -128)|0;
      $or5446 = $sub5345 | $shl42;
      $dec5547 = (($n$addr$035) + -1)|0;
      $tobool5748 = ($or5446|0)<(0);
      if ($tobool5748) {
       $dec5551 = $dec5547;$or5450 = $or5446;$s$037$pn = $s$037;
       while(1) {
        $incdec$ptr5149 = ((($s$037$pn)) + 1|0);
        $tobool61 = ($dec5551|0)==(0);
        if ($tobool61) {
         $c$2 = $or5450;
         break L14;
        }
        $8 = HEAP8[$incdec$ptr5149>>0]|0;
        $9 = $8 & -64;
        $cmp65 = ($9<<24>>24)==(-128);
        if (!($cmp65)) {
         label = 19;
         break L1;
        }
        $shl = $or5450 << 6;
        $conv52 = $8&255;
        $sub53 = (($conv52) + -128)|0;
        $or54 = $sub53 | $shl;
        $dec55 = (($dec5551) + -1)|0;
        $tobool57 = ($or54|0)<(0);
        if ($tobool57) {
         $dec5551 = $dec55;$or5450 = $or54;$s$037$pn = $incdec$ptr5149;
        } else {
         $dec55$lcssa = $dec55;$or54$lcssa = $or54;
         break;
        }
       }
      } else {
       $dec55$lcssa = $dec5547;$or54$lcssa = $or5446;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select32>>2] = $or54$lcssa;
      $sub59 = (($n) - ($dec55$lcssa))|0;
      $retval$0 = $sub59;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $c$2;
    $retval$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $call71 = (___errno_location()|0);
  HEAP32[$call71>>2] = 84;
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_414() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isdigit($c)|0);
 return ($call|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isxdigit($c)|0);
 return ($call|0);
}
function ___get_locale($cat,$val) {
 $cat = $cat|0;
 $val = $val|0;
 var $$pre88 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr105 = 0, $add$ptr134 = 0, $add107 = 0, $arraydecay = 0, $arraydecay63 = 0, $arraydecay74 = 0, $arrayidx103 = 0, $arrayidx108 = 0, $arrayidx124 = 0, $arrayidx148 = 0, $arrayidx16 = 0, $arrayidx28 = 0, $arrayidx38 = 0, $arrayidx53 = 0;
 var $buf = 0, $call = 0, $call110 = 0, $call113 = 0, $call139 = 0, $call3 = 0, $call41 = 0, $call44 = 0, $call64 = 0, $call75 = 0, $call84 = 0, $call9 = 0, $call91 = 0, $cmp = 0, $cmp153 = 0, $cmp25 = 0, $cmp35 = 0, $cmp50 = 0, $cmp55 = 0, $cmp97 = 0;
 var $inc = 0, $lnot$ext$neg = 0, $lnot$ext133 = 0, $map_size = 0, $map_size119 = 0, $map_size143 = 0, $n$0$lcssa = 0, $n$085 = 0, $name120 = 0, $name144 = 0, $new$4 = 0, $next = 0, $next125 = 0, $next149 = 0, $next80 = 0, $or$cond = 0, $p$084 = 0, $p$182 = 0, $path$180 = 0, $retval$0 = 0;
 var $spec$select = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub96 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool111 = 0, $tobool114 = 0, $tobool129 = 0, $tobool13 = 0, $tobool140 = 0, $tobool151 = 0, $tobool2 = 0, $tobool30 = 0, $tobool39 = 0, $tobool4 = 0, $tobool42 = 0;
 var $tobool45 = 0, $tobool61 = 0, $tobool6183 = 0, $tobool65 = 0, $tobool7 = 0, $tobool71 = 0, $tobool7181 = 0, $tobool76 = 0, $tobool82 = 0, $tobool86 = 0, $tobool89 = 0, $tobool8979 = 0, $tobool92 = 0, $val$addr$1 = 0, $val$addr$290 = 0, $val$addr$291 = 0, $val$addr$292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $buf = sp;
 $map_size = sp + 256|0;
 $0 = HEAP8[$val>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 do {
  if ($tobool) {
   $call = (_getenv((12128|0))|0);
   $tobool1 = ($call|0)==(0|0);
   if (!($tobool1)) {
    $1 = HEAP8[$call>>0]|0;
    $tobool2 = ($1<<24>>24)==(0);
    if (!($tobool2)) {
     $val$addr$1 = $call;
     break;
    }
   }
   $arraydecay = (4880 + (($cat*12)|0)|0);
   $call3 = (_getenv(($arraydecay|0))|0);
   $tobool4 = ($call3|0)==(0|0);
   if (!($tobool4)) {
    $2 = HEAP8[$call3>>0]|0;
    $tobool7 = ($2<<24>>24)==(0);
    if (!($tobool7)) {
     $val$addr$1 = $call3;
     break;
    }
   }
   $call9 = (_getenv((12135|0))|0);
   $tobool10 = ($call9|0)==(0|0);
   if (!($tobool10)) {
    $3 = HEAP8[$call9>>0]|0;
    $tobool13 = ($3<<24>>24)==(0);
    if (!($tobool13)) {
     $val$addr$1 = $call9;
     break;
    }
   }
   $val$addr$1 = 12140;
  } else {
   $val$addr$1 = $val;
  }
 } while(0);
 $n$085 = 0;
 L13: while(1) {
  $arrayidx16 = (($val$addr$1) + ($n$085)|0);
  $4 = HEAP8[$arrayidx16>>0]|0;
  switch ($4<<24>>24) {
  case 47: case 0:  {
   $n$0$lcssa = $n$085;
   break L13;
   break;
  }
  default: {
  }
  }
  $inc = (($n$085) + 1)|0;
  $cmp = ($inc>>>0)<(15);
  if ($cmp) {
   $n$085 = $inc;
  } else {
   $n$0$lcssa = 15;
   break;
  }
 }
 $5 = HEAP8[$val$addr$1>>0]|0;
 $cmp25 = ($5<<24>>24)==(46);
 if ($cmp25) {
  $val$addr$290 = 12140;
  label = 15;
 } else {
  $arrayidx28 = (($val$addr$1) + ($n$0$lcssa)|0);
  $6 = HEAP8[$arrayidx28>>0]|0;
  $tobool30 = ($6<<24>>24)==(0);
  if ($tobool30) {
   $cmp35 = ($5<<24>>24)==(67);
   if ($cmp35) {
    $val$addr$290 = $val$addr$1;
    label = 15;
   } else {
    $val$addr$291 = $val$addr$1;
    label = 16;
   }
  } else {
   $val$addr$290 = 12140;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $arrayidx38 = ((($val$addr$290)) + 1|0);
  $7 = HEAP8[$arrayidx38>>0]|0;
  $tobool39 = ($7<<24>>24)==(0);
  if ($tobool39) {
   $val$addr$292 = $val$addr$290;
   label = 18;
  } else {
   $val$addr$291 = $val$addr$290;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $call41 = (_strcmp($val$addr$291,12140)|0);
   $tobool42 = ($call41|0)==(0);
   if ($tobool42) {
    $val$addr$292 = $val$addr$291;
    label = 18;
   } else {
    $call44 = (_strcmp($val$addr$291,12148)|0);
    $tobool45 = ($call44|0)==(0);
    if ($tobool45) {
     $val$addr$292 = $val$addr$291;
     label = 18;
    } else {
     $9 = HEAP32[4864]|0;
     $tobool6183 = ($9|0)==(0|0);
     if (!($tobool6183)) {
      $p$084 = $9;
      while(1) {
       $arraydecay63 = ((($p$084)) + 8|0);
       $call64 = (_strcmp($val$addr$291,$arraydecay63)|0);
       $tobool65 = ($call64|0)==(0);
       if ($tobool65) {
        $retval$0 = $p$084;
        break L22;
       }
       $next = ((($p$084)) + 24|0);
       $10 = HEAP32[$next>>2]|0;
       $tobool61 = ($10|0)==(0|0);
       if ($tobool61) {
        break;
       } else {
        $p$084 = $10;
       }
      }
     }
     ___lock((19460|0));
     $11 = HEAP32[4864]|0;
     $tobool7181 = ($11|0)==(0|0);
     L32: do {
      if (!($tobool7181)) {
       $p$182 = $11;
       while(1) {
        $arraydecay74 = ((($p$182)) + 8|0);
        $call75 = (_strcmp($val$addr$291,$arraydecay74)|0);
        $tobool76 = ($call75|0)==(0);
        if ($tobool76) {
         break;
        }
        $next80 = ((($p$182)) + 24|0);
        $12 = HEAP32[$next80>>2]|0;
        $tobool71 = ($12|0)==(0|0);
        if ($tobool71) {
         break L32;
        } else {
         $p$182 = $12;
        }
       }
       ___unlock((19460|0));
       $retval$0 = $p$182;
       break L22;
      }
     } while(0);
     $13 = HEAP32[(19368)>>2]|0;
     $tobool82 = ($13|0)==(0);
     L39: do {
      if ($tobool82) {
       $call84 = (_getenv((12154|0))|0);
       $tobool86 = ($call84|0)==(0|0);
       if ($tobool86) {
        label = 41;
       } else {
        $14 = HEAP8[$call84>>0]|0;
        $tobool8979 = ($14<<24>>24)==(0);
        if ($tobool8979) {
         label = 41;
        } else {
         $sub96 = (254 - ($n$0$lcssa))|0;
         $add = (($n$0$lcssa) + 1)|0;
         $path$180 = $call84;
         while(1) {
          $call91 = (___strchrnul($path$180,58)|0);
          $sub$ptr$lhs$cast = $call91;
          $sub$ptr$rhs$cast = $path$180;
          $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
          $15 = HEAP8[$call91>>0]|0;
          $tobool92 = ($15<<24>>24)!=(0);
          $lnot$ext$neg = $tobool92 << 31 >> 31;
          $sub = (($sub$ptr$sub) + ($lnot$ext$neg))|0;
          $cmp97 = ($sub>>>0)<($sub96>>>0);
          if ($cmp97) {
           (_memcpy(($buf|0),($path$180|0),($sub|0))|0);
           $arrayidx103 = (($buf) + ($sub)|0);
           HEAP8[$arrayidx103>>0] = 47;
           $add$ptr105 = ((($arrayidx103)) + 1|0);
           (_memcpy(($add$ptr105|0),($val$addr$291|0),($n$0$lcssa|0))|0);
           $add107 = (($add) + ($sub))|0;
           $arrayidx108 = (($buf) + ($add107)|0);
           HEAP8[$arrayidx108>>0] = 0;
           $call110 = (___map_file(($buf|0),($map_size|0))|0);
           $tobool111 = ($call110|0)==(0|0);
           if (!($tobool111)) {
            break;
           }
           $$pre88 = HEAP8[$call91>>0]|0;
           $18 = $$pre88;
          } else {
           $18 = $15;
          }
          $tobool129 = ($18<<24>>24)!=(0);
          $lnot$ext133 = $tobool129&1;
          $add$ptr134 = (($call91) + ($lnot$ext133)|0);
          $19 = HEAP8[$add$ptr134>>0]|0;
          $tobool89 = ($19<<24>>24)==(0);
          if ($tobool89) {
           label = 41;
           break L39;
          } else {
           $path$180 = $add$ptr134;
          }
         }
         $call113 = (_malloc(28)|0);
         $tobool114 = ($call113|0)==(0|0);
         if ($tobool114) {
          $20 = HEAP32[$map_size>>2]|0;
          (___munmap($call110,$20)|0);
          label = 41;
          break;
         } else {
          HEAP32[$call113>>2] = $call110;
          $16 = HEAP32[$map_size>>2]|0;
          $map_size119 = ((($call113)) + 4|0);
          HEAP32[$map_size119>>2] = $16;
          $name120 = ((($call113)) + 8|0);
          (_memcpy(($name120|0),($val$addr$291|0),($n$0$lcssa|0))|0);
          $arrayidx124 = (($name120) + ($n$0$lcssa)|0);
          HEAP8[$arrayidx124>>0] = 0;
          $17 = HEAP32[4864]|0;
          $next125 = ((($call113)) + 24|0);
          HEAP32[$next125>>2] = $17;
          HEAP32[4864] = $call113;
          $new$4 = $call113;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $call139 = (_malloc(28)|0);
      $tobool140 = ($call139|0)==(0|0);
      if ($tobool140) {
       $new$4 = $call139;
      } else {
       $21 = HEAP32[1810]|0;
       HEAP32[$call139>>2] = $21;
       $22 = HEAP32[(7244)>>2]|0;
       $map_size143 = ((($call139)) + 4|0);
       HEAP32[$map_size143>>2] = $22;
       $name144 = ((($call139)) + 8|0);
       (_memcpy(($name144|0),($val$addr$291|0),($n$0$lcssa|0))|0);
       $arrayidx148 = (($name144) + ($n$0$lcssa)|0);
       HEAP8[$arrayidx148>>0] = 0;
       $23 = HEAP32[4864]|0;
       $next149 = ((($call139)) + 24|0);
       HEAP32[$next149>>2] = $23;
       HEAP32[4864] = $call139;
       $new$4 = $call139;
      }
     }
     $tobool151 = ($new$4|0)==(0|0);
     $cmp153 = ($cat|0)==(0);
     $or$cond = $cmp153 & $tobool151;
     $spec$select = $or$cond ? 7240 : $new$4;
     ___unlock((19460|0));
     $retval$0 = $spec$select;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $cmp50 = ($cat|0)==(0);
   if ($cmp50) {
    $arrayidx53 = ((($val$addr$292)) + 1|0);
    $8 = HEAP8[$arrayidx53>>0]|0;
    $cmp55 = ($8<<24>>24)==(46);
    if ($cmp55) {
     $retval$0 = 7240;
     break;
    }
   }
   $retval$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___newlocale($mask,$name,$loc) {
 $mask = $mask|0;
 $name = $name|0;
 $loc = $loc|0;
 var $$pre = 0, $$pre30 = 0, $0 = 0, $1 = 0, $and = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx25 = 0, $call = 0, $call18 = 0, $call3 = 0, $cmp36 = 0, $cond = 0, $exitcond = 0, $exitcond29 = 0, $i$028 = 0, $i$126 = 0, $inc = 0, $inc22 = 0, $inc27 = 0;
 var $j$027 = 0, $lm$0 = 0, $or$cond = 0, $retval$0 = 0, $shl = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool17 = 0, $tobool20 = 0, $tobool8 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $call = (___loc_is_allocated($loc)|0);
 $tobool = ($call|0)==(0);
 L1: do {
  if ($tobool) {
   $tobool8 = ($loc|0)!=(0|0);
   $i$126 = 0;$j$027 = 0;
   while(1) {
    $$pre = 1 << $i$126;
    $$pre30 = $$pre & $mask;
    $tobool11 = ($$pre30|0)==(0);
    $or$cond = $tobool8 & $tobool11;
    if ($or$cond) {
     $arrayidx14 = (($loc) + ($i$126<<2)|0);
     $0 = HEAP32[$arrayidx14>>2]|0;
     $lm$0 = $0;
    } else {
     $tobool17 = ($$pre30|0)==(0);
     $cond = $tobool17 ? 21468 : $name;
     $call18 = (___get_locale($i$126,$cond)|0);
     $lm$0 = $call18;
    }
    $tobool20 = ($lm$0|0)!=(0|0);
    $inc22 = $tobool20&1;
    $trunc = (($j$027) + ($inc22))|0;
    $arrayidx25 = (($tmp) + ($i$126<<2)|0);
    HEAP32[$arrayidx25>>2] = $lm$0;
    $inc27 = (($i$126) + 1)|0;
    $exitcond = ($inc27|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $i$126 = $inc27;$j$027 = $trunc;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   switch ($trunc$clear|0) {
   case 0:  {
    $retval$0 = 19424;
    break L1;
    break;
   }
   case 1:  {
    $1 = HEAP32[$tmp>>2]|0;
    $cmp36 = ($1|0)==(7240|0);
    if ($cmp36) {
     $retval$0 = 7268;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $retval$0 = $loc;
  } else {
   $i$028 = 0;
   while(1) {
    $shl = 1 << $i$028;
    $and = $shl & $mask;
    $tobool1 = ($and|0)==(0);
    if (!($tobool1)) {
     $arrayidx = (($loc) + ($i$028<<2)|0);
     $call3 = (___get_locale($i$028,$name)|0);
     HEAP32[$arrayidx>>2] = $call3;
    }
    $inc = (($i$028) + 1)|0;
    $exitcond29 = ($inc|0)==(6);
    if ($exitcond29) {
     $retval$0 = $loc;
     break;
    } else {
     $i$028 = $inc;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function ___uselocale($new) {
 $new = $new|0;
 var $0 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $cond6 = 0, $locale = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_234()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $tobool = ($new|0)==(0|0);
 if (!($tobool)) {
  $cmp = ($new|0)==((-1)|0);
  $cond = $cmp ? (19400) : $new;
  HEAP32[$locale>>2] = $cond;
 }
 $cmp2 = ($0|0)==((19400)|0);
 $cond6 = $cmp2 ? (-1) : $0;
 return ($cond6|0);
}
function ___pthread_self_234() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $d$addr$06 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $n$addr$05 = 0, $s$addr$04 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool3 = ($n|0)==(0);
 if (!($tobool3)) {
  $d$addr$06 = $d;$n$addr$05 = $n;$s$addr$04 = $s;
  while(1) {
   $dec = (($n$addr$05) + -1)|0;
   $incdec$ptr = ((($s$addr$04)) + 4|0);
   $0 = HEAP32[$s$addr$04>>2]|0;
   $incdec$ptr1 = ((($d$addr$06)) + 4|0);
   HEAP32[$d$addr$06>>2] = $0;
   $tobool = ($dec|0)==(0);
   if ($tobool) {
    break;
   } else {
    $d$addr$06 = $incdec$ptr1;$n$addr$05 = $dec;$s$addr$04 = $incdec$ptr;
   }
  }
 }
 return ($d|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx30 = 0, $call = 0, $call82 = 0, $cmp = 0, $cmp24 = 0, $cmp31 = 0, $cmp58 = 0;
 var $cmp73 = 0, $conv = 0, $conv21 = 0, $conv23 = 0, $conv38 = 0, $conv56 = 0, $conv71 = 0, $dummy = 0, $incdec$ptr = 0, $incdec$ptr48 = 0, $incdec$ptr63 = 0, $lnot$ext = 0, $locale = 0, $mul = 0, $or = 0, $or51 = 0, $or66 = 0, $or81 = 0, $retval$0 = 0, $shl47 = 0;
 var $shl62 = 0, $shl77 = 0, $shr42 = 0, $spec$select = 0, $sub = 0, $sub33 = 0, $sub39 = 0, $sub50 = 0, $sub57 = 0, $sub72 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool35 = 0, $tobool4 = 0, $tobool44 = 0, $tobool53 = 0, $tobool68 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($src|0)==(0|0);
 L1: do {
  if ($tobool) {
   $retval$0 = 0;
  } else {
   $tobool1 = ($n|0)==(0);
   do {
    if (!($tobool1)) {
     $tobool4 = ($wc|0)==(0|0);
     $spec$select = $tobool4 ? $dummy : $wc;
     $0 = HEAP8[$src>>0]|0;
     $cmp = ($0<<24>>24)>(-1);
     if ($cmp) {
      $conv = $0&255;
      HEAP32[$spec$select>>2] = $conv;
      $tobool10 = ($0<<24>>24)!=(0);
      $lnot$ext = $tobool10&1;
      $retval$0 = $lnot$ext;
      break L1;
     }
     $call = (___pthread_self_420()|0);
     $locale = ((($call)) + 188|0);
     $1 = HEAP32[$locale>>2]|0;
     $2 = HEAP32[$1>>2]|0;
     $tobool13 = ($2|0)==(0|0);
     $3 = HEAP8[$src>>0]|0;
     if ($tobool13) {
      $conv21 = $3 << 24 >> 24;
      $and = $conv21 & 57343;
      HEAP32[$spec$select>>2] = $and;
      $retval$0 = 1;
      break L1;
     }
     $conv23 = $3&255;
     $sub = (($conv23) + -194)|0;
     $cmp24 = ($sub>>>0)>(50);
     if (!($cmp24)) {
      $incdec$ptr = ((($src)) + 1|0);
      $arrayidx30 = (48 + ($sub<<2)|0);
      $4 = HEAP32[$arrayidx30>>2]|0;
      $cmp31 = ($n>>>0)<(4);
      if ($cmp31) {
       $mul = ($n*6)|0;
       $sub33 = (($mul) + -6)|0;
       $5 = -2147483648 >>> $sub33;
       $6 = $4 & $5;
       $tobool35 = ($6|0)==(0);
       if (!($tobool35)) {
        break;
       }
      }
      $7 = HEAP8[$incdec$ptr>>0]|0;
      $conv38 = $7&255;
      $8 = $conv38 >>> 3;
      $sub39 = (($8) + -16)|0;
      $shr42 = $4 >> 26;
      $add = (($8) + ($shr42))|0;
      $or = $sub39 | $add;
      $tobool44 = ($or>>>0)>(7);
      if (!($tobool44)) {
       $shl47 = $4 << 6;
       $sub50 = (($conv38) + -128)|0;
       $or51 = $sub50 | $shl47;
       $tobool53 = ($or51|0)<(0);
       if (!($tobool53)) {
        HEAP32[$spec$select>>2] = $or51;
        $retval$0 = 2;
        break L1;
       }
       $incdec$ptr48 = ((($src)) + 2|0);
       $9 = HEAP8[$incdec$ptr48>>0]|0;
       $conv56 = $9&255;
       $sub57 = (($conv56) + -128)|0;
       $cmp58 = ($sub57>>>0)>(63);
       if (!($cmp58)) {
        $shl62 = $or51 << 6;
        $or66 = $sub57 | $shl62;
        $tobool68 = ($or66|0)<(0);
        if (!($tobool68)) {
         HEAP32[$spec$select>>2] = $or66;
         $retval$0 = 3;
         break L1;
        }
        $incdec$ptr63 = ((($src)) + 3|0);
        $10 = HEAP8[$incdec$ptr63>>0]|0;
        $conv71 = $10&255;
        $sub72 = (($conv71) + -128)|0;
        $cmp73 = ($sub72>>>0)>(63);
        if (!($cmp73)) {
         $shl77 = $or66 << 6;
         $or81 = $sub72 | $shl77;
         HEAP32[$spec$select>>2] = $or81;
         $retval$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $call82 = (___errno_location()|0);
   HEAP32[$call82>>2] = 84;
   $retval$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_420() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((19468|0));
 return (19476|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((19468|0));
 return;
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[1826]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[1826]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 511]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 511]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $read = ((($f)) + 32|0);
 HEAP32[$read>>2] = 332;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = ((($f)) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 return ($call|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $$pr = 0, $$pr233 = 0, $$pre = 0, $$pre370 = 0, $$pre372 = 0, $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0;
 var $add$ptr87 = 0, $add282 = 0, $add291 = 0, $add300 = 0, $add329 = 0, $add350 = 0, $add382 = 0, $add393 = 0, $add420 = 0, $add442 = 0, $add97 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0;
 var $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx273 = 0, $arrayidx283 = 0, $arrayidx292 = 0, $arrayidx330 = 0, $arrayidx34 = 0, $arrayidx342 = 0, $arrayidx383 = 0, $arrayidx388 = 0, $arrayidx421 = 0, $arrayidx426 = 0, $arrayidx443 = 0, $arrayidx497 = 0, $arrayidx501 = 0, $arrayidx80 = 0, $base$0 = 0, $c$0304 = 0, $call = 0;
 var $call1 = 0, $call14 = 0, $call153 = 0, $call156 = 0, $call17 = 0, $call187 = 0, $call310 = 0, $call326 = 0, $call335 = 0, $call352 = 0, $call358 = 0, $call365 = 0, $call379 = 0, $call395 = 0, $call4 = 0, $call417 = 0, $call439 = 0, $call51 = 0, $call529 = 0.0, $call78 = 0;
 var $call86 = 0, $call93 = 0, $call93297 = 0, $cmp = 0, $cmp101 = 0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp146 = 0, $cmp180 = 0, $cmp190 = 0, $cmp202 = 0, $cmp202$not = 0, $cmp205 = 0, $cmp223 = 0, $cmp277 = 0, $cmp277303 = 0, $cmp304 = 0, $cmp319 = 0, $cmp32 = 0;
 var $cmp346 = 0, $cmp372 = 0, $cmp389 = 0, $cmp410 = 0, $cmp432 = 0, $cmp44 = 0, $cmp520 = 0, $cmp55 = 0, $cmp65 = 0, $cmp7 = 0, $cmp82 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0;
 var $conv = 0, $conv12 = 0, $conv131 = 0, $conv151 = 0, $conv238 = 0, $conv247 = 0, $conv274 = 0, $conv276 = 0, $conv289$pre$phiZ2D = 0, $conv290 = 0, $conv3 = 0, $conv324 = 0, $conv334 = 0, $conv35 = 0, $conv377 = 0, $conv386 = 0, $conv41 = 0, $conv415 = 0, $conv424 = 0, $conv437 = 0;
 var $conv49 = 0, $conv54 = 0, $conv544 = 0.0, $conv85 = 0, $conv92 = 0, $conv92296 = 0, $conv96 = 0, $dest$0 = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor235 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0;
 var $i$3 = 0, $i$4 = 0, $inc341 = 0, $inc387 = 0, $inc425 = 0, $inc561 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr11 = 0, $incdec$ptr115 = 0, $incdec$ptr123 = 0, $incdec$ptr150 = 0, $incdec$ptr164 = 0, $incdec$ptr184 = 0, $incdec$ptr198 = 0, $incdec$ptr221 = 0, $incdec$ptr226 = 0, $incdec$ptr236 = 0, $incdec$ptr245 = 0, $incdec$ptr25 = 0;
 var $incdec$ptr294 = 0, $incdec$ptr323 = 0, $incdec$ptr376 = 0, $incdec$ptr414 = 0, $incdec$ptr436 = 0, $incdec$ptr454 = 0, $incdec$ptr48 = 0, $incdec$ptr564 = 0, $incdec$ptr62 = 0, $incdec$ptr76 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $lnot$ext = 0, $lock = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0;
 var $mul = 0, $mul309 = 0, $mul351 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond221 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0;
 var $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $spec$select220 = 0;
 var $spec$select222 = 0, $spec$select223 = 0, $spec$select224 = 0, $spec$select225 = 0, $spec$select226 = 0, $st = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub237 = 0, $sub246 = 0, $sub98 = 0, $tobool = 0, $tobool104 = 0, $tobool157 = 0, $tobool161 = 0;
 var $tobool18 = 0, $tobool195 = 0, $tobool2 = 0, $tobool22 = 0, $tobool305 = 0, $tobool307 = 0, $tobool311 = 0, $tobool331 = 0, $tobool339 = 0, $tobool353 = 0, $tobool359 = 0, $tobool366 = 0, $tobool384 = 0, $tobool396 = 0, $tobool405 = 0, $tobool422 = 0, $tobool444 = 0, $tobool451 = 0, $tobool495 = 0, $tobool499 = 0;
 var $tobool5 = 0, $tobool523 = 0, $tobool541 = 0, $tobool559 = 0, $tobool567 = 0, $tobool567$old = 0, $tobool570 = 0, $tobool574 = 0, $tobool59 = 0, $tobool79 = 0, $tobool94 = 0, $tobool94298 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $st = sp + 264|0;
 $scanset = sp;
 $wc = sp + 260|0;
 $$compoundliteral333 = sp + 272|0;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $1 = HEAP8[$fmt>>0]|0;
 $tobool305 = ($1<<24>>24)==(0);
 L4: do {
  if ($tobool305) {
   $matches$3 = 0;
  } else {
   $rpos42 = ((($f)) + 4|0);
   $shend43 = ((($f)) + 104|0);
   $shcnt = ((($f)) + 120|0);
   $rend = ((($f)) + 8|0);
   $arrayidx213 = ((($scanset)) + 10|0);
   $arrayidx218 = ((($scanset)) + 33|0);
   $arrayidx239 = ((($scanset)) + 46|0);
   $arrayidx248 = ((($scanset)) + 94|0);
   $$compoundliteral$sroa$2$0$$sroa_idx8 = ((($st)) + 4|0);
   $178 = 0;$2 = $1;$20 = 0;$21 = 0;$matches$0308 = 0;$p$0312 = $fmt;$s$0306 = 0;
   L6: while(1) {
    $conv = $2&255;
    $call1 = (_isspace($conv)|0);
    $tobool2 = ($call1|0)==(0);
    L8: do {
     if ($tobool2) {
      $26 = HEAP8[$p$0312>>0]|0;
      $cmp32 = ($26<<24>>24)==(37);
      L10: do {
       if ($cmp32) {
        $arrayidx34 = ((($p$0312)) + 1|0);
        $27 = HEAP8[$arrayidx34>>0]|0;
        L12: do {
         switch ($27<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $incdec$ptr76 = ((($p$0312)) + 2|0);
          $dest$0 = 0;$p$2 = $incdec$ptr76;
          break;
         }
         default: {
          $conv35 = $27&255;
          $call78 = (_isdigit($conv35)|0);
          $tobool79 = ($call78|0)==(0);
          if (!($tobool79)) {
           $arrayidx80 = ((($p$0312)) + 2|0);
           $36 = HEAP8[$arrayidx80>>0]|0;
           $cmp82 = ($36<<24>>24)==(36);
           if ($cmp82) {
            $37 = HEAP8[$arrayidx34>>0]|0;
            $conv85 = $37&255;
            $sub = (($conv85) + -48)|0;
            $call86 = (_arg_n($ap,$sub)|0);
            $add$ptr87 = ((($p$0312)) + 3|0);
            $dest$0 = $call86;$p$2 = $add$ptr87;
            break L12;
           }
          }
          $arglist_current = HEAP32[$ap>>2]|0;
          $38 = $arglist_current;
          $39 = ((0) + 4|0);
          $expanded1 = $39;
          $expanded = (($expanded1) - 1)|0;
          $40 = (($38) + ($expanded))|0;
          $41 = ((0) + 4|0);
          $expanded5 = $41;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $42 = $40 & $expanded3;
          $43 = $42;
          $44 = HEAP32[$43>>2]|0;
          $arglist_next = ((($43)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next;
          $dest$0 = $44;$p$2 = $arrayidx34;
         }
         }
        } while(0);
        $45 = HEAP8[$p$2>>0]|0;
        $conv92296 = $45&255;
        $call93297 = (_isdigit($conv92296)|0);
        $tobool94298 = ($call93297|0)==(0);
        if ($tobool94298) {
         $p$3$lcssa = $p$2;$width$0$lcssa = 0;
        } else {
         $p$3299 = $p$2;$width$0300 = 0;
         while(1) {
          $mul = ($width$0300*10)|0;
          $46 = HEAP8[$p$3299>>0]|0;
          $conv96 = $46&255;
          $add97 = (($mul) + -48)|0;
          $sub98 = (($add97) + ($conv96))|0;
          $incdec$ptr99 = ((($p$3299)) + 1|0);
          $47 = HEAP8[$incdec$ptr99>>0]|0;
          $conv92 = $47&255;
          $call93 = (_isdigit($conv92)|0);
          $tobool94 = ($call93|0)==(0);
          if ($tobool94) {
           $p$3$lcssa = $incdec$ptr99;$width$0$lcssa = $sub98;
           break;
          } else {
           $p$3299 = $incdec$ptr99;$width$0300 = $sub98;
          }
         }
        }
        $48 = HEAP8[$p$3$lcssa>>0]|0;
        $cmp101 = ($48<<24>>24)==(109);
        $incdec$ptr106 = ((($p$3$lcssa)) + 1|0);
        if ($cmp101) {
         $tobool104 = ($dest$0|0)!=(0|0);
         $lnot$ext = $tobool104&1;
         $$pr = HEAP8[$incdec$ptr106>>0]|0;
         $$pre373 = ((($p$3$lcssa)) + 2|0);
         $183 = 0;$49 = $$pr;$alloc$0 = $lnot$ext;$incdec$ptr109$pre$phiZZ2D = $$pre373;$p$4 = $incdec$ptr106;$s$1 = 0;
        } else {
         $183 = $178;$49 = $48;$alloc$0 = 0;$incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;$p$4 = $p$3$lcssa;$s$1 = $s$0306;
        }
        switch ($49<<24>>24) {
        case 104:  {
         $50 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp112 = ($50<<24>>24)==(104);
         $incdec$ptr115 = ((($p$4)) + 2|0);
         $spec$select223 = $cmp112 ? $incdec$ptr115 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select224 = $cmp112 ? -2 : -1;
         $p$5 = $spec$select223;$size$0 = $spec$select224;
         break;
        }
        case 108:  {
         $51 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp120 = ($51<<24>>24)==(108);
         $incdec$ptr123 = ((($p$4)) + 2|0);
         $spec$select225 = $cmp120 ? $incdec$ptr123 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select226 = $cmp120 ? 3 : 1;
         $p$5 = $spec$select225;$size$0 = $spec$select226;
         break;
        }
        case 106:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $184 = $183;$s$8 = $s$1;
         label = 143;
         break L6;
        }
        }
        $52 = HEAP8[$p$5>>0]|0;
        $conv131 = $52&255;
        $and = $conv131 & 47;
        $cmp132 = ($and|0)==(3);
        $or = $conv131 | 32;
        $spec$select = $cmp132 ? $or : $conv131;
        $spec$select219 = $cmp132 ? 1 : $size$0;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $53 = ($width$0$lcssa|0)>(1);
         $spec$select220 = $53 ? $width$0$lcssa : 1;
         $170 = $20;$171 = $21;$width$1 = $spec$select220;
         break;
        }
        case 91:  {
         $170 = $20;$171 = $21;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         _store_int($dest$0,$spec$select219,$20,$21);
         $179 = $183;$180 = $20;$181 = $21;$matches$1 = $matches$0308;$p$12 = $p$5;$s$7 = $s$1;
         break L8;
         break;
        }
        default: {
         ___shlim($f,0,0);
         while(1) {
          $54 = HEAP32[$rpos42>>2]|0;
          $55 = HEAP32[$shend43>>2]|0;
          $cmp146 = ($54>>>0)<($55>>>0);
          if ($cmp146) {
           $incdec$ptr150 = ((($54)) + 1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr150;
           $56 = HEAP8[$54>>0]|0;
           $conv151 = $56&255;
           $cond155 = $conv151;
          } else {
           $call153 = (___shgetc($f)|0);
           $cond155 = $call153;
          }
          $call156 = (_isspace($cond155)|0);
          $tobool157 = ($call156|0)==(0);
          if ($tobool157) {
           break;
          }
         }
         $57 = HEAP32[$shend43>>2]|0;
         $tobool161 = ($57|0)==(0|0);
         if ($tobool161) {
          $$pre370 = HEAP32[$rpos42>>2]|0;
          $67 = $$pre370;
         } else {
          $58 = HEAP32[$rpos42>>2]|0;
          $incdec$ptr164 = ((($58)) + -1|0);
          HEAP32[$rpos42>>2] = $incdec$ptr164;
          $59 = $incdec$ptr164;
          $67 = $59;
         }
         $60 = $shcnt;
         $61 = $60;
         $62 = HEAP32[$61>>2]|0;
         $63 = (($60) + 4)|0;
         $64 = $63;
         $65 = HEAP32[$64>>2]|0;
         $66 = HEAP32[$rend>>2]|0;
         $sub$ptr$sub172 = (($67) - ($66))|0;
         $68 = ($sub$ptr$sub172|0)<(0);
         $69 = $68 << 31 >> 31;
         $70 = (_i64Add(($62|0),($65|0),($20|0),($21|0))|0);
         $71 = (getTempRet0() | 0);
         $72 = (_i64Add(($70|0),($71|0),($sub$ptr$sub172|0),($69|0))|0);
         $73 = (getTempRet0() | 0);
         $170 = $72;$171 = $73;$width$1 = $width$0$lcssa;
        }
        }
        $74 = ($width$1|0)<(0);
        $75 = $74 << 31 >> 31;
        ___shlim($f,$width$1,$75);
        $76 = HEAP32[$rpos42>>2]|0;
        $77 = HEAP32[$shend43>>2]|0;
        $cmp180 = ($76>>>0)<($77>>>0);
        if ($cmp180) {
         $incdec$ptr184 = ((($76)) + 1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr184;
         $78 = $77;
        } else {
         $call187 = (___shgetc($f)|0);
         $cmp190 = ($call187|0)<(0);
         if ($cmp190) {
          $184 = $183;$s$8 = $s$1;
          label = 143;
          break L6;
         }
         $$pr233 = HEAP32[$shend43>>2]|0;
         $78 = $$pr233;
        }
        $tobool195 = ($78|0)==(0|0);
        if (!($tobool195)) {
         $79 = HEAP32[$rpos42>>2]|0;
         $incdec$ptr198 = ((($79)) + -1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr198;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $cmp202 = ($spec$select|0)==(99);
          $80 = $spec$select | 16;
          $81 = ($80|0)==(115);
          L61: do {
           if ($81) {
            $cmp205 = ($spec$select|0)==(115);
            (_memset(($scanset|0),-1,257)|0);
            HEAP8[$scanset>>0] = 0;
            if ($cmp205) {
             HEAP8[$arrayidx218>>0] = 0;
             ;HEAP16[$arrayidx213>>1]=0|0;HEAP16[$arrayidx213+2>>1]=0|0;HEAP8[$arrayidx213+4>>0]=0|0;
             $p$10 = $p$5;
            } else {
             $p$10 = $p$5;
            }
           } else {
            $incdec$ptr221 = ((($p$5)) + 1|0);
            $82 = HEAP8[$incdec$ptr221>>0]|0;
            $cmp223 = ($82<<24>>24)==(94);
            $incdec$ptr226 = ((($p$5)) + 2|0);
            $invert$0 = $cmp223&1;
            $p$6 = $cmp223 ? $incdec$ptr226 : $incdec$ptr221;
            (_memset(($scanset|0),($invert$0|0),257)|0);
            HEAP8[$scanset>>0] = 0;
            $83 = HEAP8[$p$6>>0]|0;
            switch ($83<<24>>24) {
            case 45:  {
             $incdec$ptr236 = ((($p$6)) + 1|0);
             $sub237 = $invert$0 ^ 1;
             $conv238 = $sub237&255;
             HEAP8[$arrayidx239>>0] = $conv238;
             $conv289$pre$phiZ2D = $conv238;$p$7 = $incdec$ptr236;
             break;
            }
            case 93:  {
             $incdec$ptr245 = ((($p$6)) + 1|0);
             $sub246 = $invert$0 ^ 1;
             $conv247 = $sub246&255;
             HEAP8[$arrayidx248>>0] = $conv247;
             $conv289$pre$phiZ2D = $conv247;$p$7 = $incdec$ptr245;
             break;
            }
            default: {
             $$pre374 = $invert$0 ^ 1;
             $$pre375 = $$pre374&255;
             $conv289$pre$phiZ2D = $$pre375;$p$7 = $p$6;
            }
            }
            $p$8 = $p$7;
            while(1) {
             $84 = HEAP8[$p$8>>0]|0;
             L72: do {
              switch ($84<<24>>24) {
              case 0:  {
               $184 = $183;$s$8 = $s$1;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $p$10 = $p$8;
               break L61;
               break;
              }
              case 45:  {
               $arrayidx263 = ((($p$8)) + 1|0);
               $85 = HEAP8[$arrayidx263>>0]|0;
               switch ($85<<24>>24) {
               case 93: case 0:  {
                $88 = 45;$p$9 = $p$8;
                break L72;
                break;
               }
               default: {
               }
               }
               $arrayidx273 = ((($p$8)) + -1|0);
               $86 = HEAP8[$arrayidx273>>0]|0;
               $cmp277303 = ($86&255)<($85&255);
               if ($cmp277303) {
                $conv274 = $86&255;
                $c$0304 = $conv274;
                while(1) {
                 $add282 = (($c$0304) + 1)|0;
                 $arrayidx283 = (($scanset) + ($add282)|0);
                 HEAP8[$arrayidx283>>0] = $conv289$pre$phiZ2D;
                 $87 = HEAP8[$arrayidx263>>0]|0;
                 $conv276 = $87&255;
                 $cmp277 = ($add282>>>0)<($conv276>>>0);
                 if ($cmp277) {
                  $c$0304 = $add282;
                 } else {
                  $88 = $87;$p$9 = $arrayidx263;
                  break;
                 }
                }
               } else {
                $88 = $85;$p$9 = $arrayidx263;
               }
               break;
              }
              default: {
               $88 = $84;$p$9 = $p$8;
              }
              }
             } while(0);
             $conv290 = $88&255;
             $add291 = (($conv290) + 1)|0;
             $arrayidx292 = (($scanset) + ($add291)|0);
             HEAP8[$arrayidx292>>0] = $conv289$pre$phiZ2D;
             $incdec$ptr294 = ((($p$9)) + 1|0);
             $p$8 = $incdec$ptr294;
            }
           }
          } while(0);
          $add300 = (($width$1) + 1)|0;
          $cond303 = $cmp202 ? $add300 : 31;
          $cmp304 = ($spec$select219|0)==(1);
          $tobool307 = ($alloc$0|0)!=(0);
          L80: do {
           if ($cmp304) {
            if ($tobool307) {
             $mul309 = $cond303 << 2;
             $call310 = (_malloc($mul309)|0);
             $tobool311 = ($call310|0)==(0|0);
             if ($tobool311) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $186 = $call310;
             }
            } else {
             $186 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8>>2] = 0;
            $$ph$ph = $186;$i$0$ph$ph = 0;$k$0$ph$ph = $cond303;
            L85: while(1) {
             $tobool339 = ($$ph$ph|0)==(0|0);
             $i$0$ph = $i$0$ph$ph;
             while(1) {
              L89: while(1) {
               $89 = HEAP32[$rpos42>>2]|0;
               $90 = HEAP32[$shend43>>2]|0;
               $cmp319 = ($89>>>0)<($90>>>0);
               if ($cmp319) {
                $incdec$ptr323 = ((($89)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr323;
                $91 = HEAP8[$89>>0]|0;
                $conv324 = $91&255;
                $cond328 = $conv324;
               } else {
                $call326 = (___shgetc($f)|0);
                $cond328 = $call326;
               }
               $add329 = (($cond328) + 1)|0;
               $arrayidx330 = (($scanset) + ($add329)|0);
               $92 = HEAP8[$arrayidx330>>0]|0;
               $tobool331 = ($92<<24>>24)==(0);
               if ($tobool331) {
                break L85;
               }
               $conv334 = $cond328&255;
               HEAP8[$$compoundliteral333>>0] = $conv334;
               $call335 = (_mbrtowc($wc,$$compoundliteral333,1,$st)|0);
               switch ($call335|0) {
               case -1:  {
                $184 = $$ph$ph;$s$8 = 0;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($tobool339) {
               $i$1 = $i$0$ph;
              } else {
               $arrayidx342 = (($$ph$ph) + ($i$0$ph<<2)|0);
               $inc341 = (($i$0$ph) + 1)|0;
               $93 = HEAP32[$wc>>2]|0;
               HEAP32[$arrayidx342>>2] = $93;
               $i$1 = $inc341;
              }
              $cmp346 = ($i$1|0)==($k$0$ph$ph|0);
              $or$cond = $tobool307 & $cmp346;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph = $i$1;
              }
             }
             $factor235 = $k$0$ph$ph << 1;
             $add350 = $factor235 | 1;
             $mul351 = $add350 << 2;
             $call352 = (_realloc($$ph$ph,$mul351)|0);
             $tobool353 = ($call352|0)==(0|0);
             if ($tobool353) {
              $184 = $$ph$ph;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $$ph$ph = $call352;$i$0$ph$ph = $i$1;$k$0$ph$ph = $add350;
             }
            }
            $call358 = (_mbsinit($st)|0);
            $tobool359 = ($call358|0)==(0);
            if ($tobool359) {
             $184 = $$ph$ph;$s$8 = 0;
             label = 143;
             break L6;
            } else {
             $187 = $$ph$ph;$i$4 = $i$0$ph;$s$5 = 0;$wcs$6 = $$ph$ph;
            }
           } else {
            if ($tobool307) {
             $call365 = (_malloc($cond303)|0);
             $tobool366 = ($call365|0)==(0|0);
             if ($tobool366) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             }
             $i$2$ph = 0;$k$2$ph = $cond303;$s$2$ph = $call365;
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $94 = HEAP32[$rpos42>>2]|0;
               $95 = HEAP32[$shend43>>2]|0;
               $cmp372 = ($94>>>0)<($95>>>0);
               if ($cmp372) {
                $incdec$ptr376 = ((($94)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr376;
                $96 = HEAP8[$94>>0]|0;
                $conv377 = $96&255;
                $cond381 = $conv377;
               } else {
                $call379 = (___shgetc($f)|0);
                $cond381 = $call379;
               }
               $add382 = (($cond381) + 1)|0;
               $arrayidx383 = (($scanset) + ($add382)|0);
               $97 = HEAP8[$arrayidx383>>0]|0;
               $tobool384 = ($97<<24>>24)==(0);
               if ($tobool384) {
                $187 = 0;$i$4 = $i$2;$s$5 = $s$2$ph;$wcs$6 = 0;
                break L80;
               }
               $conv386 = $cond381&255;
               $inc387 = (($i$2) + 1)|0;
               $arrayidx388 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$arrayidx388>>0] = $conv386;
               $cmp389 = ($inc387|0)==($k$2$ph|0);
               if ($cmp389) {
                break;
               } else {
                $i$2 = $inc387;
               }
              }
              $factor = $k$2$ph << 1;
              $add393 = $factor | 1;
              $call395 = (_realloc($s$2$ph,$add393)|0);
              $tobool396 = ($call395|0)==(0|0);
              if ($tobool396) {
               $184 = 0;$s$8 = $s$2$ph;
               label = 143;
               break L6;
              } else {
               $i$2$ph = $inc387;$k$2$ph = $add393;$s$2$ph = $call395;
              }
             }
            }
            $tobool405 = ($dest$0|0)==(0|0);
            if ($tobool405) {
             while(1) {
              $102 = HEAP32[$rpos42>>2]|0;
              $103 = HEAP32[$shend43>>2]|0;
              $cmp432 = ($102>>>0)<($103>>>0);
              if ($cmp432) {
               $incdec$ptr436 = ((($102)) + 1|0);
               HEAP32[$rpos42>>2] = $incdec$ptr436;
               $104 = HEAP8[$102>>0]|0;
               $conv437 = $104&255;
               $cond441 = $conv437;
              } else {
               $call439 = (___shgetc($f)|0);
               $cond441 = $call439;
              }
              $add442 = (($cond441) + 1)|0;
              $arrayidx443 = (($scanset) + ($add442)|0);
              $105 = HEAP8[$arrayidx443>>0]|0;
              $tobool444 = ($105<<24>>24)==(0);
              if ($tobool444) {
               $187 = 0;$i$4 = 0;$s$5 = 0;$wcs$6 = 0;
               break L80;
              }
             }
            }
            $i$3 = 0;
            while(1) {
             $98 = HEAP32[$rpos42>>2]|0;
             $99 = HEAP32[$shend43>>2]|0;
             $cmp410 = ($98>>>0)<($99>>>0);
             if ($cmp410) {
              $incdec$ptr414 = ((($98)) + 1|0);
              HEAP32[$rpos42>>2] = $incdec$ptr414;
              $100 = HEAP8[$98>>0]|0;
              $conv415 = $100&255;
              $cond419 = $conv415;
             } else {
              $call417 = (___shgetc($f)|0);
              $cond419 = $call417;
             }
             $add420 = (($cond419) + 1)|0;
             $arrayidx421 = (($scanset) + ($add420)|0);
             $101 = HEAP8[$arrayidx421>>0]|0;
             $tobool422 = ($101<<24>>24)==(0);
             if ($tobool422) {
              $187 = 0;$i$4 = $i$3;$s$5 = $dest$0;$wcs$6 = 0;
              break L80;
             }
             $conv424 = $cond419&255;
             $inc425 = (($i$3) + 1)|0;
             $arrayidx426 = (($dest$0) + ($i$3)|0);
             HEAP8[$arrayidx426>>0] = $conv424;
             $i$3 = $inc425;
            }
           }
          } while(0);
          $106 = HEAP32[$shend43>>2]|0;
          $tobool451 = ($106|0)==(0|0);
          if ($tobool451) {
           $$pre372 = HEAP32[$rpos42>>2]|0;
           $116 = $$pre372;
          } else {
           $107 = HEAP32[$rpos42>>2]|0;
           $incdec$ptr454 = ((($107)) + -1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr454;
           $108 = $incdec$ptr454;
           $116 = $108;
          }
          $109 = $shcnt;
          $110 = $109;
          $111 = HEAP32[$110>>2]|0;
          $112 = (($109) + 4)|0;
          $113 = $112;
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub462 = (($116) - ($115))|0;
          $117 = ($sub$ptr$sub462|0)<(0);
          $118 = $117 << 31 >> 31;
          $119 = (_i64Add(($111|0),($114|0),($sub$ptr$sub462|0),($118|0))|0);
          $120 = (getTempRet0() | 0);
          $121 = ($119|0)==(0);
          $122 = ($120|0)==(0);
          $123 = $121 & $122;
          if ($123) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          $cmp202$not = $cmp202 ^ 1;
          $124 = ($119|0)==($width$1|0);
          $125 = ($120|0)==($75|0);
          $126 = $124 & $125;
          $or$cond221 = $126 | $cmp202$not;
          if (!($or$cond221)) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          do {
           if ($tobool307) {
            if ($cmp304) {
             HEAP32[$dest$0>>2] = $wcs$6;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$5;
             break;
            }
           }
          } while(0);
          if ($cmp202) {
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          } else {
           $tobool495 = ($wcs$6|0)==(0|0);
           if (!($tobool495)) {
            $arrayidx497 = (($wcs$6) + ($i$4<<2)|0);
            HEAP32[$arrayidx497>>2] = 0;
           }
           $tobool499 = ($s$5|0)==(0|0);
           if ($tobool499) {
            $185 = $187;$p$11 = $p$10;$s$6 = 0;
            break L59;
           }
           $arrayidx501 = (($s$5) + ($i$4)|0);
           HEAP8[$arrayidx501>>0] = 0;
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $call529 = (+___floatscan($f,$spec$select219,0));
          $145 = $shcnt;
          $146 = $145;
          $147 = HEAP32[$146>>2]|0;
          $148 = (($145) + 4)|0;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = HEAP32[$rpos42>>2]|0;
          $152 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub535 = (($151) - ($152))|0;
          $153 = ($sub$ptr$sub535|0)<(0);
          $154 = $153 << 31 >> 31;
          $155 = (_i64Subtract(0,0,($sub$ptr$sub535|0),($154|0))|0);
          $156 = (getTempRet0() | 0);
          $157 = ($147|0)==($155|0);
          $158 = ($150|0)==($156|0);
          $159 = $157 & $158;
          if ($159) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $tobool541 = ($dest$0|0)==(0|0);
          if ($tobool541) {
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
          } else {
           switch ($spec$select219|0) {
           case 0:  {
            $conv544 = $call529;
            HEAPF32[$dest$0>>2] = $conv544;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           default: {
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $127 = (___intscan($f,$base$0,0,-1,-1)|0);
          $128 = (getTempRet0() | 0);
          $129 = $shcnt;
          $130 = $129;
          $131 = HEAP32[$130>>2]|0;
          $132 = (($129) + 4)|0;
          $133 = $132;
          $134 = HEAP32[$133>>2]|0;
          $135 = HEAP32[$rpos42>>2]|0;
          $136 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub514 = (($135) - ($136))|0;
          $137 = ($sub$ptr$sub514|0)<(0);
          $138 = $137 << 31 >> 31;
          $139 = (_i64Subtract(0,0,($sub$ptr$sub514|0),($138|0))|0);
          $140 = (getTempRet0() | 0);
          $141 = ($131|0)==($139|0);
          $142 = ($134|0)==($140|0);
          $143 = $141 & $142;
          if ($143) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $cmp520 = ($spec$select|0)==(112);
          $tobool523 = ($dest$0|0)!=(0|0);
          $or$cond1 = $tobool523 & $cmp520;
          if ($or$cond1) {
           $144 = $127;
           HEAP32[$dest$0>>2] = $144;
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          } else {
           _store_int($dest$0,$spec$select219,$127,$128);
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          }
         }
        } while(0);
        $160 = $shcnt;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = (($160) + 4)|0;
        $164 = $163;
        $165 = HEAP32[$164>>2]|0;
        $166 = HEAP32[$rpos42>>2]|0;
        $167 = HEAP32[$rend>>2]|0;
        $sub$ptr$sub555 = (($166) - ($167))|0;
        $168 = ($sub$ptr$sub555|0)<(0);
        $169 = $168 << 31 >> 31;
        $172 = (_i64Add(($162|0),($165|0),($170|0),($171|0))|0);
        $173 = (getTempRet0() | 0);
        $174 = (_i64Add(($172|0),($173|0),($sub$ptr$sub555|0),($169|0))|0);
        $175 = (getTempRet0() | 0);
        $tobool559 = ($dest$0|0)!=(0|0);
        $inc561 = $tobool559&1;
        $spec$select222 = (($matches$0308) + ($inc561))|0;
        $179 = $185;$180 = $174;$181 = $175;$matches$1 = $spec$select222;$p$12 = $p$11;$s$7 = $s$6;
        break L8;
       }
      } while(0);
      $conv41 = $cmp32&1;
      $add$ptr = (($p$0312) + ($conv41)|0);
      ___shlim($f,0,0);
      $28 = HEAP32[$rpos42>>2]|0;
      $29 = HEAP32[$shend43>>2]|0;
      $cmp44 = ($28>>>0)<($29>>>0);
      if ($cmp44) {
       $incdec$ptr48 = ((($28)) + 1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr48;
       $30 = HEAP8[$28>>0]|0;
       $conv49 = $30&255;
       $cond53 = $conv49;
      } else {
       $call51 = (___shgetc($f)|0);
       $cond53 = $call51;
      }
      $31 = HEAP8[$add$ptr>>0]|0;
      $conv54 = $31&255;
      $cmp55 = ($cond53|0)==($conv54|0);
      if (!($cmp55)) {
       label = 23;
       break L6;
      }
      $34 = (_i64Add(($20|0),($21|0),1,0)|0);
      $35 = (getTempRet0() | 0);
      $179 = $178;$180 = $34;$181 = $35;$matches$1 = $matches$0308;$p$12 = $add$ptr;$s$7 = $s$0306;
     } else {
      $p$1 = $p$0312;
      while(1) {
       $arrayidx = ((($p$1)) + 1|0);
       $3 = HEAP8[$arrayidx>>0]|0;
       $conv3 = $3&255;
       $call4 = (_isspace($conv3)|0);
       $tobool5 = ($call4|0)==(0);
       if ($tobool5) {
        break;
       } else {
        $p$1 = $arrayidx;
       }
      }
      ___shlim($f,0,0);
      while(1) {
       $4 = HEAP32[$rpos42>>2]|0;
       $5 = HEAP32[$shend43>>2]|0;
       $cmp7 = ($4>>>0)<($5>>>0);
       if ($cmp7) {
        $incdec$ptr11 = ((($4)) + 1|0);
        HEAP32[$rpos42>>2] = $incdec$ptr11;
        $6 = HEAP8[$4>>0]|0;
        $conv12 = $6&255;
        $cond16 = $conv12;
       } else {
        $call14 = (___shgetc($f)|0);
        $cond16 = $call14;
       }
       $call17 = (_isspace($cond16)|0);
       $tobool18 = ($call17|0)==(0);
       if ($tobool18) {
        break;
       }
      }
      $7 = HEAP32[$shend43>>2]|0;
      $tobool22 = ($7|0)==(0|0);
      if ($tobool22) {
       $$pre = HEAP32[$rpos42>>2]|0;
       $17 = $$pre;
      } else {
       $8 = HEAP32[$rpos42>>2]|0;
       $incdec$ptr25 = ((($8)) + -1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr25;
       $9 = $incdec$ptr25;
       $17 = $9;
      }
      $10 = $shcnt;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$rend>>2]|0;
      $sub$ptr$sub = (($17) - ($16))|0;
      $18 = ($sub$ptr$sub|0)<(0);
      $19 = $18 << 31 >> 31;
      $22 = (_i64Add(($12|0),($15|0),($20|0),($21|0))|0);
      $23 = (getTempRet0() | 0);
      $24 = (_i64Add(($22|0),($23|0),($sub$ptr$sub|0),($19|0))|0);
      $25 = (getTempRet0() | 0);
      $179 = $178;$180 = $24;$181 = $25;$matches$1 = $matches$0308;$p$12 = $p$1;$s$7 = $s$0306;
     }
    } while(0);
    $incdec$ptr564 = ((($p$12)) + 1|0);
    $176 = HEAP8[$incdec$ptr564>>0]|0;
    $tobool = ($176<<24>>24)==(0);
    if ($tobool) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $178 = $179;$2 = $176;$20 = $180;$21 = $181;$matches$0308 = $matches$1;$p$0312 = $incdec$ptr564;$s$0306 = $s$7;
    }
   }
   if ((label|0) == 23) {
    $32 = HEAP32[$shend43>>2]|0;
    $tobool59 = ($32|0)==(0|0);
    if (!($tobool59)) {
     $33 = HEAP32[$rpos42>>2]|0;
     $incdec$ptr62 = ((($33)) + -1|0);
     HEAP32[$rpos42>>2] = $incdec$ptr62;
    }
    $cmp65 = ($cond53|0)>(-1);
    $tobool567 = ($matches$0308|0)!=(0);
    $or$cond2 = $tobool567 | $cmp65;
    if ($or$cond2) {
     $matches$3 = $matches$0308;
     break;
    } else {
     $182 = $178;$alloc$1 = 0;$s$9 = $s$0306;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $tobool567$old = ($matches$0308|0)==(0);
    if ($tobool567$old) {
     $182 = $184;$alloc$1 = $alloc$0;$s$9 = $s$8;
     label = 144;
    } else {
     $177 = $184;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$8;
    }
   }
   if ((label|0) == 144) {
    $177 = $182;$alloc$2 = $alloc$1;$matches$2 = -1;$s$10 = $s$9;
   }
   $tobool570 = ($alloc$2|0)==(0);
   if ($tobool570) {
    $matches$3 = $matches$2;
   } else {
    _free($s$10);
    _free($177);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $tobool574 = ($cond|0)==(0);
 if (!($tobool574)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _arg_n($ap,$n) {
 $ap = $ap|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap2 = 0, $arglist_current = 0, $arglist_next = 0, $cmp = 0, $dec = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $i$0 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $i$0 = $n;
 while(1) {
  $cmp = ($i$0>>>0)>(1);
  $arglist_current = HEAP32[$ap2>>2]|0;
  $0 = $arglist_current;
  $1 = ((0) + 4|0);
  $expanded1 = $1;
  $expanded = (($expanded1) - 1)|0;
  $2 = (($0) + ($expanded))|0;
  $3 = ((0) + 4|0);
  $expanded5 = $3;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $4 = $2 & $expanded3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $arglist_next = ((($5)) + 4|0);
  HEAP32[$ap2>>2] = $arglist_next;
  $dec = (($i$0) + -1)|0;
  if ($cmp) {
   $i$0 = $dec;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _store_int($dest,$size,$0,$1) {
 $dest = $dest|0;
 $size = $size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($dest|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   switch ($size|0) {
   case -2:  {
    $2 = $0&255;
    HEAP8[$dest>>0] = $2;
    break L1;
    break;
   }
   case -1:  {
    $3 = $0&65535;
    HEAP16[$dest>>1] = $3;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 3:  {
    $4 = $dest;
    $5 = $4;
    HEAP32[$5>>2] = $0;
    $6 = (($4) + 4)|0;
    $7 = $6;
    HEAP32[$7>>2] = $1;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $tobool1 = ($0|0)==(0);
  $phitmp = $tobool1&1;
  $1 = $phitmp;
 }
 return ($1|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $rend = 0, $rpos = 0, $spec$select = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = ((($f)) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 $sub$ptr$lhs$cast = $call;
 $sub$ptr$rhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $k$0 = $tobool ? $add : $sub$ptr$sub;
 $cmp = ($k$0>>>0)<($len>>>0);
 $spec$select = $cmp ? $k$0 : $len;
 (_memcpy(($buf|0),($0|0),($spec$select|0))|0);
 $add$ptr = (($0) + ($spec$select)|0);
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr4 = (($0) + ($k$0)|0);
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = $add$ptr4;
 HEAP32[$cookie>>2] = $add$ptr4;
 return ($spec$select|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 $cond = $tobool ? 19480 : $st;
 $call = (_mbrtowc(0,$s,$n,$cond)|0);
 return ($call|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr36 = 0, $add15 = 0, $add25 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp26 = 0, $cmp3 = 0, $cnt$055 = 0, $cnt$1 = 0, $cnt$248 = 0, $cnt$3 = 0, $dec = 0, $div = 0, $inc = 0, $incdec$ptr = 0, $n$addr$054 = 0, $n$addr$1 = 0, $n$addr$247 = 0, $or$cond = 0, $or$cond52 = 0, $s = 0, $spec$select = 0, $sub = 0, $sub13 = 0, $sub37 = 0;
 var $tobool = 0, $tobool1 = 0, $tobool150 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1944 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2145 = 0, $tobool251 = 0, $tobool7 = 0, $wbuf = 0, $wn$addr$0 = 0, $wn$addr$153 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$446 = 0, $ws$0 = 0, $ws$140 = 0, $ws$156 = 0;
 var $ws$2 = 0, $ws$349 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $wbuf = sp;
 $s = sp + 1024|0;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $tobool = ($wcs|0)!=(0|0);
 $wn$addr$0 = $tobool ? $wn : 256;
 $ws$0 = $tobool ? $wcs : $wbuf;
 $$cast = $0;
 $tobool150 = ($0|0)!=(0);
 $tobool251 = ($wn$addr$0|0)!=(0);
 $or$cond52 = $tobool251 & $tobool150;
 L1: do {
  if ($or$cond52) {
   $9 = $$cast;$cnt$055 = 0;$n$addr$054 = $n;$wn$addr$153 = $wn$addr$0;$ws$156 = $ws$0;
   while(1) {
    $div = $n$addr$054 >>> 2;
    $cmp = ($div>>>0)>=($wn$addr$153>>>0);
    $cmp3 = ($n$addr$054>>>0)>(131);
    $1 = $cmp3 | $cmp;
    if (!($1)) {
     $3 = $9;$cnt$1 = $cnt$055;$n$addr$1 = $n$addr$054;$wn$addr$3 = $wn$addr$153;$ws$140 = $ws$156;
     break L1;
    }
    $spec$select = $cmp ? $wn$addr$153 : $div;
    $sub = (($n$addr$054) - ($spec$select))|0;
    $call = (_mbsrtowcs($ws$156,$s,$spec$select,$st)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($ws$156|0)==($wbuf|0);
    $add$ptr = (($ws$156) + ($call<<2)|0);
    $sub13 = $cmp11 ? 0 : $call;
    $wn$addr$2 = (($wn$addr$153) - ($sub13))|0;
    $ws$2 = $cmp11 ? $ws$156 : $add$ptr;
    $add15 = (($call) + ($cnt$055))|0;
    $2 = HEAP32[$s>>2]|0;
    $tobool1 = ($2|0)!=(0|0);
    $tobool2 = ($wn$addr$2|0)!=(0);
    $or$cond = $tobool2 & $tobool1;
    if ($or$cond) {
     $9 = $2;$cnt$055 = $add15;$n$addr$054 = $sub;$wn$addr$153 = $wn$addr$2;$ws$156 = $ws$2;
    } else {
     $3 = $2;$cnt$1 = $add15;$n$addr$1 = $sub;$wn$addr$3 = $wn$addr$2;$ws$140 = $ws$2;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $3 = $$pr$pre;$cnt$1 = -1;$n$addr$1 = $sub;$wn$addr$3 = 0;$ws$140 = $ws$156;
  } else {
   $3 = $$cast;$cnt$1 = 0;$n$addr$1 = $n;$wn$addr$3 = $wn$addr$0;$ws$140 = $ws$0;
  }
 } while(0);
 $tobool16 = ($3|0)==(0|0);
 L9: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1944 = ($wn$addr$3|0)!=(0);
   $tobool2145 = ($n$addr$1|0)!=(0);
   $4 = $tobool1944 & $tobool2145;
   if ($4) {
    $5 = $3;$cnt$248 = $cnt$1;$n$addr$247 = $n$addr$1;$wn$addr$446 = $wn$addr$3;$ws$349 = $ws$140;
    while(1) {
     $call24 = (_mbrtowc($ws$349,$5,$n$addr$247,$st)|0);
     $add25 = (($call24) + 2)|0;
     $cmp26 = ($add25>>>0)<(3);
     if ($cmp26) {
      break;
     }
     $6 = HEAP32[$s>>2]|0;
     $add$ptr36 = (($6) + ($call24)|0);
     HEAP32[$s>>2] = $add$ptr36;
     $sub37 = (($n$addr$247) - ($call24))|0;
     $incdec$ptr = ((($ws$349)) + 4|0);
     $dec = (($wn$addr$446) + -1)|0;
     $inc = (($cnt$248) + 1)|0;
     $tobool19 = ($dec|0)!=(0);
     $tobool21 = ($sub37|0)!=(0);
     $7 = $tobool19 & $tobool21;
     if ($7) {
      $5 = $add$ptr36;$cnt$248 = $inc;$n$addr$247 = $sub37;$wn$addr$446 = $dec;$ws$349 = $incdec$ptr;
     } else {
      $cnt$3 = $inc;
      break L9;
     }
    }
    switch ($call24|0) {
    case -1:  {
     $cnt$3 = $call24;
     break L9;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$248;
     break L9;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$248;
     break L9;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($tobool) {
  $8 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $8;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$pre = 0, $$pre$pre = 0, $$pre135 = 0, $$pre136 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add158 = 0, $and = 0;
 var $and113 = 0, $and33 = 0, $and33120 = 0, $and68 = 0, $and79 = 0, $arrayidx151 = 0, $arrayidx55 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call214 = 0, $call21492 = 0, $call9 = 0, $cmp101 = 0, $cmp105 = 0, $cmp109 = 0, $cmp109103 = 0, $cmp134 = 0;
 var $cmp144 = 0, $cmp174 = 0, $cmp189 = 0, $cmp26 = 0, $cmp29 = 0, $cmp40 = 0, $cmp48 = 0, $cmp73 = 0, $cmp84 = 0, $conv118 = 0, $conv121 = 0, $conv124 = 0, $conv127 = 0, $conv132$pre$phi138Z2D = 0, $conv132$pre$phiZ2D = 0, $conv152 = 0, $conv172 = 0, $conv18 = 0, $conv187 = 0, $conv24 = 0;
 var $conv38 = 0, $conv56 = 0, $conv99 = 0, $dec = 0, $dec140 = 0, $dec202 = 0, $dec44 = 0, $dec92 = 0, $incdec$ptr = 0, $incdec$ptr117 = 0, $incdec$ptr119 = 0, $incdec$ptr120 = 0, $incdec$ptr122 = 0, $incdec$ptr123 = 0, $incdec$ptr125 = 0, $incdec$ptr126 = 0, $incdec$ptr128 = 0, $incdec$ptr137 = 0, $incdec$ptr139 = 0, $incdec$ptr148 = 0;
 var $incdec$ptr163 = 0, $incdec$ptr165 = 0, $incdec$ptr180 = 0, $incdec$ptr19 = 0, $incdec$ptr195 = 0, $incdec$ptr201 = 0, $incdec$ptr43 = 0, $incdec$ptr52 = 0, $incdec$ptr67 = 0, $incdec$ptr78 = 0, $incdec$ptr89 = 0, $locale = 0, $or = 0, $or$cond = 0, $or112 = 0, $or119 = 0, $or159 = 0, $or168 = 0, $or183 = 0, $or198 = 0;
 var $or61 = 0, $rem = 0, $rem104 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$0102 = 0, $s$1 = 0, $s$1$ph = 0, $s$10 = 0, $s$11$ph = 0, $s$11147 = 0, $s$11148 = 0, $s$119194 = 0, $s$2123 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6$lcssa = 0, $s$6$ph = 0, $s$6116 = 0;
 var $s$7106 = 0, $s$8 = 0, $s$8$ph = 0, $s$8141 = 0, $s$9 = 0, $s$9$sink = 0, $shl = 0, $shl179 = 0, $shl194 = 0, $shr157 = 0, $shr60 = 0, $sub = 0, $sub100 = 0, $sub111 = 0, $sub129 = 0, $sub133$pre$phiZ2D = 0, $sub143 = 0, $sub154 = 0, $sub167 = 0, $sub173 = 0;
 var $sub188 = 0, $sub212 = 0, $sub25 = 0, $sub32 = 0, $sub32118 = 0, $sub36 = 0, $sub39 = 0, $sub47 = 0, $sub57 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool114 = 0, $tobool1199 = 0, $tobool14 = 0, $tobool161 = 0, $tobool170 = 0, $tobool185 = 0, $tobool2 = 0, $tobool205 = 0;
 var $tobool207 = 0, $tobool209 = 0, $tobool215 = 0, $tobool34 = 0, $tobool34121 = 0, $tobool4 = 0, $tobool63 = 0, $tobool69 = 0, $tobool7 = 0, $tobool80 = 0, $tobool96 = 0, $tobool96113 = 0, $wn$addr$0100 = 0, $wn$addr$1 = 0, $wn$addr$1$ph = 0, $wn$addr$2122 = 0, $wn$addr$3 = 0, $wn$addr$4 = 0, $wn$addr$5$ph = 0, $wn$addr$5114 = 0;
 var $wn$addr$6104 = 0, $wn$addr$7 = 0, $wn$addr$7$ph = 0, $wn$addr$7139 = 0, $wn$addr$8 = 0, $wn$addr$9 = 0, $wn$addr$9144 = 0, $ws$addr$0101 = 0, $ws$addr$1$ph = 0, $ws$addr$1115 = 0, $ws$addr$2105 = 0, $ws$addr$3 = 0, $ws$addr$3$ph = 0, $ws$addr$3140 = 0, $ws$addr$4 = 0, $ws$addr$5 = 0, $ws$addr$5145 = 0, $ws$addr$5146 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  label = 5;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $tobool1 = ($1|0)==(0);
  if ($tobool1) {
   label = 5;
  } else {
   $tobool2 = ($ws|0)==(0|0);
   if ($tobool2) {
    $c$2 = $1;$s$4 = $0;$wn$addr$4 = $wn;
    label = 26;
   } else {
    HEAP32[$st>>2] = 0;
    $c$4 = $1;$s$9 = $0;$wn$addr$8 = $wn;$ws$addr$4 = $ws;
    label = 48;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $call = (___pthread_self_417()|0);
   $locale = ((($call)) + 188|0);
   $2 = HEAP32[$locale>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $tobool4 = ($3|0)==(0|0);
   $tobool7 = ($ws|0)!=(0|0);
   if (!($tobool4)) {
    if ($tobool7) {
     $s$6$ph = $0;$wn$addr$5$ph = $wn;$ws$addr$1$ph = $ws;
     label = 33;
     break;
    } else {
     $s$1$ph = $0;$wn$addr$1$ph = $wn;
     label = 15;
     break;
    }
   }
   if (!($tobool7)) {
    $call9 = (_strlen($0)|0);
    $retval$0 = $call9;
    label = 63;
    break;
   }
   $tobool1199 = ($wn|0)==(0);
   L13: do {
    if ($tobool1199) {
     $s$0$lcssa = $0;
    } else {
     $s$0102 = $0;$wn$addr$0100 = $wn;$ws$addr$0101 = $ws;
     while(1) {
      $4 = HEAP8[$s$0102>>0]|0;
      $tobool14 = ($4<<24>>24)==(0);
      if ($tobool14) {
       break;
      }
      $incdec$ptr = ((($s$0102)) + 1|0);
      $conv18 = $4 << 24 >> 24;
      $and = $conv18 & 57343;
      $incdec$ptr19 = ((($ws$addr$0101)) + 4|0);
      HEAP32[$ws$addr$0101>>2] = $and;
      $dec = (($wn$addr$0100) + -1)|0;
      $tobool11 = ($dec|0)==(0);
      if ($tobool11) {
       $s$0$lcssa = $incdec$ptr;
       break L13;
      } else {
       $s$0102 = $incdec$ptr;$wn$addr$0100 = $dec;$ws$addr$0101 = $incdec$ptr19;
      }
     }
     HEAP32[$ws$addr$0101>>2] = 0;
     HEAP32[$src>>2] = 0;
     $sub = (($wn) - ($wn$addr$0100))|0;
     $retval$0 = $sub;
     label = 63;
     break L5;
    }
   } while(0);
   HEAP32[$src>>2] = $s$0$lcssa;
   $retval$0 = $wn;
   label = 63;
  }
 } while(0);
 L20: while(1) {
  L21: do {
   if ((label|0) == 15) {
    label = 0;
    $s$1 = $s$1$ph;$wn$addr$1 = $wn$addr$1$ph;
    while(1) {
     $5 = HEAP8[$s$1>>0]|0;
     $conv24 = $5&255;
     $sub25 = (($conv24) + -1)|0;
     $cmp26 = ($sub25>>>0)<(127);
     if ($cmp26) {
      $6 = $s$1;
      $rem = $6 & 3;
      $cmp29 = ($rem|0)==(0);
      if ($cmp29) {
       $7 = HEAP32[$s$1>>2]|0;
       $sub32118 = (($7) + -16843009)|0;
       $or119 = $sub32118 | $7;
       $and33120 = $or119 & -2139062144;
       $tobool34121 = ($and33120|0)==(0);
       $8 = $7&255;
       if ($tobool34121) {
        $s$2123 = $s$1;$wn$addr$2122 = $wn$addr$1;
        while(1) {
         $add$ptr = ((($s$2123)) + 4|0);
         $sub36 = (($wn$addr$2122) + -4)|0;
         $9 = HEAP32[$add$ptr>>2]|0;
         $sub32 = (($9) + -16843009)|0;
         $or = $sub32 | $9;
         $and33 = $or & -2139062144;
         $tobool34 = ($and33|0)==(0);
         if ($tobool34) {
          $s$2123 = $add$ptr;$wn$addr$2122 = $sub36;
         } else {
          break;
         }
        }
        $10 = $9&255;
        $11 = $10;$s$3 = $add$ptr;$wn$addr$3 = $sub36;
       } else {
        $11 = $8;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
       }
      } else {
       $11 = $5;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
      }
     } else {
      $11 = $5;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
     }
     $conv38 = $11&255;
     $sub39 = (($conv38) + -1)|0;
     $cmp40 = ($sub39>>>0)<(127);
     if (!($cmp40)) {
      break;
     }
     $incdec$ptr43 = ((($s$3)) + 1|0);
     $dec44 = (($wn$addr$3) + -1)|0;
     $s$1 = $incdec$ptr43;$wn$addr$1 = $dec44;
    }
    $sub47 = (($conv38) + -194)|0;
    $cmp48 = ($sub47>>>0)>(50);
    if ($cmp48) {
     $s$11147 = $s$3;$wn$addr$9144 = $wn$addr$3;$ws$addr$5145 = $ws;
     label = 57;
    } else {
     $incdec$ptr52 = ((($s$3)) + 1|0);
     $arrayidx55 = (48 + ($sub47<<2)|0);
     $12 = HEAP32[$arrayidx55>>2]|0;
     $c$2 = $12;$s$4 = $incdec$ptr52;$wn$addr$4 = $wn$addr$3;
     label = 26;
     continue L20;
    }
   }
   else if ((label|0) == 26) {
    label = 0;
    $13 = HEAP8[$s$4>>0]|0;
    $conv56 = $13&255;
    $14 = $conv56 >>> 3;
    $sub57 = (($14) + -16)|0;
    $shr60 = $c$2 >> 26;
    $add = (($14) + ($shr60))|0;
    $or61 = $sub57 | $add;
    $tobool63 = ($or61>>>0)>(7);
    if ($tobool63) {
     $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
     label = 56;
    } else {
     $incdec$ptr67 = ((($s$4)) + 1|0);
     $and68 = $c$2 & 33554432;
     $tobool69 = ($and68|0)==(0);
     if ($tobool69) {
      $s$5 = $incdec$ptr67;
     } else {
      $15 = HEAP8[$incdec$ptr67>>0]|0;
      $16 = $15 & -64;
      $cmp73 = ($16<<24>>24)==(-128);
      if (!($cmp73)) {
       $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
       label = 56;
       break;
      }
      $incdec$ptr78 = ((($s$4)) + 2|0);
      $and79 = $c$2 & 524288;
      $tobool80 = ($and79|0)==(0);
      if ($tobool80) {
       $s$5 = $incdec$ptr78;
      } else {
       $17 = HEAP8[$incdec$ptr78>>0]|0;
       $18 = $17 & -64;
       $cmp84 = ($18<<24>>24)==(-128);
       if (!($cmp84)) {
        $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
        label = 56;
        break;
       }
       $incdec$ptr89 = ((($s$4)) + 3|0);
       $s$5 = $incdec$ptr89;
      }
     }
     $dec92 = (($wn$addr$4) + -1)|0;
     $s$1$ph = $s$5;$wn$addr$1$ph = $dec92;
     label = 15;
     continue L20;
    }
   }
   else if ((label|0) == 33) {
    label = 0;
    $tobool96113 = ($wn$addr$5$ph|0)==(0);
    L23: do {
     if ($tobool96113) {
      $s$6$lcssa = $s$6$ph;
     } else {
      $s$6116 = $s$6$ph;$wn$addr$5114 = $wn$addr$5$ph;$ws$addr$1115 = $ws$addr$1$ph;
      while(1) {
       $19 = HEAP8[$s$6116>>0]|0;
       $conv99 = $19&255;
       $sub100 = (($conv99) + -1)|0;
       $cmp101 = ($sub100>>>0)<(127);
       if ($cmp101) {
        $20 = $s$6116;
        $rem104 = $20 & 3;
        $cmp105 = ($rem104|0)==(0);
        $cmp109103 = ($wn$addr$5114>>>0)>(4);
        $or$cond = $cmp105 & $cmp109103;
        if ($or$cond) {
         $s$7106 = $s$6116;$wn$addr$6104 = $wn$addr$5114;$ws$addr$2105 = $ws$addr$1115;
         while(1) {
          $21 = HEAP32[$s$7106>>2]|0;
          $sub111 = (($21) + -16843009)|0;
          $or112 = $sub111 | $21;
          $and113 = $or112 & -2139062144;
          $tobool114 = ($and113|0)==(0);
          if (!($tobool114)) {
           label = 42;
           break;
          }
          $incdec$ptr117 = ((($s$7106)) + 1|0);
          $conv118 = $21 & 255;
          $incdec$ptr119 = ((($ws$addr$2105)) + 4|0);
          HEAP32[$ws$addr$2105>>2] = $conv118;
          $incdec$ptr120 = ((($s$7106)) + 2|0);
          $22 = HEAP8[$incdec$ptr117>>0]|0;
          $conv121 = $22&255;
          $incdec$ptr122 = ((($ws$addr$2105)) + 8|0);
          HEAP32[$incdec$ptr119>>2] = $conv121;
          $incdec$ptr123 = ((($s$7106)) + 3|0);
          $23 = HEAP8[$incdec$ptr120>>0]|0;
          $conv124 = $23&255;
          $incdec$ptr125 = ((($ws$addr$2105)) + 12|0);
          HEAP32[$incdec$ptr122>>2] = $conv124;
          $incdec$ptr126 = ((($s$7106)) + 4|0);
          $24 = HEAP8[$incdec$ptr123>>0]|0;
          $conv127 = $24&255;
          $incdec$ptr128 = ((($ws$addr$2105)) + 16|0);
          HEAP32[$incdec$ptr125>>2] = $conv127;
          $sub129 = (($wn$addr$6104) + -4)|0;
          $cmp109 = ($sub129>>>0)>(4);
          if ($cmp109) {
           $s$7106 = $incdec$ptr126;$wn$addr$6104 = $sub129;$ws$addr$2105 = $incdec$ptr128;
          } else {
           label = 41;
           break;
          }
         }
         if ((label|0) == 41) {
          label = 0;
          $$pre$pre = HEAP8[$incdec$ptr126>>0]|0;
          $$pre = $$pre$pre;$s$8$ph = $incdec$ptr126;$wn$addr$7$ph = $sub129;$ws$addr$3$ph = $incdec$ptr128;
         }
         else if ((label|0) == 42) {
          label = 0;
          $25 = $21&255;
          $$pre = $25;$s$8$ph = $s$7106;$wn$addr$7$ph = $wn$addr$6104;$ws$addr$3$ph = $ws$addr$2105;
         }
         $$pre135 = $$pre&255;
         $$pre136 = (($$pre135) + -1)|0;
         $conv132$pre$phiZ2D = $$pre135;$s$8 = $s$8$ph;$sub133$pre$phiZ2D = $$pre136;$wn$addr$7 = $wn$addr$7$ph;$ws$addr$3 = $ws$addr$3$ph;
         label = 44;
        } else {
         $conv132$pre$phi138Z2D = $conv99;$s$8141 = $s$6116;$wn$addr$7139 = $wn$addr$5114;$ws$addr$3140 = $ws$addr$1115;
        }
       } else {
        $conv132$pre$phiZ2D = $conv99;$s$8 = $s$6116;$sub133$pre$phiZ2D = $sub100;$wn$addr$7 = $wn$addr$5114;$ws$addr$3 = $ws$addr$1115;
        label = 44;
       }
       if ((label|0) == 44) {
        label = 0;
        $cmp134 = ($sub133$pre$phiZ2D>>>0)<(127);
        if ($cmp134) {
         $conv132$pre$phi138Z2D = $conv132$pre$phiZ2D;$s$8141 = $s$8;$wn$addr$7139 = $wn$addr$7;$ws$addr$3140 = $ws$addr$3;
        } else {
         break;
        }
       }
       $incdec$ptr137 = ((($s$8141)) + 1|0);
       $incdec$ptr139 = ((($ws$addr$3140)) + 4|0);
       HEAP32[$ws$addr$3140>>2] = $conv132$pre$phi138Z2D;
       $dec140 = (($wn$addr$7139) + -1)|0;
       $tobool96 = ($dec140|0)==(0);
       if ($tobool96) {
        $s$6$lcssa = $incdec$ptr137;
        break L23;
       } else {
        $s$6116 = $incdec$ptr137;$wn$addr$5114 = $dec140;$ws$addr$1115 = $incdec$ptr139;
       }
      }
      $sub143 = (($conv132$pre$phiZ2D) + -194)|0;
      $cmp144 = ($sub143>>>0)>(50);
      if ($cmp144) {
       $s$11147 = $s$8;$wn$addr$9144 = $wn$addr$7;$ws$addr$5145 = $ws$addr$3;
       label = 57;
       break L21;
      }
      $incdec$ptr148 = ((($s$8)) + 1|0);
      $arrayidx151 = (48 + ($sub143<<2)|0);
      $26 = HEAP32[$arrayidx151>>2]|0;
      $c$4 = $26;$s$9 = $incdec$ptr148;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
      label = 48;
      continue L20;
     }
    } while(0);
    HEAP32[$src>>2] = $s$6$lcssa;
    $retval$0 = $wn;
    label = 63;
    continue L20;
   }
   else if ((label|0) == 48) {
    label = 0;
    $27 = HEAP8[$s$9>>0]|0;
    $conv152 = $27&255;
    $28 = $conv152 >>> 3;
    $sub154 = (($28) + -16)|0;
    $shr157 = $c$4 >> 26;
    $add158 = (($28) + ($shr157))|0;
    $or159 = $sub154 | $add158;
    $tobool161 = ($or159>>>0)>(7);
    if ($tobool161) {
     $c$6 = $c$4;$s$9$sink = $s$9;$wn$addr$9 = $wn$addr$8;$ws$addr$5 = $ws$addr$4;
     label = 56;
    } else {
     $shl = $c$4 << 6;
     $incdec$ptr165 = ((($s$9)) + 1|0);
     $sub167 = (($conv152) + -128)|0;
     $or168 = $sub167 | $shl;
     $tobool170 = ($or168|0)<(0);
     do {
      if ($tobool170) {
       $29 = HEAP8[$incdec$ptr165>>0]|0;
       $conv172 = $29&255;
       $sub173 = (($conv172) + -128)|0;
       $cmp174 = ($sub173>>>0)>(63);
       if (!($cmp174)) {
        $shl179 = $or168 << 6;
        $incdec$ptr180 = ((($s$9)) + 2|0);
        $or183 = $sub173 | $shl179;
        $tobool185 = ($or183|0)<(0);
        if (!($tobool185)) {
         $c$5 = $or183;$s$10 = $incdec$ptr180;
         break;
        }
        $30 = HEAP8[$incdec$ptr180>>0]|0;
        $conv187 = $30&255;
        $sub188 = (($conv187) + -128)|0;
        $cmp189 = ($sub188>>>0)>(63);
        if (!($cmp189)) {
         $shl194 = $or183 << 6;
         $incdec$ptr195 = ((($s$9)) + 3|0);
         $or198 = $sub188 | $shl194;
         $c$5 = $or198;$s$10 = $incdec$ptr195;
         break;
        }
       }
       $s$11$ph = ((($s$9)) + -1|0);
       $call21492 = (___errno_location()|0);
       HEAP32[$call21492>>2] = 84;
       $s$119194 = $s$11$ph;
       break L21;
      } else {
       $c$5 = $or168;$s$10 = $incdec$ptr165;
      }
     } while(0);
     $incdec$ptr201 = ((($ws$addr$4)) + 4|0);
     HEAP32[$ws$addr$4>>2] = $c$5;
     $dec202 = (($wn$addr$8) + -1)|0;
     $s$6$ph = $s$10;$wn$addr$5$ph = $dec202;$ws$addr$1$ph = $incdec$ptr201;
     label = 33;
     continue L20;
    }
   }
   else if ((label|0) == 63) {
    label = 0;
    return ($retval$0|0);
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $incdec$ptr163 = ((($s$9$sink)) + -1|0);
   $tobool205 = ($c$6|0)==(0);
   if ($tobool205) {
    $s$11147 = $incdec$ptr163;$wn$addr$9144 = $wn$addr$9;$ws$addr$5145 = $ws$addr$5;
    label = 57;
   } else {
    $s$11148 = $incdec$ptr163;$ws$addr$5146 = $ws$addr$5;
    label = 61;
   }
  }
  if ((label|0) == 57) {
   label = 0;
   $31 = HEAP8[$s$11147>>0]|0;
   $tobool207 = ($31<<24>>24)==(0);
   if ($tobool207) {
    $tobool209 = ($ws$addr$5145|0)==(0|0);
    if (!($tobool209)) {
     HEAP32[$ws$addr$5145>>2] = 0;
     HEAP32[$src>>2] = 0;
    }
    $sub212 = (($wn) - ($wn$addr$9144))|0;
    $retval$0 = $sub212;
    label = 63;
    continue;
   } else {
    $s$11148 = $s$11147;$ws$addr$5146 = $ws$addr$5145;
    label = 61;
   }
  }
  if ((label|0) == 61) {
   label = 0;
   $call214 = (___errno_location()|0);
   HEAP32[$call214>>2] = 84;
   $tobool215 = ($ws$addr$5146|0)==(0|0);
   if ($tobool215) {
    $retval$0 = -1;
    label = 63;
    continue;
   } else {
    $s$119194 = $s$11148;
   }
  }
  HEAP32[$src>>2] = $s$119194;
  $retval$0 = -1;
  label = 63;
 }
 return (0)|0;
}
function ___pthread_self_417() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr33 = 0, $add15 = 0, $add25 = 0, $add35 = 0, $buf = 0, $call = 0;
 var $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0, $cnt$054 = 0, $cnt$1 = 0, $cnt$247 = 0, $cnt$3 = 0, $dec = 0, $incdec$ptr = 0, $n$addr$0 = 0, $n$addr$152 = 0, $n$addr$2 = 0, $n$addr$3 = 0, $n$addr$445 = 0, $or$cond = 0, $or$cond51 = 0, $s$0 = 0, $s$139 = 0;
 var $s$155 = 0, $s$2 = 0, $s$348 = 0, $spec$select = 0, $sub = 0, $sub13 = 0, $sub34 = 0, $tobool = 0, $tobool1 = 0, $tobool149 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1943 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2144 = 0, $tobool250 = 0, $tobool28 = 0, $tobool7 = 0, $wn$addr$053 = 0;
 var $wn$addr$1 = 0, $wn$addr$246 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $buf = sp;
 $ws = sp + 256|0;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $tobool = ($dst|0)!=(0|0);
 $n$addr$0 = $tobool ? $n : 256;
 $s$0 = $tobool ? $dst : $buf;
 $$cast = $0;
 $tobool149 = ($0|0)!=(0);
 $tobool250 = ($n$addr$0|0)!=(0);
 $or$cond51 = $tobool250 & $tobool149;
 L1: do {
  if ($or$cond51) {
   $10 = $$cast;$cnt$054 = 0;$n$addr$152 = $n$addr$0;$s$155 = $s$0;$wn$addr$053 = $wn;
   while(1) {
    $cmp = ($wn$addr$053>>>0)>=($n$addr$152>>>0);
    $cmp3 = ($wn$addr$053>>>0)>(32);
    $1 = $cmp | $cmp3;
    if (!($1)) {
     $3 = $10;$cnt$1 = $cnt$054;$n$addr$3 = $n$addr$152;$s$139 = $s$155;$wn$addr$1 = $wn$addr$053;
     break L1;
    }
    $spec$select = $cmp ? $n$addr$152 : $wn$addr$053;
    $sub = (($wn$addr$053) - ($spec$select))|0;
    $call = (_wcsrtombs($s$155,$ws,$spec$select,0)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($s$155|0)==($buf|0);
    $add$ptr = (($s$155) + ($call)|0);
    $sub13 = $cmp11 ? 0 : $call;
    $n$addr$2 = (($n$addr$152) - ($sub13))|0;
    $s$2 = $cmp11 ? $s$155 : $add$ptr;
    $add15 = (($call) + ($cnt$054))|0;
    $2 = HEAP32[$ws>>2]|0;
    $tobool1 = ($2|0)!=(0|0);
    $tobool2 = ($n$addr$2|0)!=(0);
    $or$cond = $tobool2 & $tobool1;
    if ($or$cond) {
     $10 = $2;$cnt$054 = $add15;$n$addr$152 = $n$addr$2;$s$155 = $s$2;$wn$addr$053 = $sub;
    } else {
     $3 = $2;$cnt$1 = $add15;$n$addr$3 = $n$addr$2;$s$139 = $s$2;$wn$addr$1 = $sub;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $3 = $$pr$pre;$cnt$1 = -1;$n$addr$3 = 0;$s$139 = $s$155;$wn$addr$1 = $sub;
  } else {
   $3 = $$cast;$cnt$1 = 0;$n$addr$3 = $n$addr$0;$s$139 = $s$0;$wn$addr$1 = $wn;
  }
 } while(0);
 $tobool16 = ($3|0)==(0|0);
 L9: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1943 = ($n$addr$3|0)!=(0);
   $tobool2144 = ($wn$addr$1|0)!=(0);
   $4 = $tobool1943 & $tobool2144;
   if ($4) {
    $6 = $3;$cnt$247 = $cnt$1;$n$addr$445 = $n$addr$3;$s$348 = $s$139;$wn$addr$246 = $wn$addr$1;
    while(1) {
     $5 = HEAP32[$6>>2]|0;
     $call24 = (_wcrtomb($s$348,$5,0)|0);
     $add25 = (($call24) + 1)|0;
     $cmp26 = ($add25>>>0)<(2);
     if ($cmp26) {
      break;
     }
     $7 = HEAP32[$ws>>2]|0;
     $incdec$ptr = ((($7)) + 4|0);
     HEAP32[$ws>>2] = $incdec$ptr;
     $dec = (($wn$addr$246) + -1)|0;
     $add$ptr33 = (($s$348) + ($call24)|0);
     $sub34 = (($n$addr$445) - ($call24))|0;
     $add35 = (($call24) + ($cnt$247))|0;
     $tobool19 = ($sub34|0)!=(0);
     $tobool21 = ($dec|0)!=(0);
     $8 = $tobool19 & $tobool21;
     if ($8) {
      $6 = $incdec$ptr;$cnt$247 = $add35;$n$addr$445 = $sub34;$s$348 = $add$ptr33;$wn$addr$246 = $dec;
     } else {
      $cnt$3 = $add35;
      break L9;
     }
    }
    $tobool28 = ($call24|0)==(0);
    if ($tobool28) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$247;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($tobool) {
  $9 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $9;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$pre = 0, $$pre85 = 0, $$pre86 = 0, $$pre87 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr48 = 0, $buf = 0, $call = 0, $call$pn = 0;
 var $call15 = 0, $call37 = 0, $cmp = 0, $cmp29 = 0, $cmp42 = 0, $cmp8 = 0, $cmp869 = 0, $cmp9 = 0, $conv = 0, $conv51 = 0, $dec = 0, $dec53 = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr24 = 0, $incdec$ptr52 = 0, $incdec$ptr55 = 0, $n$addr$061 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0;
 var $n$addr$270 = 0, $n$addr$3 = 0, $n$addr$465 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$071 = 0, $s$addr$1 = 0, $s$addr$266 = 0, $s$addr$3 = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $sub28 = 0, $sub34 = 0, $sub45 = 0, $sub49 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0;
 var $tobool160 = 0, $tobool17 = 0, $tobool26 = 0, $tobool2664 = 0, $tobool3 = 0, $tobool32 = 0, $tobool39 = 0, $ws2$062 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp;
 $tobool = ($s|0)==(0|0);
 L1: do {
  if ($tobool) {
   $0 = HEAP32[$ws>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool160 = ($1|0)==(0);
   if ($tobool160) {
    $retval$0 = 0;
   } else {
    $2 = $1;$n$addr$061 = 0;$ws2$062 = $0;
    while(1) {
     $cmp = ($2>>>0)>(127);
     if ($cmp) {
      $call = (_wcrtomb($buf,$2,0)|0);
      $tobool3 = ($call|0)==(-1);
      if ($tobool3) {
       $retval$0 = -1;
       break L1;
      } else {
       $call$pn = $call;
      }
     } else {
      $call$pn = 1;
     }
     $n$addr$1 = (($call$pn) + ($n$addr$061))|0;
     $incdec$ptr = ((($ws2$062)) + 4|0);
     $3 = HEAP32[$incdec$ptr>>2]|0;
     $tobool1 = ($3|0)==(0);
     if ($tobool1) {
      $retval$0 = $n$addr$1;
      break;
     } else {
      $2 = $3;$n$addr$061 = $n$addr$1;$ws2$062 = $incdec$ptr;
     }
    }
   }
  } else {
   $cmp869 = ($n>>>0)>(3);
   L10: do {
    if ($cmp869) {
     $$pre = HEAP32[$ws>>2]|0;
     $5 = $$pre;$n$addr$270 = $n;$s$addr$071 = $s;
     while(1) {
      $4 = HEAP32[$5>>2]|0;
      $sub = (($4) + -1)|0;
      $cmp9 = ($sub>>>0)>(126);
      if ($cmp9) {
       $tobool11 = ($4|0)==(0);
       if ($tobool11) {
        break;
       }
       $call15 = (_wcrtomb($s$addr$071,$4,0)|0);
       $tobool17 = ($call15|0)==(-1);
       if ($tobool17) {
        $retval$0 = -1;
        break L1;
       }
       $add$ptr = (($s$addr$071) + ($call15)|0);
       $sub20 = (($n$addr$270) - ($call15))|0;
       $6 = $5;$n$addr$3 = $sub20;$s$addr$1 = $add$ptr;
      } else {
       $conv = $4&255;
       $incdec$ptr22 = ((($s$addr$071)) + 1|0);
       HEAP8[$s$addr$071>>0] = $conv;
       $dec = (($n$addr$270) + -1)|0;
       $$pre85 = HEAP32[$ws>>2]|0;
       $6 = $$pre85;$n$addr$3 = $dec;$s$addr$1 = $incdec$ptr22;
      }
      $incdec$ptr24 = ((($6)) + 4|0);
      HEAP32[$ws>>2] = $incdec$ptr24;
      $cmp8 = ($n$addr$3>>>0)>(3);
      if ($cmp8) {
       $5 = $incdec$ptr24;$n$addr$270 = $n$addr$3;$s$addr$071 = $s$addr$1;
      } else {
       $n$addr$2$lcssa = $n$addr$3;$s$addr$0$lcssa = $s$addr$1;
       break L10;
      }
     }
     HEAP8[$s$addr$071>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $sub13 = (($n) - ($n$addr$270))|0;
     $retval$0 = $sub13;
     break L1;
    } else {
     $n$addr$2$lcssa = $n;$s$addr$0$lcssa = $s;
    }
   } while(0);
   $tobool2664 = ($n$addr$2$lcssa|0)==(0);
   if ($tobool2664) {
    $retval$0 = $n;
   } else {
    $$pre86 = HEAP32[$ws>>2]|0;
    $8 = $$pre86;$n$addr$465 = $n$addr$2$lcssa;$s$addr$266 = $s$addr$0$lcssa;
    while(1) {
     $7 = HEAP32[$8>>2]|0;
     $sub28 = (($7) + -1)|0;
     $cmp29 = ($sub28>>>0)>(126);
     if ($cmp29) {
      $tobool32 = ($7|0)==(0);
      if ($tobool32) {
       label = 20;
       break;
      }
      $call37 = (_wcrtomb($buf,$7,0)|0);
      $tobool39 = ($call37|0)==(-1);
      if ($tobool39) {
       $retval$0 = -1;
       break L1;
      }
      $cmp42 = ($n$addr$465>>>0)<($call37>>>0);
      if ($cmp42) {
       label = 23;
       break;
      }
      $9 = HEAP32[$8>>2]|0;
      (_wcrtomb($s$addr$266,$9,0)|0);
      $add$ptr48 = (($s$addr$266) + ($call37)|0);
      $sub49 = (($n$addr$465) - ($call37))|0;
      $10 = $8;$n$addr$5 = $sub49;$s$addr$3 = $add$ptr48;
     } else {
      $conv51 = $7&255;
      $incdec$ptr52 = ((($s$addr$266)) + 1|0);
      HEAP8[$s$addr$266>>0] = $conv51;
      $dec53 = (($n$addr$465) + -1)|0;
      $$pre87 = HEAP32[$ws>>2]|0;
      $10 = $$pre87;$n$addr$5 = $dec53;$s$addr$3 = $incdec$ptr52;
     }
     $incdec$ptr55 = ((($10)) + 4|0);
     HEAP32[$ws>>2] = $incdec$ptr55;
     $tobool26 = ($n$addr$5|0)==(0);
     if ($tobool26) {
      $retval$0 = $n;
      break L1;
     } else {
      $8 = $incdec$ptr55;$n$addr$465 = $n$addr$5;$s$addr$266 = $s$addr$3;
     }
    }
    if ((label|0) == 20) {
     HEAP8[$s$addr$266>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $sub34 = (($n) - ($n$addr$465))|0;
     $retval$0 = $sub34;
     break;
    }
    else if ((label|0) == 23) {
     $sub45 = (($n) - ($n$addr$465))|0;
     $retval$0 = $sub45;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _getc($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $cond15 = 0, $conv = 0, $conv11 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $lock = 0, $rend = 0;
 var $rend5 = 0, $retval$0 = 0, $rpos = 0, $rpos4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $rpos4 = ((($f)) + 4|0);
   $4 = HEAP32[$rpos4>>2]|0;
   $rend5 = ((($f)) + 8|0);
   $5 = HEAP32[$rend5>>2]|0;
   $cmp6 = ($4>>>0)<($5>>>0);
   if ($cmp6) {
    $incdec$ptr10 = ((($4)) + 1|0);
    HEAP32[$rpos4>>2] = $incdec$ptr10;
    $6 = HEAP8[$4>>0]|0;
    $conv11 = $6&255;
    $cond15 = $conv11;
   } else {
    $call13 = (___uflow($f)|0);
    $cond15 = $call13;
   }
   $retval$0 = $cond15;
  }
 }
 do {
  if ((label|0) == 3) {
   $rpos = ((($f)) + 4|0);
   $1 = HEAP32[$rpos>>2]|0;
   $rend = ((($f)) + 8|0);
   $2 = HEAP32[$rend>>2]|0;
   $cmp1 = ($1>>>0)<($2>>>0);
   if ($cmp1) {
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $3 = HEAP8[$1>>0]|0;
    $conv = $3&255;
    $retval$0 = $conv;
    break;
   } else {
    $call3 = (___uflow($f)|0);
    $retval$0 = $call3;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $call6 = 0, $cmp = 0, $retval$0 = 0, $tobool = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_vsnprintf(0,0,$fmt,$ap2)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $add = (($call) + 1)|0;
  $call4 = (_malloc($add)|0);
  HEAP32[$s>>2] = $call4;
  $tobool = ($call4|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   $call6 = (_vsnprintf($call4,$add,$fmt,$ap)|0);
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp8 = 0, $cond = 0, $conv = 0, $incdec$ptr = 0, $lock = 0, $retval$1 = 0, $rpos = 0, $tobool = 0;
 var $tobool10 = 0, $tobool15 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(-1);
 do {
  if ($cmp) {
   $retval$1 = -1;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp1 = ($0|0)>(-1);
   if ($cmp1) {
    $call = (___lockfile($f)|0);
    $cond = $call;
   } else {
    $cond = 0;
   }
   $rpos = ((($f)) + 4|0);
   $1 = HEAP32[$rpos>>2]|0;
   $tobool = ($1|0)==(0|0);
   if ($tobool) {
    (___toread($f)|0);
    $$pr = HEAP32[$rpos>>2]|0;
    $tobool6 = ($$pr|0)==(0|0);
    if (!($tobool6)) {
     $3 = $$pr;
     label = 6;
    }
   } else {
    $3 = $1;
    label = 6;
   }
   if ((label|0) == 6) {
    $buf = ((($f)) + 44|0);
    $2 = HEAP32[$buf>>2]|0;
    $add$ptr = ((($2)) + -8|0);
    $cmp8 = ($3>>>0)>($add$ptr>>>0);
    if ($cmp8) {
     $conv = $c&255;
     $incdec$ptr = ((($3)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     HEAP8[$incdec$ptr>>0] = $conv;
     $4 = HEAP32[$f>>2]|0;
     $and = $4 & -17;
     HEAP32[$f>>2] = $and;
     $tobool15 = ($cond|0)==(0);
     if ($tobool15) {
      $retval$1 = $c;
      break;
     }
     ___unlockfile($f);
     $retval$1 = $c;
     break;
    }
   }
   $tobool10 = ($cond|0)==(0);
   if ($tobool10) {
    $retval$1 = -1;
   } else {
    ___unlockfile($f);
    $retval$1 = -1;
   }
  }
 } while(0);
 return ($retval$1|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[1825]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtox($s,$p,1));
 return (+$call);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $buf = 0, $call = 0.0, $cond = 0, $f = 0;
 var $lock = 0, $rend = 0, $rpos = 0, $shcnt = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $s;
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = (-1);
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 ___shlim($f,0,0);
 $call = (+___floatscan($f,$prec,1));
 $shcnt = ((($f)) + 120|0);
 $0 = $shcnt;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$rpos>>2]|0;
 $7 = HEAP32[$rend>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = (_i64Add(($2|0),($5|0),($sub$ptr$sub|0),($9|0))|0);
 $11 = (getTempRet0() | 0);
 $tobool = ($p|0)==(0|0);
 if (!($tobool)) {
  $12 = ($10|0)==(0);
  $13 = ($11|0)==(0);
  $14 = $12 & $13;
  $add$ptr = (($s) + ($10)|0);
  $cond = $14 ? $s : $add$ptr;
  HEAP32[$p>>2] = $cond;
 }
 STACKTOP = sp;return (+$call);
}
function _strtof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $call = 0.0, $conv = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtox($s,$p,0));
 $conv = $call;
 return (+$conv);
}
function _strtold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtox($s,$p,2));
 return (+$call);
}
function _strtof_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtof($s,$p));
 return (+$call);
}
function _strtod_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtod($s,$p));
 return (+$call);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtold($s,$p));
 return (+$call);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $d$addr$05 = 0, $dec = 0, $incdec$ptr = 0, $n$addr$04 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool3 = ($n|0)==(0);
 if (!($tobool3)) {
  $d$addr$05 = $d;$n$addr$04 = $n;
  while(1) {
   $dec = (($n$addr$04) + -1)|0;
   $incdec$ptr = ((($d$addr$05)) + 4|0);
   HEAP32[$d$addr$05>>2] = $c;
   $tobool = ($dec|0)==(0);
   if ($tobool) {
    break;
   } else {
    $d$addr$05 = $incdec$ptr;$n$addr$04 = $dec;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $d$addr$018 = 0, $dec14 = 0, $dec14$in = 0, $dec3 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $n$addr$117 = 0, $s$addr$016 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool4 = 0, $tobool415 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $d;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($n>>>0);
 if ($cmp) {
  $dec14$in = $n;
  while(1) {
   $dec14 = (($dec14$in) + -1)|0;
   $arrayidx = (($s) + ($dec14<<2)|0);
   $0 = HEAP32[$arrayidx>>2]|0;
   $arrayidx1 = (($d) + ($dec14<<2)|0);
   HEAP32[$arrayidx1>>2] = $0;
   $tobool = ($dec14|0)==(0);
   if ($tobool) {
    break;
   } else {
    $dec14$in = $dec14;
   }
  }
 } else {
  $tobool415 = ($n|0)==(0);
  if (!($tobool415)) {
   $d$addr$018 = $d;$n$addr$117 = $n;$s$addr$016 = $s;
   while(1) {
    $dec3 = (($n$addr$117) + -1)|0;
    $incdec$ptr = ((($s$addr$016)) + 4|0);
    $1 = HEAP32[$s$addr$016>>2]|0;
    $incdec$ptr6 = ((($d$addr$018)) + 4|0);
    HEAP32[$d$addr$018>>2] = $1;
    $tobool4 = ($dec3|0)==(0);
    if ($tobool4) {
     break;
    } else {
     $d$addr$018 = $incdec$ptr6;$n$addr$117 = $dec3;$s$addr$016 = $incdec$ptr;
    }
   }
  }
 }
 return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[4871]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (19524 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[4871] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(19492)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (19524 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[4871] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(19504)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (19524 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[4871] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(19492)>>2] = $sub91;
     HEAP32[(19504)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(19488)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (19788 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (19788 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(19488)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(19504)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (19524 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[4871] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(19492)>>2] = $rsize$0$i;
       HEAP32[(19504)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(19488)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (19788 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (19788 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(19492)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (19788 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(19488)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (19524 + ($shl288$i<<2)|0);
           $58 = HEAP32[4871]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[4871] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (19788 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(19488)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(19492)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(19504)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(19504)>>2] = $add$ptr166;
   HEAP32[(19492)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(19492)>>2] = 0;
   HEAP32[(19504)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(19496)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(19496)>>2] = $sub190;
  $71 = HEAP32[(19508)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(19508)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[4989]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(19964)>>2] = 4096;
  HEAP32[(19960)>>2] = 4096;
  HEAP32[(19968)>>2] = -1;
  HEAP32[(19972)>>2] = -1;
  HEAP32[(19976)>>2] = 0;
  HEAP32[(19928)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[4989] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(19964)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(19924)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(19916)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(19928)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(19508)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (19932);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk(($and80$i|0))|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(19960)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(19916)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(19924)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($spec$select96$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(19964)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(19928)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(19928)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(19916)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(19916)>>2] = $add150$i;
  $91 = HEAP32[(19920)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(19920)>>2] = $add150$i;
  }
  $92 = HEAP32[(19508)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(19500)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(19500)>>2] = $tbase$795$i;
    }
    HEAP32[(19932)>>2] = $tbase$795$i;
    HEAP32[(19936)>>2] = $tsize$794$i;
    HEAP32[(19944)>>2] = 0;
    $94 = HEAP32[4989]|0;
    HEAP32[(19520)>>2] = $94;
    HEAP32[(19516)>>2] = -1;
    HEAP32[(19536)>>2] = (19524);
    HEAP32[(19532)>>2] = (19524);
    HEAP32[(19544)>>2] = (19532);
    HEAP32[(19540)>>2] = (19532);
    HEAP32[(19552)>>2] = (19540);
    HEAP32[(19548)>>2] = (19540);
    HEAP32[(19560)>>2] = (19548);
    HEAP32[(19556)>>2] = (19548);
    HEAP32[(19568)>>2] = (19556);
    HEAP32[(19564)>>2] = (19556);
    HEAP32[(19576)>>2] = (19564);
    HEAP32[(19572)>>2] = (19564);
    HEAP32[(19584)>>2] = (19572);
    HEAP32[(19580)>>2] = (19572);
    HEAP32[(19592)>>2] = (19580);
    HEAP32[(19588)>>2] = (19580);
    HEAP32[(19600)>>2] = (19588);
    HEAP32[(19596)>>2] = (19588);
    HEAP32[(19608)>>2] = (19596);
    HEAP32[(19604)>>2] = (19596);
    HEAP32[(19616)>>2] = (19604);
    HEAP32[(19612)>>2] = (19604);
    HEAP32[(19624)>>2] = (19612);
    HEAP32[(19620)>>2] = (19612);
    HEAP32[(19632)>>2] = (19620);
    HEAP32[(19628)>>2] = (19620);
    HEAP32[(19640)>>2] = (19628);
    HEAP32[(19636)>>2] = (19628);
    HEAP32[(19648)>>2] = (19636);
    HEAP32[(19644)>>2] = (19636);
    HEAP32[(19656)>>2] = (19644);
    HEAP32[(19652)>>2] = (19644);
    HEAP32[(19664)>>2] = (19652);
    HEAP32[(19660)>>2] = (19652);
    HEAP32[(19672)>>2] = (19660);
    HEAP32[(19668)>>2] = (19660);
    HEAP32[(19680)>>2] = (19668);
    HEAP32[(19676)>>2] = (19668);
    HEAP32[(19688)>>2] = (19676);
    HEAP32[(19684)>>2] = (19676);
    HEAP32[(19696)>>2] = (19684);
    HEAP32[(19692)>>2] = (19684);
    HEAP32[(19704)>>2] = (19692);
    HEAP32[(19700)>>2] = (19692);
    HEAP32[(19712)>>2] = (19700);
    HEAP32[(19708)>>2] = (19700);
    HEAP32[(19720)>>2] = (19708);
    HEAP32[(19716)>>2] = (19708);
    HEAP32[(19728)>>2] = (19716);
    HEAP32[(19724)>>2] = (19716);
    HEAP32[(19736)>>2] = (19724);
    HEAP32[(19732)>>2] = (19724);
    HEAP32[(19744)>>2] = (19732);
    HEAP32[(19740)>>2] = (19732);
    HEAP32[(19752)>>2] = (19740);
    HEAP32[(19748)>>2] = (19740);
    HEAP32[(19760)>>2] = (19748);
    HEAP32[(19756)>>2] = (19748);
    HEAP32[(19768)>>2] = (19756);
    HEAP32[(19764)>>2] = (19756);
    HEAP32[(19776)>>2] = (19764);
    HEAP32[(19772)>>2] = (19764);
    HEAP32[(19784)>>2] = (19772);
    HEAP32[(19780)>>2] = (19772);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(19508)>>2] = $add$ptr4$i49$i;
    HEAP32[(19496)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(19972)>>2]|0;
    HEAP32[(19512)>>2] = $96;
   } else {
    $sp$0112$i = (19932);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(19496)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(19508)>>2] = $add$ptr4$i41$i;
       HEAP32[(19496)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(19972)>>2]|0;
       HEAP32[(19512)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(19500)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(19500)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (19932);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(19496)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(19496)>>2] = $add$i$i;
        HEAP32[(19508)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(19504)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(19492)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(19492)>>2] = $add26$i$i;
         HEAP32[(19504)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[4871]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[4871] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (19788 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(19488)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(19488)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (19524 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[4871]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[4871] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (19788 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(19488)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(19488)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (19932);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(19508)>>2] = $add$ptr4$i$i$i;
    HEAP32[(19496)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(19972)>>2]|0;
    HEAP32[(19512)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(19932)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(19932)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(19932)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(19932)+12>>2]|0;
    HEAP32[(19932)>>2] = $tbase$795$i;
    HEAP32[(19936)>>2] = $tsize$794$i;
    HEAP32[(19944)>>2] = 0;
    HEAP32[(19940)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (19524 + ($shl$i$i<<2)|0);
      $149 = HEAP32[4871]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[4871] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (19788 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(19488)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(19488)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(19496)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(19496)>>2] = $sub260$i;
   $159 = HEAP32[(19508)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(19508)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(19500)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(19504)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(19492)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[4871]|0;
     $and46 = $6 & $neg;
     HEAP32[4871] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (19788 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(19488)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(19488)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(19508)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(19496)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(19496)>>2] = $add246;
   HEAP32[(19508)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(19504)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(19504)>>2] = 0;
   HEAP32[(19492)>>2] = 0;
   return;
  }
  $26 = HEAP32[(19504)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(19492)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(19492)>>2] = $add258;
   HEAP32[(19504)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[4871]|0;
     $and301 = $30 & $neg300;
     HEAP32[4871] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (19788 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(19488)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(19488)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(19504)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(19492)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (19524 + ($shl508<<2)|0);
  $45 = HEAP32[4871]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[4871] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (19788 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(19488)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(19488)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(19516)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(19516)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (19940);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(19516)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(19964)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(19508)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(19496)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(19508)>>2] = $add$ptr41;
  HEAP32[(19496)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(19504)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(19492)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(19492)>>2] = $storemerge1;
  HEAP32[(19504)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[4871]|0;
    $and128 = $12 & $neg;
    HEAP32[4871] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (19788 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(19488)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(19488)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(19504)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(19492)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[4871]|0;
     $and32 = $5 & $neg;
     HEAP32[4871] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (19788 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(19488)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(19488)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(19508)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(19496)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(19496)>>2] = $add230;
   HEAP32[(19508)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(19504)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(19504)>>2] = 0;
   HEAP32[(19492)>>2] = 0;
   return;
  }
  $24 = HEAP32[(19504)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(19492)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(19492)>>2] = $add248;
   HEAP32[(19504)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[4871]|0;
     $and295 = $28 & $neg293;
     HEAP32[4871] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (19788 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(19488)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(19488)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(19504)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(19492)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (19524 + ($shl515<<2)|0);
  $43 = HEAP32[4871]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[4871] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (19788 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(19488)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(19488)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function _pthread_mutex_lock($mutex) {
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _pthread_mutex_unlock($mutex) {
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZSt18uncaught_exceptionv() {
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZSt19uncaught_exceptionsv()|0);
 $cmp = ($call|0)>(0);
 return ($cmp|0);
}
function __ZSt19uncaught_exceptionsv() {
 var $call = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_uncaught_exception()|0);
 $cond = $call&1;
 return ($cond|0);
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}
function __ZNSt3__28ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__fn_ = 0, $__iarray_ = 0, $__index_ = 0, $__loc_ = 0, $__parray_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7580);
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this,0);
 $__loc_ = ((($this)) + 28|0);
 __ZNSt3__26localeD2Ev($__loc_);
 $__fn_ = ((($this)) + 32|0);
 $0 = HEAP32[$__fn_>>2]|0;
 _free($0);
 $__index_ = ((($this)) + 36|0);
 $1 = HEAP32[$__index_>>2]|0;
 _free($1);
 $__iarray_ = ((($this)) + 48|0);
 $2 = HEAP32[$__iarray_>>2]|0;
 _free($2);
 $__parray_ = ((($this)) + 60|0);
 $3 = HEAP32[$__parray_>>2]|0;
 _free($3);
 return;
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__event_size_ = 0, $__fn_ = 0, $__index_ = 0, $arrayidx = 0, $arrayidx2 = 0, $dec = 0, $i$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__event_size_ = ((($this)) + 40|0);
 $0 = HEAP32[$__event_size_>>2]|0;
 $__fn_ = ((($this)) + 32|0);
 $__index_ = ((($this)) + 36|0);
 $i$0 = $0;
 while(1) {
  $tobool = ($i$0|0)==(0);
  if ($tobool) {
   break;
  }
  $dec = (($i$0) + -1)|0;
  $1 = HEAP32[$__fn_>>2]|0;
  $arrayidx = (($1) + ($dec<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $3 = HEAP32[$__index_>>2]|0;
  $arrayidx2 = (($3) + ($dec<<2)|0);
  $4 = HEAP32[$arrayidx2>>2]|0;
  FUNCTION_TABLE_viii[$2 & 0]($ev,$this,$4);
  $i$0 = $dec;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7596);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeD2Ev($__loc_);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $8 = $__off_$i;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $6 = $__off_$i;
 $7 = $6;
 HEAP32[$7>>2] = -1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__einp_ = 0, $__i$0 = 0, $__i$1 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $add$ptr = 0, $add$ptr$i = 0, $call11 = 0, $call14 = 0, $cmp = 0, $cmp$i$i$i = 0;
 var $cmp12 = 0, $cmp2 = 0, $incdec$ptr = 0, $sub = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__ninp_ = ((($this)) + 12|0);
 $__einp_ = ((($this)) + 16|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__ninp_>>2]|0;
  $1 = HEAP32[$__einp_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $2 = $0;
   $3 = $1;
   $sub$ptr$sub = (($3) - ($2))|0;
   $sub = (($__n) - ($__i$0))|0;
   $cmp$i$i$i = ($sub|0)<($sub$ptr$sub|0);
   $4 = $cmp$i$i$i ? $sub : $sub$ptr$sub;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__s$addr$0,$0,$4)|0);
   $add$ptr = (($__s$addr$0) + ($4)|0);
   $5 = HEAP32[$__ninp_>>2]|0;
   $add$ptr$i = (($5) + ($4)|0);
   HEAP32[$__ninp_>>2] = $add$ptr$i;
   $$pn = $4;$__s$addr$1 = $add$ptr;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 40|0);
   $6 = HEAP32[$vfn>>2]|0;
   $call11 = (FUNCTION_TABLE_ii[$6 & 511]($this)|0);
   $cmp12 = ($call11|0)==(-1);
   if ($cmp12) {
    break;
   }
   $call14 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($call11)|0);
   HEAP8[$__s$addr$0>>0] = $call14;
   $incdec$ptr = ((($__s$addr$0)) + 1|0);
   $$pn = 1;$__s$addr$1 = $incdec$ptr;
  }
  $__i$1 = (($$pn) + ($__i$0))|0;
  $__i$0 = $__i$1;$__s$addr$0 = $__s$addr$1;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__ninp_ = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $incdec$ptr = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 36|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $cmp = ($call|0)==($call2|0);
 if ($cmp) {
  $call3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $retval$0 = $call3;
 } else {
  $__ninp_ = ((($this)) + 12|0);
  $1 = HEAP32[$__ninp_>>2]|0;
  $incdec$ptr = ((($1)) + 1|0);
  HEAP32[$__ninp_>>2] = $incdec$ptr;
  $2 = HEAP8[$1>>0]|0;
  $call4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $retval$0 = $call4;
 }
 return ($retval$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $add = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call3 = 0, $call4 = 0;
 var $cmp = 0, $cmp$i$i$i = 0, $cmp2 = 0, $cmp5 = 0, $inc = 0, $incdec$ptr = 0, $sub = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__nout_ = ((($this)) + 24|0);
 $__eout_ = ((($this)) + 28|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__nout_>>2]|0;
  $1 = HEAP32[$__eout_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $4 = $0;
   $5 = $1;
   $sub$ptr$sub = (($5) - ($4))|0;
   $sub = (($__n) - ($__i$0))|0;
   $cmp$i$i$i = ($sub|0)<($sub$ptr$sub|0);
   $$sroa$speculated = $cmp$i$i$i ? $sub : $sub$ptr$sub;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$__s$addr$0,$$sroa$speculated)|0);
   $6 = HEAP32[$__nout_>>2]|0;
   $add$ptr = (($6) + ($$sroa$speculated)|0);
   HEAP32[$__nout_>>2] = $add$ptr;
   $add$ptr14 = (($__s$addr$0) + ($$sroa$speculated)|0);
   $add = (($$sroa$speculated) + ($__i$0))|0;
   $__i$0$be = $add;$__s$addr$0$be = $add$ptr14;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 52|0);
   $2 = HEAP32[$vfn>>2]|0;
   $3 = HEAP8[$__s$addr$0>>0]|0;
   $call3 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($3)|0);
   $call4 = (FUNCTION_TABLE_iii[$2 & 511]($this,$call3)|0);
   $cmp5 = ($call4|0)==($call|0);
   if ($cmp5) {
    break;
   }
   $incdec$ptr = ((($__s$addr$0)) + 1|0);
   $inc = (($__i$0) + 1)|0;
   $__i$0$be = $inc;$__s$addr$0$be = $incdec$ptr;
  }
  $__i$0 = $__i$0$be;$__s$addr$0 = $__s$addr$0$be;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $__c&255;
 return ($conv|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memcpy(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $__c&255;
 return ($conv|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7660);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeD2Ev($__loc_);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $8 = $__off_$i;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $6 = $__off_$i;
 $7 = $6;
 HEAP32[$7>>2] = -1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__einp_ = 0, $__i$0 = 0, $__i$1 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $add$ptr = 0, $add$ptr$i = 0, $call11 = 0, $call14 = 0, $cmp = 0, $cmp$i$i$i = 0;
 var $cmp12 = 0, $cmp2 = 0, $incdec$ptr = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $__ninp_ = ((($this)) + 12|0);
 $__einp_ = ((($this)) + 16|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__ninp_>>2]|0;
  $1 = HEAP32[$__einp_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $2 = $0;
   $3 = $1;
   $sub$ptr$sub = (($3) - ($2))|0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   $sub = (($__n) - ($__i$0))|0;
   $cmp$i$i$i = ($sub|0)<($sub$ptr$div|0);
   $4 = $cmp$i$i$i ? $sub : $sub$ptr$div;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($__s$addr$0,$0,$4)|0);
   $add$ptr = (($__s$addr$0) + ($4<<2)|0);
   $5 = HEAP32[$__ninp_>>2]|0;
   $add$ptr$i = (($5) + ($4<<2)|0);
   HEAP32[$__ninp_>>2] = $add$ptr$i;
   $$pn = $4;$__s$addr$1 = $add$ptr;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 40|0);
   $6 = HEAP32[$vfn>>2]|0;
   $call11 = (FUNCTION_TABLE_ii[$6 & 511]($this)|0);
   $cmp12 = ($call11|0)==(-1);
   if ($cmp12) {
    break;
   }
   $call14 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($call11)|0);
   HEAP32[$__s$addr$0>>2] = $call14;
   $incdec$ptr = ((($__s$addr$0)) + 4|0);
   $$pn = 1;$__s$addr$1 = $incdec$ptr;
  }
  $__i$1 = (($$pn) + ($__i$0))|0;
  $__i$0 = $__i$1;$__s$addr$0 = $__s$addr$1;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__ninp_ = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $incdec$ptr = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 36|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $cmp = ($call|0)==($call2|0);
 if ($cmp) {
  $call3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $retval$0 = $call3;
 } else {
  $__ninp_ = ((($this)) + 12|0);
  $1 = HEAP32[$__ninp_>>2]|0;
  $incdec$ptr = ((($1)) + 4|0);
  HEAP32[$__ninp_>>2] = $incdec$ptr;
  $2 = HEAP32[$1>>2]|0;
  $call4 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($2)|0);
  $retval$0 = $call4;
 }
 return ($retval$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $add = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call3 = 0, $call4 = 0;
 var $cmp = 0, $cmp$i$i$i = 0, $cmp2 = 0, $cmp5 = 0, $inc = 0, $incdec$ptr = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $__nout_ = ((($this)) + 24|0);
 $__eout_ = ((($this)) + 28|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__nout_>>2]|0;
  $1 = HEAP32[$__eout_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $4 = $0;
   $5 = $1;
   $sub$ptr$sub = (($5) - ($4))|0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   $sub = (($__n) - ($__i$0))|0;
   $cmp$i$i$i = ($sub|0)<($sub$ptr$div|0);
   $$sroa$speculated = $cmp$i$i$i ? $sub : $sub$ptr$div;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($0,$__s$addr$0,$$sroa$speculated)|0);
   $6 = HEAP32[$__nout_>>2]|0;
   $add$ptr = (($6) + ($$sroa$speculated<<2)|0);
   HEAP32[$__nout_>>2] = $add$ptr;
   $add$ptr14 = (($__s$addr$0) + ($$sroa$speculated<<2)|0);
   $add = (($$sroa$speculated) + ($__i$0))|0;
   $__i$0$be = $add;$__s$addr$0$be = $add$ptr14;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 52|0);
   $2 = HEAP32[$vfn>>2]|0;
   $3 = HEAP32[$__s$addr$0>>2]|0;
   $call3 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($3)|0);
   $call4 = (FUNCTION_TABLE_iii[$2 & 511]($this,$call3)|0);
   $cmp5 = ($call4|0)==($call|0);
   if ($cmp5) {
    break;
   }
   $incdec$ptr = ((($__s$addr$0)) + 4|0);
   $inc = (($__i$0) + 1)|0;
   $__i$0$be = $inc;$__s$addr$0$be = $incdec$ptr;
  }
  $__i$0 = $__i$0$be;$__s$addr$0 = $__s$addr$0$be;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($__c) {
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($__c|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s1;
 } else {
  $call = (_wmemcpy($__s1,$__s2,$__n)|0);
  $cond = $__s1;
 }
 return ($cond|0);
}
function __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) {
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($__c|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this,7756);
 $0 = ((($this)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this,7804);
 $0 = ((($this)) + 8|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,7852);
 $0 = ((($this)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this,7900);
 $0 = ((($this)) + 4|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $__rdbuf_ = 0, $or = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__rdbuf_ = ((($this)) + 24|0);
 $0 = HEAP32[$__rdbuf_>>2]|0;
 $tobool = ($0|0)==(0|0);
 $or = $tobool&1;
 $spec$select = $or | $state;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $spec$select;
 return;
}
function __ZNSt3__28ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $__exceptions_ = 0, $__fmtflags_ = 0, $__fn_ = 0, $__loc_ = 0, $__precision_ = 0, $__rdbuf_ = 0, $__rdstate_ = 0, $__width_ = 0, $cond = 0, $tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $__rdbuf_ = ((($this)) + 24|0);
 HEAP32[$__rdbuf_>>2] = $sb;
 $tobool = ($sb|0)==(0|0);
 $cond = $tobool&1;
 $__rdstate_ = ((($this)) + 16|0);
 HEAP32[$__rdstate_>>2] = $cond;
 $__exceptions_ = ((($this)) + 20|0);
 HEAP32[$__exceptions_>>2] = 0;
 $__fmtflags_ = ((($this)) + 4|0);
 HEAP32[$__fmtflags_>>2] = 4098;
 $__width_ = ((($this)) + 12|0);
 HEAP32[$__width_>>2] = 0;
 $__precision_ = ((($this)) + 8|0);
 HEAP32[$__precision_>>2] = 6;
 $__fn_ = ((($this)) + 32|0);
 $__loc_ = ((($this)) + 28|0);
 dest=$__fn_; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($__loc_);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc_ = ((($this)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($agg$result,$__loc_);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__c1|0)==($__c2|0);
 return ($cmp|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $__binp_ = 0, $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7596);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeC2Ev($__loc_);
 $__binp_ = ((($this)) + 8|0);
 ;HEAP32[$__binp_>>2]=0|0;HEAP32[$__binp_+4>>2]=0|0;HEAP32[$__binp_+8>>2]=0|0;HEAP32[$__binp_+12>>2]=0|0;HEAP32[$__binp_+16>>2]=0|0;HEAP32[$__binp_+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $__binp_ = 0, $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7660);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeC2Ev($__loc_);
 $__binp_ = ((($this)) + 8|0);
 ;HEAP32[$__binp_>>2]=0|0;HEAP32[$__binp_+4>>2]=0|0;HEAP32[$__binp_+8>>2]=0|0;HEAP32[$__binp_+12>>2]=0|0;HEAP32[$__binp_+16>>2]=0|0;HEAP32[$__binp_+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i1 = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr = 0, $add$ptr14 = 0, $add$ptr7 = 0, $call$i = 0, $cmp = 0, $or$i$i = 0, $tobool = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr12 = 0;
 var $vbase$offset$ptr5 = 0, $vbase$offset13 = 0, $vbase$offset6 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable11 = 0, $vtable4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__s = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($this) + ($vbase$offset)|0);
 $__rdbuf_$i$i = ((($add$ptr)) + 24|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
  $1 = HEAP8[$__s>>0]|0;
  $tobool$i = ($1<<24>>24)==(0);
  if (!($tobool$i)) {
   $vtable4 = HEAP32[$this>>2]|0;
   $vbase$offset$ptr5 = ((($vtable4)) + -12|0);
   $vbase$offset6 = HEAP32[$vbase$offset$ptr5>>2]|0;
   $add$ptr7 = (($this) + ($vbase$offset6)|0);
   $__rdbuf_$i$i1 = ((($add$ptr7)) + 24|0);
   $2 = HEAP32[$__rdbuf_$i$i1>>2]|0;
   $vtable$i = HEAP32[$2>>2]|0;
   $vfn$i = ((($vtable$i)) + 24|0);
   $3 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_ii[$3 & 511]($2)|0);
   $cmp = ($call$i|0)==(-1);
   if ($cmp) {
    $vtable11 = HEAP32[$this>>2]|0;
    $vbase$offset$ptr12 = ((($vtable11)) + -12|0);
    $vbase$offset13 = HEAP32[$vbase$offset$ptr12>>2]|0;
    $add$ptr14 = (($this) + ($vbase$offset13)|0);
    $__rdstate_$i$i = ((($add$ptr14)) + 16|0);
    $4 = HEAP32[$__rdstate_$i$i>>2]|0;
    $or$i$i = $4 | 1;
    __ZNSt3__28ios_base5clearEj($add$ptr14,$or$i$i);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $__os_ = 0, $__rdstate_$i$i = 0, $__tie_$i = 0, $add$ptr = 0, $cmp$i$i = 0, $tobool = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $__os_ = ((($this)) + 4|0);
 HEAP32[$__os_>>2] = $__os;
 $vtable = HEAP32[$__os>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($__os) + ($vbase$offset)|0);
 $__rdstate_$i$i = ((($add$ptr)) + 16|0);
 $0 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($0|0)==(0);
 if ($cmp$i$i) {
  $__tie_$i = ((($add$ptr)) + 72|0);
  $1 = HEAP32[$__tie_$i>>2]|0;
  $tobool = ($1|0)==(0|0);
  if (!($tobool)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($1)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__fmtflags_$i = 0, $__os_ = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i2 = 0, $__rdstate_$i$i = 0, $__rdstate_$i$i1 = 0, $add$ptr = 0, $add$ptr22 = 0, $add$ptr30 = 0, $and = 0, $call$i = 0;
 var $call17 = 0, $cmp = 0, $cmp$i$i = 0, $or$i$i = 0, $tobool = 0, $tobool15 = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr20 = 0, $vbase$offset$ptr28 = 0, $vbase$offset21 = 0, $vbase$offset29 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable19 = 0, $vtable27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__os_ = ((($this)) + 4|0);
 $0 = HEAP32[$__os_>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($0) + ($vbase$offset)|0);
 $__rdbuf_$i$i = ((($add$ptr)) + 24|0);
 $1 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $__rdstate_$i$i1 = ((($add$ptr)) + 16|0);
  $2 = HEAP32[$__rdstate_$i$i1>>2]|0;
  $cmp$i$i = ($2|0)==(0);
  if ($cmp$i$i) {
   $__fmtflags_$i = ((($add$ptr)) + 4|0);
   $3 = HEAP32[$__fmtflags_$i>>2]|0;
   $and = $3 & 8192;
   $tobool15 = ($and|0)==(0);
   if (!($tobool15)) {
    $call17 = (__ZSt18uncaught_exceptionv()|0);
    if (!($call17)) {
     $4 = HEAP32[$__os_>>2]|0;
     $vtable19 = HEAP32[$4>>2]|0;
     $vbase$offset$ptr20 = ((($vtable19)) + -12|0);
     $vbase$offset21 = HEAP32[$vbase$offset$ptr20>>2]|0;
     $add$ptr22 = (($4) + ($vbase$offset21)|0);
     $__rdbuf_$i$i2 = ((($add$ptr22)) + 24|0);
     $5 = HEAP32[$__rdbuf_$i$i2>>2]|0;
     $vtable$i = HEAP32[$5>>2]|0;
     $vfn$i = ((($vtable$i)) + 24|0);
     $6 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_ii[$6 & 511]($5)|0);
     $cmp = ($call$i|0)==(-1);
     if ($cmp) {
      $7 = HEAP32[$__os_>>2]|0;
      $vtable27 = HEAP32[$7>>2]|0;
      $vbase$offset$ptr28 = ((($vtable27)) + -12|0);
      $vbase$offset29 = HEAP32[$vbase$offset$ptr28>>2]|0;
      $add$ptr30 = (($7) + ($vbase$offset29)|0);
      $__rdstate_$i$i = ((($add$ptr30)) + 16|0);
      $8 = HEAP32[$__rdstate_$i$i>>2]|0;
      $or$i$i = $8 | 1;
      __ZNSt3__28ios_base5clearEj($add$ptr30,$or$i$i);
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $__rdstate_ = 0, $or = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__rdstate_ = ((($this)) + 16|0);
 $0 = HEAP32[$__rdstate_>>2]|0;
 $or = $0 | 1;
 HEAP32[$__rdstate_>>2] = $or;
 return;
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__fmtflags_$i$i = 0, $__fmtflags_$i$i22 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i19 = 0, $__tie_$i = 0, $__tie_$i21 = 0, $__tie_$i24 = 0, $__tie_$i25 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr15 = 0, $add$ptr20 = 0, $add$ptr25 = 0;
 var $add$ptr30 = 0, $add$ptr35 = 0, $add$ptr5 = 0, $call$i$i = 0, $call$i$i13 = 0, $call$i$i14 = 0, $call$i$i15 = 0, $call$i$i16 = 0, $call$i$i17 = 0, $call$i$i18 = 0, $call$i$i20 = 0, $or$i$i = 0, $or$i$i23 = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr13 = 0, $vbase$offset$ptr18 = 0, $vbase$offset$ptr23 = 0, $vbase$offset$ptr3 = 0, $vbase$offset$ptr8 = 0;
 var $vbase$offset14 = 0, $vbase$offset19 = 0, $vbase$offset24 = 0, $vbase$offset29 = 0, $vbase$offset34 = 0, $vbase$offset4 = 0, $vbase$offset9 = 0, $vtable = 0, $vtable12 = 0, $vtable17 = 0, $vtable2 = 0, $vtable22 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1824]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(20660,$0,20716);
 HEAP32[4995] = (7728);
 HEAP32[(19988)>>2] = (7748);
 HEAP32[(19984)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((19988),20660);
 HEAP32[(20060)>>2] = 0;
 $call$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(20064)>>2] = $call$i$i;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(20724,$0,20780);
 HEAP32[5017] = (7776);
 HEAP32[(20076)>>2] = (7796);
 HEAP32[(20072)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((20076),20724);
 HEAP32[(20148)>>2] = 0;
 $call$i$i13 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20152)>>2] = $call$i$i13;
 $1 = HEAP32[1825]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(20788,$1,20836);
 HEAP32[5039] = (7824);
 HEAP32[(20160)>>2] = (7844);
 __ZNSt3__28ios_base4initEPv((20160),20788);
 HEAP32[(20232)>>2] = 0;
 $call$i$i14 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(20236)>>2] = $call$i$i14;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(20844,$1,20892);
 HEAP32[5060] = (7872);
 HEAP32[(20244)>>2] = (7892);
 __ZNSt3__28ios_base4initEPv((20244),20844);
 HEAP32[(20316)>>2] = 0;
 $call$i$i15 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20320)>>2] = $call$i$i15;
 $2 = HEAP32[1823]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(20900,$2,20948);
 HEAP32[5081] = (7824);
 HEAP32[(20328)>>2] = (7844);
 __ZNSt3__28ios_base4initEPv((20328),20900);
 HEAP32[(20400)>>2] = 0;
 $call$i$i16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(20404)>>2] = $call$i$i16;
 $vtable = HEAP32[5081]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (20324 + ($vbase$offset)|0);
 $__rdbuf_$i$i = ((($add$ptr)) + 24|0);
 $3 = HEAP32[$__rdbuf_$i$i>>2]|0;
 HEAP32[5123] = (7824);
 HEAP32[(20496)>>2] = (7844);
 __ZNSt3__28ios_base4initEPv((20496),$3);
 HEAP32[(20568)>>2] = 0;
 $call$i$i17 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(20572)>>2] = $call$i$i17;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(20956,$2,21004);
 HEAP32[5102] = (7872);
 HEAP32[(20412)>>2] = (7892);
 __ZNSt3__28ios_base4initEPv((20412),20956);
 HEAP32[(20484)>>2] = 0;
 $call$i$i18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20488)>>2] = $call$i$i18;
 $vtable2 = HEAP32[5102]|0;
 $vbase$offset$ptr3 = ((($vtable2)) + -12|0);
 $vbase$offset4 = HEAP32[$vbase$offset$ptr3>>2]|0;
 $add$ptr5 = (20408 + ($vbase$offset4)|0);
 $__rdbuf_$i$i19 = ((($add$ptr5)) + 24|0);
 $4 = HEAP32[$__rdbuf_$i$i19>>2]|0;
 HEAP32[5144] = (7872);
 HEAP32[(20580)>>2] = (7892);
 __ZNSt3__28ios_base4initEPv((20580),$4);
 HEAP32[(20652)>>2] = 0;
 $call$i$i20 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20656)>>2] = $call$i$i20;
 $vtable7 = HEAP32[4995]|0;
 $vbase$offset$ptr8 = ((($vtable7)) + -12|0);
 $vbase$offset9 = HEAP32[$vbase$offset$ptr8>>2]|0;
 $add$ptr10 = (19980 + ($vbase$offset9)|0);
 $__tie_$i = ((($add$ptr10)) + 72|0);
 HEAP32[$__tie_$i>>2] = 20156;
 $vtable12 = HEAP32[5017]|0;
 $vbase$offset$ptr13 = ((($vtable12)) + -12|0);
 $vbase$offset14 = HEAP32[$vbase$offset$ptr13>>2]|0;
 $add$ptr15 = (20068 + ($vbase$offset14)|0);
 $__tie_$i21 = ((($add$ptr15)) + 72|0);
 HEAP32[$__tie_$i21>>2] = 20240;
 $vtable17 = HEAP32[5081]|0;
 $vbase$offset$ptr18 = ((($vtable17)) + -12|0);
 $vbase$offset19 = HEAP32[$vbase$offset$ptr18>>2]|0;
 $add$ptr20 = (20324 + ($vbase$offset19)|0);
 $__fmtflags_$i$i = ((($add$ptr20)) + 4|0);
 $5 = HEAP32[$__fmtflags_$i$i>>2]|0;
 $or$i$i = $5 | 8192;
 HEAP32[$__fmtflags_$i$i>>2] = $or$i$i;
 $vtable22 = HEAP32[5102]|0;
 $vbase$offset$ptr23 = ((($vtable22)) + -12|0);
 $vbase$offset24 = HEAP32[$vbase$offset$ptr23>>2]|0;
 $add$ptr25 = (20408 + ($vbase$offset24)|0);
 $__fmtflags_$i$i22 = ((($add$ptr25)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i$i22>>2]|0;
 $or$i$i23 = $6 | 8192;
 HEAP32[$__fmtflags_$i$i22>>2] = $or$i$i23;
 $vbase$offset29 = HEAP32[$vbase$offset$ptr18>>2]|0;
 $add$ptr30 = (20324 + ($vbase$offset29)|0);
 $__tie_$i24 = ((($add$ptr30)) + 72|0);
 HEAP32[$__tie_$i24>>2] = 20156;
 $vbase$offset34 = HEAP32[$vbase$offset$ptr23>>2]|0;
 $add$ptr35 = (20408 + ($vbase$offset34)|0);
 $__tie_$i25 = ((($add$ptr35)) + 72|0);
 HEAP32[$__tie_$i25>>2] = 20240;
 return;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $__file_ = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__loc_$i = 0, $__st_ = 0, $call = 0, $ref$tmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (8108);
 $__file_ = ((($this)) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__st_ = ((($this)) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__last_consumed_ = ((($this)) + 48|0);
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[$__last_consumed_>>2] = $call;
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 HEAP8[$__last_consumed_is_next_>>0] = 0;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $__loc_$i = ((($this)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($ref$tmp,$__loc_$i);
 FUNCTION_TABLE_vii[$0 & 511]($this,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $__file_ = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__loc_$i = 0, $__st_ = 0, $call = 0, $ref$tmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (8044);
 $__file_ = ((($this)) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__st_ = ((($this)) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__last_consumed_ = ((($this)) + 48|0);
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[$__last_consumed_>>2] = $call;
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 HEAP8[$__last_consumed_is_next_>>0] = 0;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $__loc_$i = ((($this)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($ref$tmp,$__loc_$i);
 FUNCTION_TABLE_vii[$0 & 511]($this,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__file_ = 0, $__loc_$i = 0, $__st_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $ref$tmp = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (7980);
 $__file_ = ((($this)) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__cv_ = ((($this)) + 36|0);
 $__loc_$i = ((($this)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($ref$tmp,$__loc_$i);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21332)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__cv_>>2] = $call$i;
 $__st_ = ((($this)) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__always_noconv_ = ((($this)) + 44|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 28|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__file_ = 0, $__loc_$i = 0, $__st_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $ref$tmp = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (7916);
 $__file_ = ((($this)) + 32|0);
 HEAP32[$__file_>>2] = $__fp;
 $__cv_ = ((($this)) + 36|0);
 $__loc_$i = ((($this)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($ref$tmp,$__loc_$i);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21340)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__cv_>>2] = $call$i;
 $__st_ = ((($this)) + 40|0);
 HEAP32[$__st_>>2] = $__st;
 $__always_noconv_ = ((($this)) + 44|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 28|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $__always_noconv_ = 0, $__cv_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $vfn = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $0 = HEAP32[$vfn>>2]|0;
 (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21340)|0);
 $__cv_ = ((($this)) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 28|0);
 $1 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$1 & 511]($call$i)|0);
 $__always_noconv_ = ((($this)) + 44|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $call12 = 0, $call5 = 0, $cmp = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 var $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $__cv_ = ((($this)) + 36|0);
 $__st_ = ((($this)) + 40|0);
 $add$ptr = ((($__extbuf)) + 8|0);
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = ((($this)) + 32|0);
 L1: while(1) {
  $0 = HEAP32[$__cv_>>2]|0;
  $1 = HEAP32[$__st_>>2]|0;
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = ((($vtable$i)) + 20|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiiiii[$2 & 511]($0,$1,$__extbuf,$add$ptr,$__extbe)|0);
  $3 = HEAP32[$__extbe>>2]|0;
  $sub$ptr$sub = (($3) - ($sub$ptr$rhs$cast))|0;
  $4 = HEAP32[$__file_>>2]|0;
  $call5 = (_fwrite($__extbuf,1,$sub$ptr$sub,$4)|0);
  $cmp = ($call5|0)==($sub$ptr$sub|0);
  if (!($cmp)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $retval$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $5 = HEAP32[$__file_>>2]|0;
  $call12 = (_fflush($5)|0);
  $tobool = ($call12|0)!=(0);
  $$5 = $tobool << 31 >> 31;
  $retval$2 = $$5;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__file_ = 0, $__i$0 = 0, $__s$addr$0 = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $__always_noconv_ = ((($this)) + 44|0);
 $0 = HEAP8[$__always_noconv_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 L1: do {
  if ($tobool) {
   $__i$0 = 0;$__s$addr$0 = $__s;
   while(1) {
    $cmp = ($__i$0|0)<($__n|0);
    if (!($cmp)) {
     $retval$0 = $__i$0;
     break L1;
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 52|0);
    $2 = HEAP32[$vfn>>2]|0;
    $3 = HEAP32[$__s$addr$0>>2]|0;
    $call2 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($3)|0);
    $call3 = (FUNCTION_TABLE_iii[$2 & 511]($this,$call2)|0);
    $call4 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $cmp5 = ($call3|0)==($call4|0);
    if ($cmp5) {
     $retval$0 = $__i$0;
     break L1;
    }
    $inc = (($__i$0) + 1)|0;
    $incdec$ptr = ((($__s$addr$0)) + 4|0);
    $__i$0 = $inc;$__s$addr$0 = $incdec$ptr;
   }
  } else {
   $__file_ = ((($this)) + 32|0);
   $1 = HEAP32[$__file_>>2]|0;
   $call = (_fwrite($__s,4,$__n,$1)|0);
   $retval$0 = $call;
  }
 } while(0);
 return ($retval$0|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__file_30 = 0, $__st_ = 0;
 var $add$ptr = 0, $add$ptr10 = 0, $call = 0, $call$i = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call3 = 0, $call31 = 0, $call5 = 0, $call55 = 0, $call7 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $cmp20 = 0, $cmp26 = 0, $cmp32 = 0, $pbase$0 = 0, $retval$4 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $call2 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c,$call)|0);
 do {
  if ($call2) {
   label = 15;
  } else {
   $call3 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($__c)|0);
   HEAP32[$__1buf>>2] = $call3;
   $__always_noconv_ = ((($this)) + 44|0);
   $0 = HEAP8[$__always_noconv_>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if (!($tobool)) {
    $__file_ = ((($this)) + 32|0);
    $1 = HEAP32[$__file_>>2]|0;
    $call5 = (_fwrite($__1buf,4,1,$1)|0);
    $cmp = ($call5|0)==(1);
    if ($cmp) {
     label = 15;
     break;
    }
    $call7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $retval$4 = $call7;
    break;
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $add$ptr = ((($__1buf)) + 4|0);
   $__cv_ = ((($this)) + 36|0);
   $__st_ = ((($this)) + 40|0);
   $add$ptr10 = ((($__extbuf)) + 8|0);
   $sub$ptr$rhs$cast = $__extbuf;
   $__file_30 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $2 = HEAP32[$__cv_>>2]|0;
    $3 = HEAP32[$__st_>>2]|0;
    $vtable$i = HEAP32[$2>>2]|0;
    $vfn$i = ((($vtable$i)) + 12|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$4 & 511]($2,$3,$pbase$0,$add$ptr,$__e,$__extbuf,$add$ptr10,$__extbe)|0);
    $5 = HEAP32[$__e>>2]|0;
    $cmp12 = ($5|0)==($pbase$0|0);
    if ($cmp12) {
     label = 14;
     break;
    }
    $cmp16 = ($call$i|0)==(3);
    if ($cmp16) {
     label = 8;
     break;
    }
    $cmp26 = ($call$i|0)==(1);
    $7 = ($call$i>>>0)<(2);
    if (!($7)) {
     label = 14;
     break;
    }
    $8 = HEAP32[$__extbe>>2]|0;
    $sub$ptr$sub = (($8) - ($sub$ptr$rhs$cast))|0;
    $9 = HEAP32[$__file_30>>2]|0;
    $call31 = (_fwrite($__extbuf,1,$sub$ptr$sub,$9)|0);
    $cmp32 = ($call31|0)==($sub$ptr$sub|0);
    if (!($cmp32)) {
     label = 14;
     break;
    }
    $10 = HEAP32[$__e>>2]|0;
    if ($cmp26) {
     $pbase$0 = $10;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $6 = HEAP32[$__file_30>>2]|0;
    $call19 = (_fwrite($pbase$0,1,1,$6)|0);
    $cmp20 = ($call19|0)==(1);
    if ($cmp20) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $call14 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $retval$4 = $call14;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $call55 = (__ZNSt3__211char_traitsIwE7not_eofEj($__c)|0);
  $retval$4 = $call55;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNSt3__211char_traitsIwE7not_eofEj($__c) {
 $__c = $__c|0;
 var $call = 0, $call1 = 0, $call2 = 0, $cond = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $call1 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c,$call)|0);
 if ($call1) {
  $call2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $neg = $call2 ^ -1;
  $cond = $neg;
 } else {
  $cond = $__c;
 }
 return ($cond|0);
}
function __ZNSt3__211__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $__always_noconv_ = 0, $__cv_ = 0, $call$i = 0, $call$i1 = 0, $frombool = 0, $vfn = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $0 = HEAP32[$vfn>>2]|0;
 (FUNCTION_TABLE_ii[$0 & 511]($this)|0);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21332)|0);
 $__cv_ = ((($this)) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 28|0);
 $1 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$1 & 511]($call$i)|0);
 $__always_noconv_ = ((($this)) + 44|0);
 $frombool = $call$i1&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $call12 = 0, $call5 = 0, $cmp = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 var $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $__cv_ = ((($this)) + 36|0);
 $__st_ = ((($this)) + 40|0);
 $add$ptr = ((($__extbuf)) + 8|0);
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = ((($this)) + 32|0);
 L1: while(1) {
  $0 = HEAP32[$__cv_>>2]|0;
  $1 = HEAP32[$__st_>>2]|0;
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = ((($vtable$i)) + 20|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiiiii[$2 & 511]($0,$1,$__extbuf,$add$ptr,$__extbe)|0);
  $3 = HEAP32[$__extbe>>2]|0;
  $sub$ptr$sub = (($3) - ($sub$ptr$rhs$cast))|0;
  $4 = HEAP32[$__file_>>2]|0;
  $call5 = (_fwrite($__extbuf,1,$sub$ptr$sub,$4)|0);
  $cmp = ($call5|0)==($sub$ptr$sub|0);
  if (!($cmp)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $retval$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $5 = HEAP32[$__file_>>2]|0;
  $call12 = (_fflush($5)|0);
  $tobool = ($call12|0)!=(0);
  $$5 = $tobool << 31 >> 31;
  $retval$2 = $$5;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__file_ = 0, $__i$0 = 0, $__s$addr$0 = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $__always_noconv_ = ((($this)) + 44|0);
 $0 = HEAP8[$__always_noconv_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 L1: do {
  if ($tobool) {
   $__i$0 = 0;$__s$addr$0 = $__s;
   while(1) {
    $cmp = ($__i$0|0)<($__n|0);
    if (!($cmp)) {
     $retval$0 = $__i$0;
     break L1;
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 52|0);
    $2 = HEAP32[$vfn>>2]|0;
    $3 = HEAP8[$__s$addr$0>>0]|0;
    $call2 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($3)|0);
    $call3 = (FUNCTION_TABLE_iii[$2 & 511]($this,$call2)|0);
    $call4 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $cmp5 = ($call3|0)==($call4|0);
    if ($cmp5) {
     $retval$0 = $__i$0;
     break L1;
    }
    $inc = (($__i$0) + 1)|0;
    $incdec$ptr = ((($__s$addr$0)) + 1|0);
    $__i$0 = $inc;$__s$addr$0 = $incdec$ptr;
   }
  } else {
   $__file_ = ((($this)) + 32|0);
   $1 = HEAP32[$__file_>>2]|0;
   $call = (_fwrite($__s,1,$__n,$1)|0);
   $retval$0 = $call;
  }
 } while(0);
 return ($retval$0|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__file_30 = 0, $__st_ = 0;
 var $add$ptr = 0, $add$ptr10 = 0, $call = 0, $call$i = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call3 = 0, $call31 = 0, $call5 = 0, $call55 = 0, $call7 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $cmp20 = 0, $cmp26 = 0, $cmp32 = 0, $pbase$0 = 0, $retval$4 = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $call2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c,$call)|0);
 do {
  if ($call2) {
   label = 15;
  } else {
   $call3 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($__c)|0);
   HEAP8[$__1buf>>0] = $call3;
   $__always_noconv_ = ((($this)) + 44|0);
   $0 = HEAP8[$__always_noconv_>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if (!($tobool)) {
    $__file_ = ((($this)) + 32|0);
    $1 = HEAP32[$__file_>>2]|0;
    $call5 = (_fwrite($__1buf,1,1,$1)|0);
    $cmp = ($call5|0)==(1);
    if ($cmp) {
     label = 15;
     break;
    }
    $call7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $retval$4 = $call7;
    break;
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $add$ptr = ((($__1buf)) + 1|0);
   $__cv_ = ((($this)) + 36|0);
   $__st_ = ((($this)) + 40|0);
   $add$ptr10 = ((($__extbuf)) + 8|0);
   $sub$ptr$rhs$cast = $__extbuf;
   $__file_30 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $2 = HEAP32[$__cv_>>2]|0;
    $3 = HEAP32[$__st_>>2]|0;
    $vtable$i = HEAP32[$2>>2]|0;
    $vfn$i = ((($vtable$i)) + 12|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$4 & 511]($2,$3,$pbase$0,$add$ptr,$__e,$__extbuf,$add$ptr10,$__extbe)|0);
    $5 = HEAP32[$__e>>2]|0;
    $cmp12 = ($5|0)==($pbase$0|0);
    if ($cmp12) {
     label = 14;
     break;
    }
    $cmp16 = ($call$i|0)==(3);
    if ($cmp16) {
     label = 8;
     break;
    }
    $cmp26 = ($call$i|0)==(1);
    $7 = ($call$i>>>0)<(2);
    if (!($7)) {
     label = 14;
     break;
    }
    $8 = HEAP32[$__extbe>>2]|0;
    $sub$ptr$sub = (($8) - ($sub$ptr$rhs$cast))|0;
    $9 = HEAP32[$__file_30>>2]|0;
    $call31 = (_fwrite($__extbuf,1,$sub$ptr$sub,$9)|0);
    $cmp32 = ($call31|0)==($sub$ptr$sub|0);
    if (!($cmp32)) {
     label = 14;
     break;
    }
    $10 = HEAP32[$__e>>2]|0;
    if ($cmp26) {
     $pbase$0 = $10;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $6 = HEAP32[$__file_30>>2]|0;
    $call19 = (_fwrite($pbase$0,1,1,$6)|0);
    $cmp20 = ($call19|0)==(1);
    if ($cmp20) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $call14 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $retval$4 = $call14;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $call55 = (__ZNSt3__211char_traitsIcE7not_eofEi($__c)|0);
  $retval$4 = $call55;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $call = 0, $call1 = 0, $call2 = 0, $cond = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $call1 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c,$call)|0);
 if ($call1) {
  $call2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $neg = $call2 ^ -1;
  $cond = $neg;
 } else {
  $cond = $__c;
 }
 return ($cond|0);
}
function __ZNSt3__210__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $call$i4 = 0, $cmp = 0, $frombool = 0, $vfn$i = 0, $vfn$i3 = 0, $vtable$i = 0, $vtable$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21340)|0);
 $__cv_ = ((($this)) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 24|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $__encoding_ = ((($this)) + 44|0);
 HEAP32[$__encoding_>>2] = $call$i1;
 $1 = HEAP32[$__cv_>>2]|0;
 $vtable$i2 = HEAP32[$1>>2]|0;
 $vfn$i3 = ((($vtable$i2)) + 28|0);
 $2 = HEAP32[$vfn$i3>>2]|0;
 $call$i4 = (FUNCTION_TABLE_ii[$2 & 511]($1)|0);
 $__always_noconv_ = ((($this)) + 53|0);
 $frombool = $call$i4&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 $3 = HEAP32[$__encoding_>>2]|0;
 $cmp = ($3|0)>(8);
 if ($cmp) {
  __ZNSt3__221__throw_runtime_errorEPKc(12605);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__210__stdinbufIwE9__getcharEb($this,0)|0);
 return ($call|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__210__stdinbufIwE9__getcharEb($this,1)|0);
 return ($call|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0;
 var $__last_consumed_is_next_ = 0, $__st_ = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr19 = 0, $call = 0, $call$i = 0, $call13 = 0, $call2 = 0, $call24 = 0, $call27 = 0, $call5 = 0, $call6 = 0, $cleanup$dest$slot$0 = 0, $cmp = 0, $cmp25 = 0, $conv = 0, $conv23 = 0, $frombool = 0, $incdec$ptr = 0;
 var $lnot = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $call2 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c,$call)|0);
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 do {
  if ($call2) {
   if ($tobool) {
    $retval$1 = $__c;
   } else {
    $__last_consumed_ = ((($this)) + 48|0);
    $1 = HEAP32[$__last_consumed_>>2]|0;
    $call5 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call6 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$call5)|0);
    $lnot = $call6 ^ 1;
    $frombool = $lnot&1;
    HEAP8[$__last_consumed_is_next_>>0] = $frombool;
    $retval$1 = $1;
   }
  } else {
   if ($tobool) {
    $__last_consumed_12 = ((($this)) + 48|0);
    $2 = HEAP32[$__last_consumed_12>>2]|0;
    $call13 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($2)|0);
    HEAP32[$__ci>>2] = $call13;
    $__cv_ = ((($this)) + 36|0);
    $3 = HEAP32[$__cv_>>2]|0;
    $__st_ = ((($this)) + 40|0);
    $4 = HEAP32[$__st_>>2]|0;
    $add$ptr = ((($__ci)) + 4|0);
    $add$ptr15 = ((($__extbuf)) + 8|0);
    $vtable$i = HEAP32[$3>>2]|0;
    $vfn$i = ((($vtable$i)) + 12|0);
    $5 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$5 & 511]($3,$4,$__ci,$add$ptr,$__inxt,$__extbuf,$add$ptr15,$__enxt)|0);
    switch ($call$i|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $6 = HEAP32[$__last_consumed_12>>2]|0;
     $conv = $6&255;
     HEAP8[$__extbuf>>0] = $conv;
     $add$ptr19 = ((($__extbuf)) + 1|0);
     HEAP32[$__enxt>>2] = $add$ptr19;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $__file_ = ((($this)) + 32|0);
      while(1) {
       $7 = HEAP32[$__enxt>>2]|0;
       $cmp = ($7>>>0)>($__extbuf>>>0);
       if (!($cmp)) {
        $cleanup$dest$slot$0 = 1;$retval$0 = 0;
        break L9;
       }
       $incdec$ptr = ((($7)) + -1|0);
       HEAP32[$__enxt>>2] = $incdec$ptr;
       $8 = HEAP8[$incdec$ptr>>0]|0;
       $conv23 = $8 << 24 >> 24;
       $9 = HEAP32[$__file_>>2]|0;
       $call24 = (_ungetc($conv23,$9)|0);
       $cmp25 = ($call24|0)==(-1);
       if ($cmp25) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $call27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $cleanup$dest$slot$0 = 0;$retval$0 = $call27;
    }
    if ($cleanup$dest$slot$0) {
     $__last_consumed_33$pre$phiZ2D = $__last_consumed_12;
    } else {
     $retval$1 = $retval$0;
     break;
    }
   } else {
    $$pre = ((($this)) + 48|0);
    $__last_consumed_33$pre$phiZ2D = $$pre;
   }
   HEAP32[$__last_consumed_33$pre$phiZ2D>>2] = $__c;
   HEAP8[$__last_consumed_is_next_>>0] = 1;
   $retval$1 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i58$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_77 = 0, $__last_consumed_is_next_ = 0;
 var $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr21 = 0, $arrayidx = 0, $arrayidx63 = 0, $call = 0, $call$i = 0, $call11 = 0, $call30 = 0, $call42 = 0, $call65 = 0, $call67 = 0, $call70 = 0, $call76 = 0, $call79 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i = 0;
 var $cmp24 = 0, $cmp31 = 0, $cmp60 = 0, $cmp68 = 0, $cmp9 = 0, $conv = 0, $conv18 = 0, $conv35 = 0, $conv45 = 0, $conv64 = 0, $dec = 0, $inc = 0, $inc4041 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, $tobool = 0, $tobool15 = 0, $vfn$i = 0, $vtable$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  $__encoding_ = ((($this)) + 44|0);
  $2 = HEAP32[$__encoding_>>2]|0;
  $cmp$i$i$i = ($2|0)>(1);
  $$sroa$speculated = $cmp$i$i$i ? $2 : 1;
  $__file_ = ((($this)) + 32|0);
  $__i$0 = 0;
  while(1) {
   $cmp = ($__i$0>>>0)<($$sroa$speculated>>>0);
   if (!($cmp)) {
    label = 9;
    break;
   }
   $3 = HEAP32[$__file_>>2]|0;
   $call8 = (_getc($3)|0);
   $cmp9 = ($call8|0)==(-1);
   if ($cmp9) {
    label = 8;
    break;
   }
   $conv = $call8&255;
   $arrayidx = (($__extbuf) + ($__i$0)|0);
   HEAP8[$arrayidx>>0] = $conv;
   $inc = (($__i$0) + 1)|0;
   $__i$0 = $inc;
  }
  if ((label|0) == 8) {
   $call11 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $retval$10 = $call11;
  }
  else if ((label|0) == 9) {
   $__always_noconv_ = ((($this)) + 53|0);
   $4 = HEAP8[$__always_noconv_>>0]|0;
   $tobool15 = ($4<<24>>24)==(0);
   do {
    if ($tobool15) {
     $__st_ = ((($this)) + 40|0);
     $__cv_ = ((($this)) + 36|0);
     $add$ptr21 = ((($__1buf)) + 4|0);
     $__nread$0 = $$sroa$speculated;
     L11: while(1) {
      $6 = HEAP32[$__st_>>2]|0;
      $7 = $6;
      $8 = $7;
      $9 = HEAP32[$8>>2]|0;
      $10 = (($7) + 4)|0;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = HEAP32[$__cv_>>2]|0;
      $add$ptr = (($__extbuf) + ($__nread$0)|0);
      $vtable$i = HEAP32[$13>>2]|0;
      $vfn$i = ((($vtable$i)) + 16|0);
      $14 = HEAP32[$vfn$i>>2]|0;
      $call$i = (FUNCTION_TABLE_iiiiiiiii[$14 & 511]($13,$6,$__extbuf,$add$ptr,$__enxt,$__1buf,$add$ptr21,$__inxt)|0);
      switch ($call$i|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $15 = HEAP32[$__st_>>2]|0;
      $16 = $15;
      $17 = $16;
      HEAP32[$17>>2] = $9;
      $18 = (($16) + 4)|0;
      $19 = $18;
      HEAP32[$19>>2] = $12;
      $cmp24 = ($__nread$0|0)==(8);
      if ($cmp24) {
       label = 17;
       break;
      }
      $20 = HEAP32[$__file_>>2]|0;
      $call30 = (_getc($20)|0);
      $cmp31 = ($call30|0)==(-1);
      if ($cmp31) {
       label = 17;
       break;
      }
      $conv35 = $call30&255;
      HEAP8[$add$ptr>>0] = $conv35;
      $inc4041 = (($__nread$0) + 1)|0;
      $__nread$0 = $inc4041;
     }
     if ((label|0) == 15) {
      $21 = HEAP8[$__extbuf>>0]|0;
      $conv45 = $21 << 24 >> 24;
      HEAP32[$__1buf>>2] = $conv45;
     }
     else if ((label|0) == 17) {
      $call42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $retval$9 = $call42;
      break;
     }
     $__nread$3 = $__nread$0;
     label = 19;
    } else {
     $5 = HEAP8[$__extbuf>>0]|0;
     $conv18 = $5 << 24 >> 24;
     HEAP32[$__1buf>>2] = $conv18;
     $__nread$3 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($__consume) {
       $24 = HEAP32[$__1buf>>2]|0;
       $call76 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($24)|0);
       $__last_consumed_77 = ((($this)) + 48|0);
       HEAP32[$__last_consumed_77>>2] = $call76;
      } else {
       $__i58$0 = $__nread$3;
       while(1) {
        $cmp60 = ($__i58$0|0)>(0);
        if (!($cmp60)) {
         break L23;
        }
        $dec = (($__i58$0) + -1)|0;
        $arrayidx63 = (($__extbuf) + ($dec)|0);
        $22 = HEAP8[$arrayidx63>>0]|0;
        $conv64 = $22 << 24 >> 24;
        $call65 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($conv64)|0);
        $23 = HEAP32[$__file_>>2]|0;
        $call67 = (_ungetc($call65,$23)|0);
        $cmp68 = ($call67|0)==(-1);
        if ($cmp68) {
         break;
        } else {
         $__i58$0 = $dec;
        }
       }
       $call70 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $retval$9 = $call70;
       break L21;
      }
     } while(0);
     $25 = HEAP32[$__1buf>>2]|0;
     $call79 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
     $retval$9 = $call79;
    }
   } while(0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = ((($this)) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  if ($__consume) {
   $call = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   HEAP32[$__last_consumed_>>2] = $call;
   HEAP8[$__last_consumed_is_next_>>0] = 0;
   $retval$11 = $1;
  } else {
   $retval$11 = $1;
  }
 }
 STACKTOP = sp;return ($retval$11|0);
}
function __ZNSt3__210__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0, $call$i1 = 0, $call$i4 = 0, $cmp = 0, $frombool = 0, $vfn$i = 0, $vfn$i3 = 0, $vtable$i = 0, $vtable$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21332)|0);
 $__cv_ = ((($this)) + 36|0);
 HEAP32[$__cv_>>2] = $call$i;
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 24|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i1 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 $__encoding_ = ((($this)) + 44|0);
 HEAP32[$__encoding_>>2] = $call$i1;
 $1 = HEAP32[$__cv_>>2]|0;
 $vtable$i2 = HEAP32[$1>>2]|0;
 $vfn$i3 = ((($vtable$i2)) + 28|0);
 $2 = HEAP32[$vfn$i3>>2]|0;
 $call$i4 = (FUNCTION_TABLE_ii[$2 & 511]($1)|0);
 $__always_noconv_ = ((($this)) + 53|0);
 $frombool = $call$i4&1;
 HEAP8[$__always_noconv_>>0] = $frombool;
 $3 = HEAP32[$__encoding_>>2]|0;
 $cmp = ($3|0)>(8);
 if ($cmp) {
  __ZNSt3__221__throw_runtime_errorEPKc(12605);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__210__stdinbufIcE9__getcharEb($this,0)|0);
 return ($call|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__210__stdinbufIcE9__getcharEb($this,1)|0);
 return ($call|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0;
 var $__last_consumed_is_next_ = 0, $__st_ = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr19 = 0, $call = 0, $call$i = 0, $call13 = 0, $call2 = 0, $call24 = 0, $call27 = 0, $call5 = 0, $call6 = 0, $cleanup$dest$slot$0 = 0, $cmp = 0, $cmp25 = 0, $conv = 0, $conv23 = 0, $frombool = 0, $incdec$ptr = 0;
 var $lnot = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $call2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c,$call)|0);
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 do {
  if ($call2) {
   if ($tobool) {
    $retval$1 = $__c;
   } else {
    $__last_consumed_ = ((($this)) + 48|0);
    $1 = HEAP32[$__last_consumed_>>2]|0;
    $call5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call6 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$call5)|0);
    $lnot = $call6 ^ 1;
    $frombool = $lnot&1;
    HEAP8[$__last_consumed_is_next_>>0] = $frombool;
    $retval$1 = $1;
   }
  } else {
   if ($tobool) {
    $__last_consumed_12 = ((($this)) + 48|0);
    $2 = HEAP32[$__last_consumed_12>>2]|0;
    $call13 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($2)|0);
    HEAP8[$__ci>>0] = $call13;
    $__cv_ = ((($this)) + 36|0);
    $3 = HEAP32[$__cv_>>2]|0;
    $__st_ = ((($this)) + 40|0);
    $4 = HEAP32[$__st_>>2]|0;
    $add$ptr = ((($__ci)) + 1|0);
    $add$ptr15 = ((($__extbuf)) + 8|0);
    $vtable$i = HEAP32[$3>>2]|0;
    $vfn$i = ((($vtable$i)) + 12|0);
    $5 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiiiiiiii[$5 & 511]($3,$4,$__ci,$add$ptr,$__inxt,$__extbuf,$add$ptr15,$__enxt)|0);
    switch ($call$i|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $6 = HEAP32[$__last_consumed_12>>2]|0;
     $conv = $6&255;
     HEAP8[$__extbuf>>0] = $conv;
     $add$ptr19 = ((($__extbuf)) + 1|0);
     HEAP32[$__enxt>>2] = $add$ptr19;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $__file_ = ((($this)) + 32|0);
      while(1) {
       $7 = HEAP32[$__enxt>>2]|0;
       $cmp = ($7>>>0)>($__extbuf>>>0);
       if (!($cmp)) {
        $cleanup$dest$slot$0 = 1;$retval$0 = 0;
        break L9;
       }
       $incdec$ptr = ((($7)) + -1|0);
       HEAP32[$__enxt>>2] = $incdec$ptr;
       $8 = HEAP8[$incdec$ptr>>0]|0;
       $conv23 = $8 << 24 >> 24;
       $9 = HEAP32[$__file_>>2]|0;
       $call24 = (_ungetc($conv23,$9)|0);
       $cmp25 = ($call24|0)==(-1);
       if ($cmp25) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $call27 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $cleanup$dest$slot$0 = 0;$retval$0 = $call27;
    }
    if ($cleanup$dest$slot$0) {
     $__last_consumed_33$pre$phiZ2D = $__last_consumed_12;
    } else {
     $retval$1 = $retval$0;
     break;
    }
   } else {
    $$pre = ((($this)) + 48|0);
    $__last_consumed_33$pre$phiZ2D = $$pre;
   }
   HEAP32[$__last_consumed_33$pre$phiZ2D>>2] = $__c;
   HEAP8[$__last_consumed_is_next_>>0] = 1;
   $retval$1 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__always_noconv_ = 0, $__cv_ = 0, $__encoding_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i56$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_74 = 0, $__last_consumed_is_next_ = 0;
 var $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr20 = 0, $arrayidx = 0, $arrayidx61 = 0, $call = 0, $call$i = 0, $call11 = 0, $call29 = 0, $call41 = 0, $call62 = 0, $call64 = 0, $call67 = 0, $call73 = 0, $call76 = 0, $call8 = 0, $cmp = 0, $cmp$i$i$i = 0;
 var $cmp23 = 0, $cmp30 = 0, $cmp58 = 0, $cmp65 = 0, $cmp9 = 0, $conv = 0, $conv34 = 0, $dec = 0, $inc = 0, $inc3941 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, $tobool = 0, $tobool15 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $__last_consumed_is_next_ = ((($this)) + 52|0);
 $0 = HEAP8[$__last_consumed_is_next_>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  $__encoding_ = ((($this)) + 44|0);
  $2 = HEAP32[$__encoding_>>2]|0;
  $cmp$i$i$i = ($2|0)>(1);
  $$sroa$speculated = $cmp$i$i$i ? $2 : 1;
  $__file_ = ((($this)) + 32|0);
  $__i$0 = 0;
  while(1) {
   $cmp = ($__i$0>>>0)<($$sroa$speculated>>>0);
   if (!($cmp)) {
    label = 9;
    break;
   }
   $3 = HEAP32[$__file_>>2]|0;
   $call8 = (_getc($3)|0);
   $cmp9 = ($call8|0)==(-1);
   if ($cmp9) {
    label = 8;
    break;
   }
   $conv = $call8&255;
   $arrayidx = (($__extbuf) + ($__i$0)|0);
   HEAP8[$arrayidx>>0] = $conv;
   $inc = (($__i$0) + 1)|0;
   $__i$0 = $inc;
  }
  if ((label|0) == 8) {
   $call11 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $retval$10 = $call11;
  }
  else if ((label|0) == 9) {
   $__always_noconv_ = ((($this)) + 53|0);
   $4 = HEAP8[$__always_noconv_>>0]|0;
   $tobool15 = ($4<<24>>24)==(0);
   do {
    if ($tobool15) {
     $__st_ = ((($this)) + 40|0);
     $__cv_ = ((($this)) + 36|0);
     $add$ptr20 = ((($__1buf)) + 1|0);
     $__nread$0 = $$sroa$speculated;
     L11: while(1) {
      $6 = HEAP32[$__st_>>2]|0;
      $7 = $6;
      $8 = $7;
      $9 = HEAP32[$8>>2]|0;
      $10 = (($7) + 4)|0;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = HEAP32[$__cv_>>2]|0;
      $add$ptr = (($__extbuf) + ($__nread$0)|0);
      $vtable$i = HEAP32[$13>>2]|0;
      $vfn$i = ((($vtable$i)) + 16|0);
      $14 = HEAP32[$vfn$i>>2]|0;
      $call$i = (FUNCTION_TABLE_iiiiiiiii[$14 & 511]($13,$6,$__extbuf,$add$ptr,$__enxt,$__1buf,$add$ptr20,$__inxt)|0);
      switch ($call$i|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $15 = HEAP32[$__st_>>2]|0;
      $16 = $15;
      $17 = $16;
      HEAP32[$17>>2] = $9;
      $18 = (($16) + 4)|0;
      $19 = $18;
      HEAP32[$19>>2] = $12;
      $cmp23 = ($__nread$0|0)==(8);
      if ($cmp23) {
       label = 17;
       break;
      }
      $20 = HEAP32[$__file_>>2]|0;
      $call29 = (_getc($20)|0);
      $cmp30 = ($call29|0)==(-1);
      if ($cmp30) {
       label = 17;
       break;
      }
      $conv34 = $call29&255;
      HEAP8[$add$ptr>>0] = $conv34;
      $inc3941 = (($__nread$0) + 1)|0;
      $__nread$0 = $inc3941;
     }
     if ((label|0) == 15) {
      $21 = HEAP8[$__extbuf>>0]|0;
      HEAP8[$__1buf>>0] = $21;
     }
     else if ((label|0) == 17) {
      $call41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $retval$9 = $call41;
      break;
     }
     $__nread$3 = $__nread$0;
     label = 19;
    } else {
     $5 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $5;
     $__nread$3 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($__consume) {
       $24 = HEAP8[$__1buf>>0]|0;
       $call73 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($24)|0);
       $__last_consumed_74 = ((($this)) + 48|0);
       HEAP32[$__last_consumed_74>>2] = $call73;
      } else {
       $__i56$0 = $__nread$3;
       while(1) {
        $cmp58 = ($__i56$0|0)>(0);
        if (!($cmp58)) {
         break L23;
        }
        $dec = (($__i56$0) + -1)|0;
        $arrayidx61 = (($__extbuf) + ($dec)|0);
        $22 = HEAP8[$arrayidx61>>0]|0;
        $call62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($22)|0);
        $23 = HEAP32[$__file_>>2]|0;
        $call64 = (_ungetc($call62,$23)|0);
        $cmp65 = ($call64|0)==(-1);
        if ($cmp65) {
         break;
        } else {
         $__i56$0 = $dec;
        }
       }
       $call67 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $retval$9 = $call67;
       break L21;
      }
     } while(0);
     $25 = HEAP8[$__1buf>>0]|0;
     $call76 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
     $retval$9 = $call76;
    }
   } while(0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = ((($this)) + 48|0);
  $1 = HEAP32[$__last_consumed_>>2]|0;
  if ($__consume) {
   $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   HEAP32[$__last_consumed_>>2] = $call;
   HEAP8[$__last_consumed_is_next_>>0] = 0;
   $retval$11 = $1;
  } else {
   $retval$11 = $1;
  }
 }
 STACKTOP = sp;return ($retval$11|0);
}
function __ZNSt3__27collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $isnull = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($this|0)==(0|0);
 if (!($isnull)) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 4|0);
  $0 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vi[$0 & 511]($this);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp4 = 0, $cmp7 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__lo1$addr$0 = $__lo1;$__lo2$addr$0 = $__lo2;
 while(1) {
  $cmp = ($__lo2$addr$0|0)==($__hi2|0);
  if ($cmp) {
   label = 7;
   break;
  }
  $cmp2 = ($__lo1$addr$0|0)==($__hi1|0);
  if ($cmp2) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP8[$__lo1$addr$0>>0]|0;
  $1 = HEAP8[$__lo2$addr$0>>0]|0;
  $cmp4 = ($0<<24>>24)<($1<<24>>24);
  if ($cmp4) {
   $retval$0 = -1;
   break;
  }
  $cmp7 = ($1<<24>>24)<($0<<24>>24);
  if ($cmp7) {
   $retval$0 = 1;
   break;
  }
  $incdec$ptr = ((($__lo1$addr$0)) + 1|0);
  $incdec$ptr10 = ((($__lo2$addr$0)) + 1|0);
  $__lo1$addr$0 = $incdec$ptr;$__lo2$addr$0 = $incdec$ptr10;
 }
 if ((label|0) == 7) {
  $cmp11 = ($__lo1$addr$0|0)!=($__hi1|0);
  $conv12 = $cmp11&1;
  $retval$0 = $conv12;
 }
 return ($retval$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0, $cmp = 0, $conv = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $cmp = ($__p$0|0)==($__hi|0);
  if ($cmp) {
   break;
  }
  $shl = $__h$0 << 4;
  $0 = HEAP8[$__p$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $add = (($shl) + ($conv))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = ((($__p$0)) + 1|0);
  $__h$0 = $xor;$__p$0 = $incdec$ptr;
 }
 return ($__h$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $or$i = 0, $ref$tmp = 0, $scevgep17 = 0;
 var $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $cmp = ($sub$ptr$sub$i$i>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$sub$i$i>>>0)<(11);
 if ($cmp3) {
  $conv$i = $sub$ptr$sub$i$i&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($sub$ptr$sub$i$i) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $0 = $__last;
 $1 = (($0) - ($sub$ptr$rhs$cast$i$i))|0;
 $__first$addr$0 = $__first;$__p$1 = $__p$0;
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 1|0);
  $incdec$ptr12 = ((($__p$1)) + 1|0);
  $__first$addr$0 = $incdec$ptr;$__p$1 = $incdec$ptr12;
 }
 $scevgep17 = (($__p$0) + ($1)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep17,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__26locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp4 = 0, $cmp8 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__lo1$addr$0 = $__lo1;$__lo2$addr$0 = $__lo2;
 while(1) {
  $cmp = ($__lo2$addr$0|0)==($__hi2|0);
  if ($cmp) {
   label = 7;
   break;
  }
  $cmp2 = ($__lo1$addr$0|0)==($__hi1|0);
  if ($cmp2) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP32[$__lo1$addr$0>>2]|0;
  $1 = HEAP32[$__lo2$addr$0>>2]|0;
  $cmp3 = ($0|0)<($1|0);
  if ($cmp3) {
   $retval$0 = -1;
   break;
  }
  $cmp4 = ($1|0)<($0|0);
  if ($cmp4) {
   $retval$0 = 1;
   break;
  }
  $incdec$ptr = ((($__lo1$addr$0)) + 4|0);
  $incdec$ptr7 = ((($__lo2$addr$0)) + 4|0);
  $__lo1$addr$0 = $incdec$ptr;$__lo2$addr$0 = $incdec$ptr7;
 }
 if ((label|0) == 7) {
  $cmp8 = ($__lo1$addr$0|0)!=($__hi1|0);
  $conv = $cmp8&1;
  $retval$0 = $conv;
 }
 return ($retval$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0, $cmp = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $cmp = ($__p$0|0)==($__hi|0);
  if ($cmp) {
   break;
  }
  $shl = $__h$0 << 4;
  $0 = HEAP32[$__p$0>>2]|0;
  $add = (($0) + ($shl))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = ((($__p$0)) + 4|0);
  $__h$0 = $xor;$__p$0 = $incdec$ptr;
 }
 return ($__h$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0;
 var $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $cmp = ($sub$ptr$div$i$i>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$div$i$i>>>0)<(2);
 do {
  if ($cmp3) {
   $conv$i = $sub$ptr$div$i$i&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$1$ph = $this;
  } else {
   $add$i$i = (($sub$ptr$div$i$i) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    _abort();
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwm($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i15 = ((($this)) + 4|0);
    HEAP32[$__size_$i15>>2] = $sub$ptr$div$i$i;
    $__p$1$ph = $call$i$i$i;
    break;
   }
  }
 } while(0);
 $__first$addr$0 = $__first;$__p$1 = $__p$1$ph;
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 4|0);
  $incdec$ptr12 = ((($__p$1)) + 4|0);
  $__first$addr$0 = $incdec$ptr;$__p$1 = $incdec$ptr12;
 }
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__c2>>2]|0;
 HEAP32[$__c1>>2] = $0;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $and = 0, $arraydestroy$done = 0;
 var $arraydestroy$element = 0, $arraydestroy$elementPast = 0, $arrayinit$element = 0, $call$i = 0, $call$i16 = 0, $call11 = 0, $call3 = 0, $cmp = 0, $cmp13 = 0, $frombool = 0, $ref$tmp5 = 0, $ref$tmp7 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $retval$sroa$0$0$copyload15 = 0, $vfn = 0, $vfn$i = 0, $vfn$i18 = 0, $vtable = 0, $vtable$i = 0;
 var $vtable$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp9$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 52|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $__lv = sp + 44|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp2 = sp + 36|0;
 $ref$tmp5 = sp + 32|0;
 $ref$tmp7 = sp + 28|0;
 $__names = sp;
 $agg$tmp9 = sp + 24|0;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  HEAP32[$__lv>>2] = -1;
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp2>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
  $call3 = (FUNCTION_TABLE_iiiiiii[$1 & 255]($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv)|0);
  HEAP32[$__b>>2] = $call3;
  $4 = HEAP32[$__lv>>2]|0;
  switch ($4|0) {
  case 0:  {
   HEAP8[$__v>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$__v>>0] = 1;
   break;
  }
  default: {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  }
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($ref$tmp5,$__iob);
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp5,21028)|0);
  __ZNSt3__26localeD2Ev($ref$tmp5);
  __ZNKSt3__28ios_base6getlocEv($ref$tmp7,$__iob);
  $call$i16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp7,21044)|0);
  __ZNSt3__26localeD2Ev($ref$tmp7);
  $vtable$i = HEAP32[$call$i16>>2]|0;
  $vfn$i = ((($vtable$i)) + 24|0);
  $5 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$5 & 511]($__names,$call$i16);
  $arrayinit$element = ((($__names)) + 12|0);
  $vtable$i17 = HEAP32[$call$i16>>2]|0;
  $vfn$i18 = ((($vtable$i17)) + 28|0);
  $6 = HEAP32[$vfn$i18>>2]|0;
  FUNCTION_TABLE_vii[$6 & 511]($arrayinit$element,$call$i16);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp9>>2] = $7;
  $add$ptr = ((($__names)) + 24|0);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;
  $call11 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp9$byval_copy,$__names,$add$ptr,$call$i,$__err,1)|0);
  $cmp13 = ($call11|0)==($__names|0);
  $frombool = $cmp13&1;
  HEAP8[$__v>>0] = $frombool;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b>>2]|0;
  $arraydestroy$elementPast = $add$ptr;
  while(1) {
   $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element);
   $arraydestroy$done = ($arraydestroy$element|0)==($__names|0);
   if ($arraydestroy$done) {
    break;
   } else {
    $arraydestroy$elementPast = $arraydestroy$element;
   }
  }
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i43 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i42 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0;
 var $arrayidx$i$i14 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i27 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i48 = 0, $call16 = 0, $call21 = 0, $call22 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i29 = 0, $call3$i$i$i32 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i50 = 0, $call3$i14$i$i = 0, $call3$i14$i$i53 = 0, $call4$i$i$i = 0;
 var $call4$i$i$i33 = 0, $call4$i15$i$i = 0, $call4$i15$i$i54 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i101 = 0, $cmp$i$i105 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i44 = 0, $cmp23 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i99 = 0, $cond$i64 = 0, $cond$i90 = 0, $conv$i = 0, $conv$i$i = 0, $exitcond$i$i = 0;
 var $exitcond$i$i12 = 0, $inc$i$i = 0, $inc$i$i15 = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i88 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i94 = 0, $tobool$i$i62 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i40 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i107 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i47 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0;
 var $vtable$i$i106 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp + 192|0;
 $__atoms = sp + 160|0;
 $__grouping = sp + 224|0;
 $ref$tmp = sp + 220|0;
 $__buf = sp + 208|0;
 $__a_end = sp + 204|0;
 $__g = sp;
 $__g_end = sp + 200|0;
 $__dc = sp + 196|0;
 ;HEAP32[$__grouping>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 32|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,4960,(4986),$__atoms)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i11 = 0;
 while(1) {
  $exitcond$i$i12 = ($__i$0$i$i11|0)==(3);
  if ($exitcond$i$i12) {
   break;
  }
  $arrayidx$i$i14 = (($__buf) + ($__i$0$i$i11<<2)|0);
  HEAP32[$arrayidx$i$i14>>2] = 0;
  $inc$i$i15 = (($__i$0$i$i11) + 1)|0;
  $__i$0$i$i11 = $inc$i$i15;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $2 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i18 = ($3<<24>>24)<(0);
 $4 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i18 ? $4 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $45 = $$pre;$5 = $$pre;$__a$0 = $cond$i$i;
 L12: while(1) {
  $tobool$i$i$i20 = ($5|0)==(0|0);
  if ($tobool$i$i$i20) {
   $22 = 0;$36 = 0;$46 = 1;
  } else {
   $__ninp_$i$i$i$i21 = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
   $__einp_$i$i$i$i22 = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
   $cmp$i$i$i$i23 = ($6|0)==($7|0);
   if ($cmp$i$i$i$i23) {
    $vtable$i$i$i$i25 = HEAP32[$5>>2]|0;
    $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
    $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
    $call$i$i$i$i27 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i$i$i31 = $call$i$i$i$i27;
   } else {
    $9 = HEAP8[$6>>0]|0;
    $call3$i$i$i$i29 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
    $retval$0$i$i$i$i31 = $call3$i$i$i$i29;
   }
   $call3$i$i$i32 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i33 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i31,$call3$i$i$i32)|0);
   if ($call4$i$i$i33) {
    HEAP32[$__b>>2] = 0;
    $22 = 0;$36 = 0;$46 = 1;
   } else {
    $22 = $5;$36 = $45;$46 = 0;
   }
  }
  $10 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i40 = ($10|0)==(0|0);
  do {
   if ($tobool$i2$i$i40) {
    label = 22;
   } else {
    $__ninp_$i$i3$i$i42 = ((($10)) + 12|0);
    $11 = HEAP32[$__ninp_$i$i3$i$i42>>2]|0;
    $__einp_$i$i4$i$i43 = ((($10)) + 16|0);
    $12 = HEAP32[$__einp_$i$i4$i$i43>>2]|0;
    $cmp$i$i5$i$i44 = ($11|0)==($12|0);
    if ($cmp$i$i5$i$i44) {
     $vtable$i$i7$i$i46 = HEAP32[$10>>2]|0;
     $vfn$i$i8$i$i47 = ((($vtable$i$i7$i$i46)) + 36|0);
     $13 = HEAP32[$vfn$i$i8$i$i47>>2]|0;
     $call$i$i9$i$i48 = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
     $retval$0$i$i13$i$i52 = $call$i$i9$i$i48;
    } else {
     $14 = HEAP8[$11>>0]|0;
     $call3$i$i11$i$i50 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
     $retval$0$i$i13$i$i52 = $call3$i$i11$i$i50;
    }
    $call3$i14$i$i53 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i54 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i52,$call3$i14$i$i53)|0);
    if ($call4$i15$i$i54) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($46) {
      $47 = $10;
      break;
     } else {
      $39 = $10;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $47 = 0;
   }
  }
  $15 = HEAP32[$__a_end>>2]|0;
  $16 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i62 = ($16<<24>>24)<(0);
  $17 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $16&255;
  $cond$i64 = $tobool$i$i62 ? $17 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i64)|0);
  $cmp = ($15|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i64 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $18 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i85 = ($18<<24>>24)<(0);
   if ($tobool$i$i85) {
    $19 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i87 = $19 & 2147483647;
    $phitmp$i88 = (($and$i$i87) + -1)|0;
    $cond$i90 = $phitmp$i88;
   } else {
    $cond$i90 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i90,0);
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i94 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__buf>>2]|0;
   $cond$i$i99 = $tobool$i$i$i94 ? $21 : $__buf;
   $add$ptr12 = (($cond$i$i99) + ($cond$i64)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i99;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($22)) + 12|0);
  $23 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($22)) + 16|0);
  $24 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i101 = ($23|0)==($24|0);
  if ($cmp$i$i101) {
   $vtable$i$i = HEAP32[$22>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $25 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$25 & 511]($22)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $26 = HEAP8[$23>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($26)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $call16 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $tobool = ($call16|0)==(0);
  if (!($tobool)) {
   $39 = $47;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i105 = ($27|0)==($28|0);
  if ($cmp$i$i105) {
   $vtable$i$i106 = HEAP32[$22>>2]|0;
   $vfn$i$i107 = ((($vtable$i$i106)) + 40|0);
   $29 = HEAP32[$vfn$i$i107>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($22)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $45 = $36;$5 = $22;$__a$0 = $__a$1;
 }
 $31 = HEAP32[$__a_end>>2]|0;
 $sub$ptr$rhs$cast = $__a$2;
 $sub$ptr$sub = (($31) - ($sub$ptr$rhs$cast))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$sub$ptr$sub,0);
 $32 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i$i = ($32<<24>>24)<(0);
 $33 = HEAP32[$__buf>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $33 : $__buf;
 $call21 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call22 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i,$call21,12753,$vararg_buffer)|0);
 $cmp23 = ($call22|0)==(1);
 if (!($cmp23)) {
  HEAP32[$__err>>2] = 4;
 }
 $tobool$i$i$i = ($22|0)==(0|0);
 if ($tobool$i$i$i) {
  $48 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($22)) + 12|0);
  $34 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($22)) + 16|0);
  $35 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($34|0)==($35|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$36>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $37 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$37 & 511]($22)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $38 = HEAP8[$34>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($38)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $48 = 1;
  } else {
   $48 = 0;
  }
 }
 $tobool$i2$i$i = ($39|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 50;
  } else {
   $__ninp_$i$i3$i$i = ((($39)) + 12|0);
   $40 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($39)) + 16|0);
   $41 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($40|0)==($41|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$39>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $42 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$42 & 511]($39)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $43 = HEAP8[$40>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   } else {
    if ($48) {
     break;
    } else {
     label = 52;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if ($48) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $44 = HEAP32[$__err>>2]|0;
  $or = $44 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNSt3__26locale2id5__getEv($x)|0);
 $call2 = (__ZNKSt3__26locale5__imp9use_facetEl($0,$call)|0);
 return ($call2|0);
}
function __ZNSt3__26localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__shared_owners_$i = 0, $cmp$i = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__shared_owners_$i = ((($0)) + 4|0);
 $1 = HEAP32[$__shared_owners_$i>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$__shared_owners_$i>>2] = $2;
 $cmp$i = ($1|0)==(0);
 if ($cmp$i) {
  $vtable$i = HEAP32[$0>>2]|0;
  $vfn$i = ((($vtable$i)) + 8|0);
  $3 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vi[$3 & 511]($0);
 }
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $arrayidx = 0;
 var $arrayidx4 = 0, $arrayidx43 = 0, $arrayidx47 = 0, $arrayidx50 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp15 = 0, $cmp17 = 0, $cmp2 = 0, $cmp2$i = 0, $cmp26 = 0, $cmp29 = 0, $cmp33 = 0, $cmp41 = 0, $cmp45 = 0, $cmp6 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0;
 var $inc = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr48 = 0, $incdec$ptr51 = 0, $or$cond = 0, $retval$1 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast23 = 0, $sub$ptr$lhs$cast38 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast39 = 0, $sub$ptr$sub = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub40 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = ((($__atoms)) + 24|0);
   $1 = HEAP8[$arrayidx>>0]|0;
   $cmp2 = ($1<<24>>24)==($__ct<<24>>24);
   if (!($cmp2)) {
    $arrayidx4 = ((($__atoms)) + 25|0);
    $2 = HEAP8[$arrayidx4>>0]|0;
    $cmp6 = ($2<<24>>24)==($__ct<<24>>24);
    if (!($cmp6)) {
     label = 5;
     break;
    }
   }
   $cond = $cmp2 ? 43 : 45;
   $incdec$ptr = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $__size_$i$i = ((($__grouping)) + 11|0);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($3<<24>>24)<(0);
   $__size_$i3$i = ((($__grouping)) + 4|0);
   $4 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $3&255;
   $cond$i = $tobool$i$i ? $4 : $conv$i$i;
   $cmp11 = ($cond$i|0)!=(0);
   $cmp15 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $cmp15 & $cmp11;
   if ($or$cond) {
    $5 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast = $5;
    $sub$ptr$rhs$cast = $__g;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp17 = ($sub$ptr$sub|0)<(160);
    if (!($cmp17)) {
     $retval$1 = 0;
     break;
    }
    $6 = HEAP32[$__dc>>2]|0;
    $incdec$ptr19 = ((($5)) + 4|0);
    HEAP32[$__g_end>>2] = $incdec$ptr19;
    HEAP32[$5>>2] = $6;
    HEAP32[$__dc>>2] = 0;
    $retval$1 = 0;
    break;
   }
   $add$ptr = ((($__atoms)) + 26|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(26);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $7 = HEAP8[$__first$addr$0$i$ptr>>0]|0;
    $cmp2$i = ($7<<24>>24)==($__ct<<24>>24);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp2$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast23 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast24 = $__atoms;
   $sub$ptr$sub25 = (($sub$ptr$lhs$cast23) - ($sub$ptr$rhs$cast24))|0;
   $cmp26 = ($sub$ptr$sub25|0)>(23);
   if ($cmp26) {
    $retval$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $cmp29 = ($sub$ptr$sub25|0)<($__base|0);
     if (!($cmp29)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $cmp33 = ($sub$ptr$sub25|0)<(22);
     if (!($cmp33)) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      $sub$ptr$lhs$cast38 = $0;
      $sub$ptr$rhs$cast39 = $__a;
      $sub$ptr$sub40 = (($sub$ptr$lhs$cast38) - ($sub$ptr$rhs$cast39))|0;
      $cmp41 = ($sub$ptr$sub40|0)<(3);
      if (!($cmp41)) {
       $retval$1 = -1;
       break L6;
      }
      $arrayidx43 = ((($0)) + -1|0);
      $8 = HEAP8[$arrayidx43>>0]|0;
      $cmp45 = ($8<<24>>24)==(48);
      if (!($cmp45)) {
       $retval$1 = -1;
       break L6;
      }
      $incdec$ptr48 = ((($0)) + 1|0);
      $arrayidx47 = (4960 + ($sub$ptr$sub25)|0);
      HEAP32[$__dc>>2] = 0;
      $9 = HEAP8[$arrayidx47>>0]|0;
      HEAP32[$__a_end>>2] = $incdec$ptr48;
      HEAP8[$0>>0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $arrayidx50 = (4960 + ($sub$ptr$sub25)|0);
    $10 = HEAP8[$arrayidx50>>0]|0;
    $incdec$ptr51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr51;
    HEAP8[$0>>0] = $10;
    $11 = HEAP32[$__dc>>2]|0;
    $inc = (($11) + 1)|0;
    HEAP32[$__dc>>2] = $inc;
    $retval$1 = 0;
   }
  }
 } while(0);
 return ($retval$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18704]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18704)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $call = (___newlocale(2147483647,12756,0)|0);
   HEAP32[5259] = $call;
  }
 }
 $2 = HEAP32[5259]|0;
 return ($2|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $__va = 0, $call = 0, $call$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call$i = (___uselocale($__l)|0);
 $call = (_vsscanf($__s,$__format,$__va)|0);
 $tobool$i = ($call$i|0)==(0|0);
 if (!($tobool$i)) {
  (___uselocale($call$i)|0);
 }
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__26locale2id5__getEv($this) {
 $this = $this|0;
 var $$fca$1$gep = 0, $0 = 0, $1 = 0, $__f$i = 0, $__id_ = 0, $__p$i = 0, $cmp$i = 0, $indirect$arg$temp$byval_copy2D2D = 0, $indirect$arg$temp2D2D = 0, $ref$tmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $indirect$arg$temp$byval_copy2D2D = sp + 32|0;
 $__f$i = sp + 24|0;
 $__p$i = sp + 20|0;
 $ref$tmp = sp + 8|0;
 $indirect$arg$temp2D2D = sp;
 HEAP32[$indirect$arg$temp2D2D>>2] = (333);
 $$fca$1$gep = ((($indirect$arg$temp2D2D)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$indirect$arg$temp$byval_copy2D2D>>2]=HEAP32[$indirect$arg$temp2D2D>>2]|0;HEAP32[$indirect$arg$temp$byval_copy2D2D+4>>2]=HEAP32[$indirect$arg$temp2D2D+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($ref$tmp,$indirect$arg$temp$byval_copy2D2D,$this);
 $0 = HEAP32[$this>>2]|0;
 $cmp$i = ($0|0)==(-1);
 if (!($cmp$i)) {
  HEAP32[$__f$i>>2] = $ref$tmp;
  HEAP32[$__p$i>>2] = $__f$i;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($this,$__p$i,334);
 }
 $__id_ = ((($this)) + 4|0);
 $1 = HEAP32[$__id_>>2]|0;
 $sub = (($1) + -1)|0;
 STACKTOP = sp;return ($sub|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $__begin_$i = 0, $arrayidx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = ((($this)) + 8|0);
 $0 = HEAP32[$__begin_$i>>2]|0;
 $arrayidx$i = (($0) + ($id<<2)|0);
 $1 = HEAP32[$arrayidx$i>>2]|0;
 return ($1|0);
}
function __ZNSt3__26locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__id_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5260]|0;
 $1 = (($0) + 1)|0;
 HEAP32[5260] = $1;
 $2 = (($0) + 1)|0;
 $__id_ = ((($this)) + 4|0);
 HEAP32[$__id_>>2] = $2;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this,$0,$id) {
 $this = $this|0;
 $0 = $0|0;
 $id = $id|0;
 var $pmf$elt1 = 0, $pmf$unpack = 0, $pmf$unpack2 = 0, $pmf_$repack = 0, $pmf_$repack4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pmf$unpack = HEAP32[$0>>2]|0;
 $pmf$elt1 = ((($0)) + 4|0);
 $pmf$unpack2 = HEAP32[$pmf$elt1>>2]|0;
 HEAP32[$this>>2] = $id;
 $pmf_$repack = ((($this)) + 4|0);
 HEAP32[$pmf_$repack>>2] = $pmf$unpack;
 $pmf_$repack4 = ((($this)) + 8|0);
 HEAP32[$pmf_$repack4>>2] = $pmf$unpack2;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__vp>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($1);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($this) {
 $this = $this|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $$elt = ((($this)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($this)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $1 = (($0) + ($memptr$adj$shifted)|0);
 $2 = $$unpack2 & 1;
 $memptr$isvirtual = ($2|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$1>>2]|0;
  $3 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$3>>2]|0;
  $4 = $memptr$virtualfn;
 }
 FUNCTION_TABLE_vi[$4 & 511]($1);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i17 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 231|0;
 $__thousands_sep = sp + 230|0;
 $__grouping = sp + 216|0;
 $__buf = sp + 204|0;
 $__a_end = sp + 200|0;
 $__g = sp;
 $__g_end = sp + 196|0;
 $__dc = sp + 192|0;
 $__in_units = sp + 229|0;
 $__exp = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__decimal_point>>0]|0;
  $27 = HEAP8[$__thousands_sep>>0]|0;
  $call14 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP8[$28>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF64[$__v>>3] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP8[$39>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP8[$45>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__loc = 0, $call$i = 0, $call$i11 = 0, $call$i5 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i7 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i6 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 32|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,4960,(4992),$__atoms)|0);
 $call$i5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21044)|0);
 $vtable$i6 = HEAP32[$call$i5>>2]|0;
 $vfn$i7 = ((($vtable$i6)) + 12|0);
 $1 = HEAP32[$vfn$i7>>2]|0;
 $call$i8 = (FUNCTION_TABLE_ii[$1 & 511]($call$i5)|0);
 HEAP8[$__decimal_point>>0] = $call$i8;
 $vtable$i9 = HEAP32[$call$i5>>2]|0;
 $vfn$i10 = ((($vtable$i9)) + 16|0);
 $2 = HEAP32[$vfn$i10>>2]|0;
 $call$i11 = (FUNCTION_TABLE_ii[$2 & 511]($call$i5)|0);
 HEAP8[$__thousands_sep>>0] = $call$i11;
 $vtable$i12 = HEAP32[$call$i5>>2]|0;
 $vfn$i13 = ((($vtable$i12)) + 20|0);
 $3 = HEAP32[$vfn$i13>>2]|0;
 FUNCTION_TABLE_vii[$3 & 511]($agg$result,$call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i$i40 = 0, $__size_$i$i49 = 0, $__size_$i3$i = 0, $__size_$i3$i42 = 0, $__size_$i3$i51 = 0, $add$ptr = 0, $and58 = 0;
 var $arrayidx = 0, $arrayidx42 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp14 = 0, $cmp2$i = 0, $cmp23 = 0, $cmp3 = 0, $cmp32 = 0, $cmp4 = 0, $cmp40 = 0, $cmp46 = 0, $cmp60 = 0, $cmp67 = 0, $cmp73 = 0, $cmp81 = 0, $cond$i = 0, $cond$i46 = 0, $cond$i55 = 0;
 var $conv$i$i = 0, $conv$i$i44 = 0, $conv$i$i53 = 0, $conv59 = 0, $conv63 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $incdec$ptr48 = 0, $incdec$ptr6 = 0, $incdec$ptr75 = 0, $incdec$ptr80 = 0, $incdec$ptr8057 = 0, $or = 0, $retval$2 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast19 = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$lhs$cast69 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast20 = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast70 = 0, $sub$ptr$sub = 0, $sub$ptr$sub21 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub71 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i41 = 0, $tobool$i$i50 = 0, $tobool16 = 0, $tobool64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($cmp) {
   $0 = HEAP8[$__in_units>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if ($tobool) {
    $retval$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $1 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr;
    HEAP8[$1>>0] = 46;
    $__size_$i$i = ((($__grouping)) + 11|0);
    $2 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i = ($2<<24>>24)<(0);
    $__size_$i3$i = ((($__grouping)) + 4|0);
    $3 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i = $2&255;
    $cond$i = $tobool$i$i ? $3 : $conv$i$i;
    $cmp3 = ($cond$i|0)==(0);
    if ($cmp3) {
     $retval$2 = 0;
    } else {
     $4 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $4;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp4 = ($sub$ptr$sub|0)<(160);
     if ($cmp4) {
      $5 = HEAP32[$__dc>>2]|0;
      $incdec$ptr6 = ((($4)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr6;
      HEAP32[$4>>2] = $5;
      $retval$2 = 0;
     } else {
      $retval$2 = 0;
     }
    }
   }
  } else {
   $cmp11 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($cmp11) {
    $__size_$i$i49 = ((($__grouping)) + 11|0);
    $6 = HEAP8[$__size_$i$i49>>0]|0;
    $tobool$i$i50 = ($6<<24>>24)<(0);
    $__size_$i3$i51 = ((($__grouping)) + 4|0);
    $7 = HEAP32[$__size_$i3$i51>>2]|0;
    $conv$i$i53 = $6&255;
    $cond$i55 = $tobool$i$i50 ? $7 : $conv$i$i53;
    $cmp14 = ($cond$i55|0)==(0);
    if (!($cmp14)) {
     $8 = HEAP8[$__in_units>>0]|0;
     $tobool16 = ($8<<24>>24)==(0);
     if ($tobool16) {
      $retval$2 = -1;
      break;
     }
     $9 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast19 = $9;
     $sub$ptr$rhs$cast20 = $__g;
     $sub$ptr$sub21 = (($sub$ptr$lhs$cast19) - ($sub$ptr$rhs$cast20))|0;
     $cmp23 = ($sub$ptr$sub21|0)<(160);
     if (!($cmp23)) {
      $retval$2 = 0;
      break;
     }
     $10 = HEAP32[$__dc>>2]|0;
     $incdec$ptr25 = ((($9)) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr25;
     HEAP32[$9>>2] = $10;
     HEAP32[$__dc>>2] = 0;
     $retval$2 = 0;
     break;
    }
   }
   $add$ptr = ((($__atoms)) + 32|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(32);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $11 = HEAP8[$__first$addr$0$i$ptr>>0]|0;
    $cmp2$i = ($11<<24>>24)==($__ct<<24>>24);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp2$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast29 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast30 = $__atoms;
   $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
   $cmp32 = ($sub$ptr$sub31|0)>(31);
   if ($cmp32) {
    $retval$2 = -1;
   } else {
    $arrayidx = (4960 + ($sub$ptr$sub31)|0);
    $12 = HEAP8[$arrayidx>>0]|0;
    switch ($sub$ptr$sub31|0) {
    case 24: case 25:  {
     $13 = HEAP32[$__a_end>>2]|0;
     $cmp40 = ($13|0)==($__a|0);
     if (!($cmp40)) {
      $arrayidx42 = ((($13)) + -1|0);
      $14 = HEAP8[$arrayidx42>>0]|0;
      $15 = $14 & 95;
      $16 = HEAP8[$__exp>>0]|0;
      $17 = $16 & 127;
      $cmp46 = ($15<<24>>24)==($17<<24>>24);
      if (!($cmp46)) {
       $retval$2 = -1;
       break L1;
      }
     }
     $incdec$ptr48 = ((($13)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr48;
     HEAP8[$13>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $18 = HEAP32[$__a_end>>2]|0;
     $incdec$ptr8057 = ((($18)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr8057;
     HEAP8[$18>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    default: {
     $19 = $12 & 95;
     $and58 = $19&255;
     $20 = HEAP8[$__exp>>0]|0;
     $conv59 = $20 << 24 >> 24;
     $cmp60 = ($and58|0)==($conv59|0);
     if ($cmp60) {
      $or = $and58 | 128;
      $conv63 = $or&255;
      HEAP8[$__exp>>0] = $conv63;
      $21 = HEAP8[$__in_units>>0]|0;
      $tobool64 = ($21<<24>>24)==(0);
      if (!($tobool64)) {
       HEAP8[$__in_units>>0] = 0;
       $__size_$i$i40 = ((($__grouping)) + 11|0);
       $22 = HEAP8[$__size_$i$i40>>0]|0;
       $tobool$i$i41 = ($22<<24>>24)<(0);
       $__size_$i3$i42 = ((($__grouping)) + 4|0);
       $23 = HEAP32[$__size_$i3$i42>>2]|0;
       $conv$i$i44 = $22&255;
       $cond$i46 = $tobool$i$i41 ? $23 : $conv$i$i44;
       $cmp67 = ($cond$i46|0)==(0);
       if (!($cmp67)) {
        $24 = HEAP32[$__g_end>>2]|0;
        $sub$ptr$lhs$cast69 = $24;
        $sub$ptr$rhs$cast70 = $__g;
        $sub$ptr$sub71 = (($sub$ptr$lhs$cast69) - ($sub$ptr$rhs$cast70))|0;
        $cmp73 = ($sub$ptr$sub71|0)<(160);
        if ($cmp73) {
         $25 = HEAP32[$__dc>>2]|0;
         $incdec$ptr75 = ((($24)) + 4|0);
         HEAP32[$__g_end>>2] = $incdec$ptr75;
         HEAP32[$24>>2] = $25;
        }
       }
      }
     }
     $26 = HEAP32[$__a_end>>2]|0;
     $incdec$ptr80 = ((($26)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr80;
     HEAP8[$26>>0] = $12;
     $cmp81 = ($sub$ptr$sub31|0)>(21);
     if ($cmp81) {
      $retval$2 = 0;
      break L1;
     }
     $27 = HEAP32[$__dc>>2]|0;
     $inc = (($27) + 1)|0;
     HEAP32[$__dc>>2] = $inc;
     $retval$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call$i = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $cmp9 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call$i = (__ZNSt3__26__clocEv()|0);
  $call1$i = (+_strtold_l($__a,$__p2,$call$i));
  $call3 = (___errno_location()|0);
  $1 = HEAP32[$call3>>2]|0;
  $cmp4 = ($1|0)==(0);
  if ($cmp4) {
   $call6 = (___errno_location()|0);
   HEAP32[$call6>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp7 = ($2|0)==($__a_end|0);
  if ($cmp7) {
   $cmp9 = ($1|0)==(34);
   if ($cmp9) {
    $retval$0$ph = $call1$i;
    label = 6;
   } else {
    $retval$0 = $call1$i;
   }
  } else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$pre = 0, $$pre39 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$i = 0, $__ig$0 = 0, $__last$addr$0$i$i = 0, $__r$0 = 0, $__size_$i$i = 0;
 var $__size_$i3$i = 0, $add$ptr = 0, $add$ptr3 = 0, $cmp = 0, $cmp$i$i = 0, $cmp1$i$i = 0, $cmp12 = 0, $cmp15 = 0, $cmp4 = 0, $cmp5 = 0, $cmp9 = 0, $cond$i = 0, $cond$i$i30 = 0, $cond$i28 = 0, $conv$i$i = 0, $conv$i$i26$pre$phiZZZ2D = 0, $conv11 = 0, $conv27 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0;
 var $incdec$ptr18 = 0, $incdec$ptr2$i$i = 0, $or$cond32 = 0, $spec$select = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($__grouping)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__grouping)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $cmp = ($cond$i|0)==(0);
 do {
  if (!($cmp)) {
   $cmp$i$i = ($__g|0)==($__g_end|0);
   if ($cmp$i$i) {
    $4 = $0;$6 = $1;$conv$i$i26$pre$phiZZZ2D = $conv$i$i;
   } else {
    $__first$addr$0$i$i = $__g;$__last$addr$0$i$i = $__g_end;
    while(1) {
     $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -4|0);
     $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
     if (!($cmp1$i$i)) {
      break;
     }
     $2 = HEAP32[$__first$addr$0$i$i>>2]|0;
     $3 = HEAP32[$incdec$ptr$i$i>>2]|0;
     HEAP32[$__first$addr$0$i$i>>2] = $3;
     HEAP32[$incdec$ptr$i$i>>2] = $2;
     $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 4|0);
     $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
    }
    $$pre = HEAP8[$__size_$i$i>>0]|0;
    $$pre39 = HEAP32[$__size_$i3$i>>2]|0;
    $$pre40 = $$pre&255;
    $4 = $$pre;$6 = $$pre39;$conv$i$i26$pre$phiZZZ2D = $$pre40;
   }
   $tobool$i$i$i = ($4<<24>>24)<(0);
   $5 = HEAP32[$__grouping>>2]|0;
   $cond$i$i30 = $tobool$i$i$i ? $5 : $__grouping;
   $cond$i28 = $tobool$i$i$i ? $6 : $conv$i$i26$pre$phiZZZ2D;
   $add$ptr = (($cond$i$i30) + ($cond$i28)|0);
   $add$ptr3 = ((($__g_end)) + -4|0);
   $sub$ptr$lhs$cast = $add$ptr;
   $__ig$0 = $cond$i$i30;$__r$0 = $__g;
   while(1) {
    $cmp4 = ($__r$0>>>0)<($add$ptr3>>>0);
    $7 = HEAP8[$__ig$0>>0]|0;
    $cmp5 = ($7<<24>>24)>(0);
    $cmp9 = ($7<<24>>24)!=(127);
    $or$cond32 = $cmp5 & $cmp9;
    if (!($cmp4)) {
     break;
    }
    if ($or$cond32) {
     $conv11 = $7 << 24 >> 24;
     $8 = HEAP32[$__r$0>>2]|0;
     $cmp12 = ($8|0)==($conv11|0);
     if (!($cmp12)) {
      label = 11;
      break;
     }
    }
    $sub$ptr$rhs$cast = $__ig$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp15 = ($sub$ptr$sub|0)>(1);
    $incdec$ptr = ((($__ig$0)) + 1|0);
    $spec$select = $cmp15 ? $incdec$ptr : $__ig$0;
    $incdec$ptr18 = ((($__r$0)) + 4|0);
    $__ig$0 = $spec$select;$__r$0 = $incdec$ptr18;
   }
   if ((label|0) == 11) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $conv27 = $7 << 24 >> 24;
    $9 = HEAP32[$add$ptr3>>2]|0;
    $10 = (($9) + -1)|0;
    $11 = ($10>>>0)<($conv27>>>0);
    if (!($11)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i17 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 231|0;
 $__thousands_sep = sp + 230|0;
 $__grouping = sp + 216|0;
 $__buf = sp + 204|0;
 $__a_end = sp + 200|0;
 $__g = sp;
 $__g_end = sp + 196|0;
 $__dc = sp + 192|0;
 $__in_units = sp + 229|0;
 $__exp = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__decimal_point>>0]|0;
  $27 = HEAP8[$__thousands_sep>>0]|0;
  $call14 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP8[$28>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF64[$__v>>3] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP8[$39>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP8[$45>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call$i = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $cmp9 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call$i = (__ZNSt3__26__clocEv()|0);
  $call1$i = (+_strtod_l($__a,$__p2,$call$i));
  $call3 = (___errno_location()|0);
  $1 = HEAP32[$call3>>2]|0;
  $cmp4 = ($1|0)==(0);
  if ($cmp4) {
   $call6 = (___errno_location()|0);
   HEAP32[$call6>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp7 = ($2|0)==($__a_end|0);
  if ($cmp7) {
   $cmp9 = ($1|0)==(34);
   if ($cmp9) {
    $retval$0$ph = $call1$i;
    label = 6;
   } else {
    $retval$0 = $call1$i;
   }
  } else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i17 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 231|0;
 $__thousands_sep = sp + 230|0;
 $__grouping = sp + 216|0;
 $__buf = sp + 204|0;
 $__a_end = sp + 200|0;
 $__g = sp;
 $__g_end = sp + 196|0;
 $__dc = sp + 192|0;
 $__in_units = sp + 229|0;
 $__exp = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__decimal_point>>0]|0;
  $27 = HEAP8[$__thousands_sep>>0]|0;
  $call14 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($conv$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP8[$28>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF32[$__v>>2] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP8[$39>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP8[$45>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call$i = 0, $call1 = 0, $call1$i = 0.0, $call3 = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $cmp9 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call$i = (__ZNSt3__26__clocEv()|0);
  $call1$i = (+_strtof_l($__a,$__p2,$call$i));
  $call3 = (___errno_location()|0);
  $1 = HEAP32[$call3>>2]|0;
  $cmp4 = ($1|0)==(0);
  if ($cmp4) {
   $call6 = (___errno_location()|0);
   HEAP32[$call6>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp7 = ($2|0)==($__a_end|0);
  if ($cmp7) {
   $cmp9 = ($1|0)==(34);
   if ($cmp9) {
    $retval$0$ph = $call1$i;
    label = 6;
   } else {
    $retval$0 = $call1$i;
   }
  } else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0;
 var $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call3$i$i = 0;
 var $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0;
 var $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0, $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0;
 var $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$54 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$45 = 0;$55 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$45 = 0;$55 = 1;
   } else {
    $21 = $4;$45 = $54;$55 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($55) {
      $56 = $9;
      break;
     } else {
      $48 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $56 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $48 = $56;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$54 = $45;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $36 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 $37 = (getTempRet0() | 0);
 $38 = $__v;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$42,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $57 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $43 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $44 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($43|0)==($44|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$45>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $46 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$46 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $47 = HEAP8[$43>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $57 = 1;
  } else {
   $57 = 0;
  }
 }
 $tobool$i2$i$i = ($48|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($48)) + 12|0);
   $49 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($48)) + 16|0);
   $50 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($49|0)==($50|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$48>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $51 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$51 & 511]($48)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $52 = HEAP8[$49>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($52)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($57) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($57) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $53 = HEAP32[$__err>>2]|0;
  $or = $53 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $0 = 0, $__fmtflags_$i = 0, $and = 0, $retval$0 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = ((($iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 74;
 $trunc = $and&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $retval$0 = 8;
  break;
 }
 case 8:  {
  $retval$0 = 16;
  break;
 }
 case 0:  {
  $retval$0 = 0;
  break;
 }
 default: {
  $retval$0 = 10;
 }
 }
 return ($retval$0|0);
}
function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms) {
 $this = $this|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this,$__iob,$__atoms)|0);
 return ($call|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($agg$result,$__iob,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $__loc = 0, $call$i = 0, $call$i3 = 0, $vfn$i = 0, $vfn$i5 = 0, $vtable$i = 0, $vtable$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21044)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 16|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i3 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 HEAP8[$__thousands_sep>>0] = $call$i3;
 $vtable$i4 = HEAP32[$call$i>>2]|0;
 $vfn$i5 = ((($vtable$i4)) + 20|0);
 $1 = HEAP32[$vfn$i5>>2]|0;
 FUNCTION_TABLE_vii[$1 & 511]($agg$result,$call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $6 = 0;$7 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $6 = 0;$7 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = (getTempRet0() | 0);
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if ($cmp11) {
    $cmp13 = ($4|0)==(34);
    if ($cmp13) {
     $8 = -1;$9 = -1;
     label = 8;
    } else {
     $10 = $2;$11 = $3;
    }
   } else {
    $8 = 0;$9 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$__err>>2] = 4;
    $10 = $8;$11 = $9;
   }
   $6 = $11;$7 = $10;
  }
 } while(0);
 setTempRet0(($6) | 0);
 STACKTOP = sp;return ($7|0);
}
function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this,$__iob,$__atoms) {
 $this = $this|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4960|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP8[$37>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP8[$43>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0;
 var $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = (getTempRet0() | 0);
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(4294967295);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $retval$0 = $2;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP8[$37>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP8[$43>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0;
 var $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = (getTempRet0() | 0);
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(4294967295);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $retval$0 = $2;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP16[$__v>>1] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP8[$37>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP8[$43>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = (getTempRet0() | 0);
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(65535);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $11 = $2&65535;
      $retval$0 = $11;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0;
 var $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call3$i$i = 0;
 var $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0;
 var $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0, $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0;
 var $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$54 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$45 = 0;$55 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$45 = 0;$55 = 1;
   } else {
    $21 = $4;$45 = $54;$55 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($55) {
      $56 = $9;
      break;
     } else {
      $48 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $56 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $48 = $56;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$54 = $45;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $36 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 $37 = (getTempRet0() | 0);
 $38 = $__v;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$42,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $57 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $43 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $44 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($43|0)==($44|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$45>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $46 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$46 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $47 = HEAP8[$43>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $57 = 1;
  } else {
   $57 = 0;
  }
 }
 $tobool$i2$i$i = ($48|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($48)) + 12|0);
   $49 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($48)) + 16|0);
   $50 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($49|0)==($50|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$48>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $51 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$51 & 511]($48)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $52 = HEAP8[$49>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($52)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($57) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($57) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $53 = HEAP32[$__err>>2]|0;
  $or = $53 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $12 = 0;$13 = 0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
  $2 = (getTempRet0() | 0);
  $call4 = (___errno_location()|0);
  $3 = HEAP32[$call4>>2]|0;
  $cmp5 = ($3|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $4 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($4|0)==($__a_end|0);
  if ($cmp8) {
   $cmp10 = ($3|0)==(34);
   if ($cmp10) {
    HEAP32[$__err>>2] = 4;
    $5 = ($2|0)>(0);
    $6 = ($1>>>0)>(0);
    $7 = ($2|0)==(0);
    $8 = $7 & $6;
    $9 = $5 | $8;
    $10 = $9 ? -1 : 0;
    $11 = $9 ? 2147483647 : -2147483648;
    $14 = $10;$15 = $11;
   } else {
    $14 = $1;$15 = $2;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $14 = 0;$15 = 0;
  }
  $12 = $15;$13 = $14;
 }
 setTempRet0(($12) | 0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__thousands_sep = sp + 224|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 212|0;
 $__buf = sp + 200|0;
 $__a_end = sp + 196|0;
 $__g = sp;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP8[$5>>0]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP8[$10>>0]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP8[$22>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $26 = HEAP8[$__thousands_sep>>0]|0;
  $call15 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($conv$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 1|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP8[$27>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP8[$37>>0]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP8[$43>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
  $2 = (getTempRet0() | 0);
  $call4 = (___errno_location()|0);
  $3 = HEAP32[$call4>>2]|0;
  $cmp5 = ($3|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $4 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($4|0)==($__a_end|0);
  L7: do {
   if ($cmp8) {
    $cmp10 = ($3|0)==(34);
    do {
     if ($cmp10) {
      HEAP32[$__err>>2] = 4;
      $15 = ($2|0)>(0);
      $16 = ($1>>>0)>(0);
      $17 = ($2|0)==(0);
      $18 = $17 & $16;
      $19 = $15 | $18;
      if ($19) {
       $retval$0 = 2147483647;
       break L7;
      }
     } else {
      $5 = ($2|0)<(-1);
      $6 = ($1>>>0)<(2147483648);
      $7 = ($2|0)==(-1);
      $8 = $7 & $6;
      $9 = $5 | $8;
      if ($9) {
       HEAP32[$__err>>2] = 4;
       break;
      }
      $10 = ($2|0)>(0);
      $11 = ($1>>>0)>(2147483647);
      $12 = ($2|0)==(0);
      $13 = $12 & $11;
      $14 = $10 | $13;
      if ($14) {
       HEAP32[$__err>>2] = 4;
       $retval$0 = 2147483647;
       break L7;
      } else {
       $retval$0 = $1;
       break L7;
      }
     }
    } while(0);
    $retval$0 = -2147483648;
   } else {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
   }
  } while(0);
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i86 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i73 = 0, $__einp_$i$i114 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i94 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0143 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky55$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0;
 var $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i72 = 0, $__ninp_$i$i113 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i93 = 0, $__size_$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i3$i = 0, $__size_$i3$i$i = 0, $__size_$i3$i128 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0;
 var $add = 0, $add$ptr$i = 0, $add52 = 0, $call$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i78 = 0, $call$i$i118 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i99 = 0, $call$i124 = 0, $call1 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i80 = 0, $call3$i$i$i83 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i101 = 0, $call3$i$i120 = 0, $call3$i14$i$i = 0, $call3$i14$i$i104 = 0;
 var $call4$i$i$i = 0, $call4$i$i$i84 = 0, $call4$i15$i$i = 0, $call4$i15$i$i105 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i74 = 0, $cmp$i$i115 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i95 = 0, $cmp12 = 0, $cmp2 = 0, $cmp21 = 0, $cmp24 = 0, $cmp33 = 0, $cmp36 = 0, $cmp5 = 0, $cmp53 = 0;
 var $cmp57 = 0, $cmp61 = 0, $cmp64 = 0, $cmp81 = 0, $cmp84 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i132 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i130 = 0, $dec = 0, $dec38 = 0, $dec42 = 0, $dec66 = 0, $inc = 0, $inc39 = 0, $incdec$ptr = 0;
 var $incdec$ptr$i$i = 0, $incdec$ptr46 = 0, $incdec$ptr47 = 0, $incdec$ptr69 = 0, $incdec$ptr70 = 0, $incdec$ptr88 = 0, $incdec$ptr89 = 0, $incdec$ptr9 = 0, $or = 0, $or93 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i82 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i103 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i69 = 0, $tobool$i$i$i71 = 0, $tobool$i$i127 = 0, $tobool$i$i67 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i91 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i77 = 0, $vfn$i$i117 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i98 = 0, $vfn$i123 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i76 = 0, $vtable$i$i116 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i97 = 0, $vtable$i122 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 if ($cmp) {
  $call1 = (_malloc($sub$ptr$div$i$i)|0);
  $cmp2 = ($call1|0)==(0|0);
  if ($cmp2) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__stat_hold$sroa$0$0 = $call1;$__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;$__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $sub$ptr$div$i$i;$__st$0 = $__status$0;
 while(1) {
  $cmp5 = ($__ky$0|0)==($__ke|0);
  if ($cmp5) {
   break;
  }
  $__size_$i$i$i = ((($__ky$0)) + 11|0);
  $0 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i$i) {
   $__size_$i3$i$i = ((($__ky$0)) + 4|0);
   $1 = HEAP32[$__size_$i3$i$i>>2]|0;
   $cond$i$i = $1;
  } else {
   $conv$i$i$i = $0&255;
   $cond$i$i = $conv$i$i$i;
  }
  $cmp$i = ($cond$i$i|0)==(0);
  if ($cmp$i) {
   HEAP8[$__st$0>>0] = 2;
   $dec = (($__n_might_match$0) + -1)|0;
   $inc = (($__n_does_match$0) + 1)|0;
   $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
  } else {
   HEAP8[$__st$0>>0] = 1;
   $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
  }
  $incdec$ptr = ((($__ky$0)) + 12|0);
  $incdec$ptr9 = ((($__st$0)) + 1|0);
  $__ky$0 = $incdec$ptr;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $incdec$ptr9;
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0;$__n_might_match$2 = $__n_might_match$0;
 while(1) {
  $2 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i69 = ($2|0)==(0|0);
  do {
   if ($tobool$i$i$i69) {
    $13 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($2)) + 12|0);
    $3 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($2)) + 16|0);
    $4 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($3|0)==($4|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$2>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $5 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$5 & 511]($2)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $6 = HEAP8[$3>>0]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($6)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $13 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $13 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $7 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($7|0)==(0|0);
  if ($tobool$i2$i$i) {
   $14 = 1;$21 = 0;
  } else {
   $__ninp_$i$i3$i$i = ((($7)) + 12|0);
   $8 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($7)) + 16|0);
   $9 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($8|0)==($9|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$7>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $10 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $11 = HEAP8[$8>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    $14 = 1;$21 = 0;
   } else {
    $14 = 0;$21 = $7;
   }
  }
  $12 = $13 ^ $14;
  $cmp12 = ($__n_might_match$2|0)!=(0);
  $15 = $cmp12 & $12;
  $16 = HEAP32[$__b>>2]|0;
  if (!($15)) {
   break;
  }
  $__ninp_$i$i113 = ((($16)) + 12|0);
  $26 = HEAP32[$__ninp_$i$i113>>2]|0;
  $__einp_$i$i114 = ((($16)) + 16|0);
  $27 = HEAP32[$__einp_$i$i114>>2]|0;
  $cmp$i$i115 = ($26|0)==($27|0);
  if ($cmp$i$i115) {
   $vtable$i$i116 = HEAP32[$16>>2]|0;
   $vfn$i$i117 = ((($vtable$i$i116)) + 36|0);
   $28 = HEAP32[$vfn$i$i117>>2]|0;
   $call$i$i118 = (FUNCTION_TABLE_ii[$28 & 511]($16)|0);
   $retval$0$i$i = $call$i$i118;
  } else {
   $29 = HEAP8[$26>>0]|0;
   $call3$i$i120 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
   $retval$0$i$i = $call3$i$i120;
  }
  $conv$i = $retval$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $conv$i;
  } else {
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 12|0);
   $30 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iii[$30 & 511]($__ct,$conv$i)|0);
   $__c$0 = $call$i;
  }
  $add = (($__indx$0) + 1)|0;
  $__consume$0$off0 = 0;$__ky19$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
  while(1) {
   $cmp21 = ($__ky19$0|0)==($__ke|0);
   if ($cmp21) {
    break;
   }
   $31 = HEAP8[$__st$1>>0]|0;
   $cmp24 = ($31<<24>>24)==(1);
   do {
    if ($cmp24) {
     $__size_$i$i$i$i = ((($__ky19$0)) + 11|0);
     $32 = HEAP8[$__size_$i$i$i$i>>0]|0;
     $tobool$i$i$i$i = ($32<<24>>24)<(0);
     if ($tobool$i$i$i$i) {
      $33 = HEAP32[$__ky19$0>>2]|0;
      $cond$i$i$i = $33;
     } else {
      $cond$i$i$i = $__ky19$0;
     }
     $add$ptr$i = (($cond$i$i$i) + ($__indx$0)|0);
     $34 = HEAP8[$add$ptr$i>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $34;
     } else {
      $vtable$i122 = HEAP32[$__ct>>2]|0;
      $vfn$i123 = ((($vtable$i122)) + 12|0);
      $35 = HEAP32[$vfn$i123>>2]|0;
      $call$i124 = (FUNCTION_TABLE_iii[$35 & 511]($__ct,$34)|0);
      $__kc$0 = $call$i124;
     }
     $cmp33 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($cmp33)) {
      HEAP8[$__st$1>>0] = 0;
      $dec42 = (($__n_might_match$3) + -1)|0;
      $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $dec42;
      break;
     }
     $36 = HEAP8[$__size_$i$i$i$i>>0]|0;
     $tobool$i$i127 = ($36<<24>>24)<(0);
     if ($tobool$i$i127) {
      $__size_$i3$i128 = ((($__ky19$0)) + 4|0);
      $37 = HEAP32[$__size_$i3$i128>>2]|0;
      $cond$i132 = $37;
     } else {
      $conv$i$i130 = $36&255;
      $cond$i132 = $conv$i$i130;
     }
     $cmp36 = ($cond$i132|0)==($add|0);
     if ($cmp36) {
      $dec38 = (($__n_might_match$3) + -1)|0;
      $inc39 = (($__n_does_match$3) + 1)|0;
      HEAP8[$__st$1>>0] = 2;
      $__consume$2$off0 = 1;$__n_does_match$5 = $inc39;$__n_might_match$5 = $dec38;
     } else {
      $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
     }
    } else {
     $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
    }
   } while(0);
   $incdec$ptr46 = ((($__ky19$0)) + 12|0);
   $incdec$ptr47 = ((($__st$1)) + 1|0);
   $__consume$0$off0 = $__consume$2$off0;$__ky19$0 = $incdec$ptr46;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $incdec$ptr47;
  }
  L67: do {
   if ($__consume$0$off0) {
    $38 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i = ((($38)) + 12|0);
    $39 = HEAP32[$__ninp_$i$i>>2]|0;
    $__einp_$i$i = ((($38)) + 16|0);
    $40 = HEAP32[$__einp_$i$i>>2]|0;
    $cmp$i$i = ($39|0)==($40|0);
    if ($cmp$i$i) {
     $vtable$i$i = HEAP32[$38>>2]|0;
     $vfn$i$i = ((($vtable$i$i)) + 40|0);
     $41 = HEAP32[$vfn$i$i>>2]|0;
     (FUNCTION_TABLE_ii[$41 & 511]($38)|0);
    } else {
     $incdec$ptr$i$i = ((($39)) + 1|0);
     HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
     $42 = HEAP8[$39>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
    }
    $add52 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $cmp53 = ($add52>>>0)>(1);
    if ($cmp53) {
     $__ky55$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
     while(1) {
      $cmp57 = ($__ky55$0|0)==($__ke|0);
      if ($cmp57) {
       $__n_does_match$2$be = $__n_does_match$6;
       break L67;
      }
      $43 = HEAP8[$__st$2>>0]|0;
      $cmp61 = ($43<<24>>24)==(2);
      if ($cmp61) {
       $__size_$i$i = ((($__ky55$0)) + 11|0);
       $44 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i67 = ($44<<24>>24)<(0);
       if ($tobool$i$i67) {
        $__size_$i3$i = ((($__ky55$0)) + 4|0);
        $45 = HEAP32[$__size_$i3$i>>2]|0;
        $cond$i = $45;
       } else {
        $conv$i$i = $44&255;
        $cond$i = $conv$i$i;
       }
       $cmp64 = ($cond$i|0)==($add|0);
       if ($cmp64) {
        $__n_does_match$7 = $__n_does_match$6;
       } else {
        $dec66 = (($__n_does_match$6) + -1)|0;
        HEAP8[$__st$2>>0] = 0;
        $__n_does_match$7 = $dec66;
       }
      } else {
       $__n_does_match$7 = $__n_does_match$6;
      }
      $incdec$ptr69 = ((($__ky55$0)) + 12|0);
      $incdec$ptr70 = ((($__st$2)) + 1|0);
      $__ky55$0 = $incdec$ptr69;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $incdec$ptr70;
     }
    } else {
     $__n_does_match$2$be = $__n_does_match$3;
    }
   } else {
    $__n_does_match$2$be = $__n_does_match$3;
   }
  } while(0);
  $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$2$be;$__n_might_match$2 = $__n_might_match$3;
 }
 $tobool$i$i$i71 = ($16|0)==(0|0);
 do {
  if ($tobool$i$i$i71) {
   $49 = 1;
  } else {
   $__ninp_$i$i$i$i72 = ((($16)) + 12|0);
   $17 = HEAP32[$__ninp_$i$i$i$i72>>2]|0;
   $__einp_$i$i$i$i73 = ((($16)) + 16|0);
   $18 = HEAP32[$__einp_$i$i$i$i73>>2]|0;
   $cmp$i$i$i$i74 = ($17|0)==($18|0);
   if ($cmp$i$i$i$i74) {
    $vtable$i$i$i$i76 = HEAP32[$16>>2]|0;
    $vfn$i$i$i$i77 = ((($vtable$i$i$i$i76)) + 36|0);
    $19 = HEAP32[$vfn$i$i$i$i77>>2]|0;
    $call$i$i$i$i78 = (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
    $retval$0$i$i$i$i82 = $call$i$i$i$i78;
   } else {
    $20 = HEAP8[$17>>0]|0;
    $call3$i$i$i$i80 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($20)|0);
    $retval$0$i$i$i$i82 = $call3$i$i$i$i80;
   }
   $call3$i$i$i83 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i84 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i82,$call3$i$i$i83)|0);
   if ($call4$i$i$i84) {
    HEAP32[$__b>>2] = 0;
    $49 = 1;
    break;
   } else {
    $$pre$i$i$i86 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i87 = ($$pre$i$i$i86|0)==(0|0);
    $49 = $phitmp$i$i$i87;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i91 = ($21|0)==(0|0);
 do {
  if ($tobool$i2$i$i91) {
   label = 41;
  } else {
   $__ninp_$i$i3$i$i93 = ((($21)) + 12|0);
   $22 = HEAP32[$__ninp_$i$i3$i$i93>>2]|0;
   $__einp_$i$i4$i$i94 = ((($21)) + 16|0);
   $23 = HEAP32[$__einp_$i$i4$i$i94>>2]|0;
   $cmp$i$i5$i$i95 = ($22|0)==($23|0);
   if ($cmp$i$i5$i$i95) {
    $vtable$i$i7$i$i97 = HEAP32[$21>>2]|0;
    $vfn$i$i8$i$i98 = ((($vtable$i$i7$i$i97)) + 36|0);
    $24 = HEAP32[$vfn$i$i8$i$i98>>2]|0;
    $call$i$i9$i$i99 = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
    $retval$0$i$i13$i$i103 = $call$i$i9$i$i99;
   } else {
    $25 = HEAP8[$22>>0]|0;
    $call3$i$i11$i$i101 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
    $retval$0$i$i13$i$i103 = $call3$i$i11$i$i101;
   }
   $call3$i14$i$i104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i103,$call3$i14$i$i104)|0);
   if ($call4$i15$i$i105) {
    HEAP32[$__e>>2] = 0;
    label = 41;
    break;
   } else {
    if ($49) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($49) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $46 = HEAP32[$__err>>2]|0;
  $or = $46 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
 while(1) {
  $cmp81 = ($__kb$addr$0|0)==($__ke|0);
  if ($cmp81) {
   label = 84;
   break;
  }
  $47 = HEAP8[$__st$3>>0]|0;
  $cmp84 = ($47<<24>>24)==(2);
  if ($cmp84) {
   $__kb$addr$0143 = $__kb$addr$0;
   break;
  }
  $incdec$ptr88 = ((($__kb$addr$0)) + 12|0);
  $incdec$ptr89 = ((($__st$3)) + 1|0);
  $__kb$addr$0 = $incdec$ptr88;$__st$3 = $incdec$ptr89;
 }
 if ((label|0) == 84) {
  $48 = HEAP32[$__err>>2]|0;
  $or93 = $48 | 4;
  HEAP32[$__err>>2] = $or93;
  $__kb$addr$0143 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;return ($__kb$addr$0143|0);
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $and = 0, $arraydestroy$done = 0;
 var $arraydestroy$element = 0, $arraydestroy$elementPast = 0, $arrayinit$element = 0, $call$i = 0, $call$i16 = 0, $call11 = 0, $call3 = 0, $cmp = 0, $cmp13 = 0, $frombool = 0, $ref$tmp5 = 0, $ref$tmp7 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $retval$sroa$0$0$copyload15 = 0, $vfn = 0, $vfn$i = 0, $vfn$i18 = 0, $vtable = 0, $vtable$i = 0;
 var $vtable$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp9$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 52|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $__lv = sp + 44|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp2 = sp + 36|0;
 $ref$tmp5 = sp + 32|0;
 $ref$tmp7 = sp + 28|0;
 $__names = sp;
 $agg$tmp9 = sp + 24|0;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  HEAP32[$__lv>>2] = -1;
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $3 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp2>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
  $call3 = (FUNCTION_TABLE_iiiiiii[$1 & 255]($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv)|0);
  HEAP32[$__b>>2] = $call3;
  $4 = HEAP32[$__lv>>2]|0;
  switch ($4|0) {
  case 0:  {
   HEAP8[$__v>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$__v>>0] = 1;
   break;
  }
  default: {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  }
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($ref$tmp5,$__iob);
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp5,21060)|0);
  __ZNSt3__26localeD2Ev($ref$tmp5);
  __ZNKSt3__28ios_base6getlocEv($ref$tmp7,$__iob);
  $call$i16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp7,21068)|0);
  __ZNSt3__26localeD2Ev($ref$tmp7);
  $vtable$i = HEAP32[$call$i16>>2]|0;
  $vfn$i = ((($vtable$i)) + 24|0);
  $5 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$5 & 511]($__names,$call$i16);
  $arrayinit$element = ((($__names)) + 12|0);
  $vtable$i17 = HEAP32[$call$i16>>2]|0;
  $vfn$i18 = ((($vtable$i17)) + 28|0);
  $6 = HEAP32[$vfn$i18>>2]|0;
  FUNCTION_TABLE_vii[$6 & 511]($arrayinit$element,$call$i16);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp9>>2] = $7;
  $add$ptr = ((($__names)) + 24|0);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;
  $call11 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp9$byval_copy,$__names,$add$ptr,$call$i,$__err,1)|0);
  $cmp13 = ($call11|0)==($__names|0);
  $frombool = $cmp13&1;
  HEAP8[$__v>>0] = $frombool;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b>>2]|0;
  $arraydestroy$elementPast = $add$ptr;
  while(1) {
   $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element);
   $arraydestroy$done = ($arraydestroy$element|0)==($__names|0);
   if ($arraydestroy$done) {
    break;
   } else {
    $arraydestroy$elementPast = $arraydestroy$element;
   }
  }
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i23 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i44 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i12 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i22 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i43 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i88 = 0, $arrayidx$i$i = 0;
 var $arrayidx$i$i15 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i28 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i49 = 0, $call16 = 0, $call21 = 0, $call22 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i30 = 0, $call3$i$i$i33 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i51 = 0, $call3$i14$i$i = 0, $call3$i14$i$i54 = 0, $call4$i$i$i = 0;
 var $call4$i$i$i34 = 0, $call4$i15$i$i = 0, $call4$i15$i$i55 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i24 = 0, $cmp$i$i102 = 0, $cmp$i$i106 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i45 = 0, $cmp23 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i100 = 0, $cond$i65 = 0, $cond$i91 = 0, $conv$i$i = 0, $exitcond$i$i = 0, $exitcond$i$i13 = 0;
 var $inc$i$i = 0, $inc$i$i16 = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i89 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i32 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i53 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0;
 var $tobool$i$i$i19 = 0, $tobool$i$i$i21 = 0, $tobool$i$i$i95 = 0, $tobool$i$i63 = 0, $tobool$i$i86 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i41 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i27 = 0, $vfn$i$i108 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i48 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i26 = 0, $vtable$i$i107 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp + 264|0;
 $__atoms = sp + 160|0;
 $__grouping = sp + 296|0;
 $ref$tmp = sp + 292|0;
 $__buf = sp + 280|0;
 $__a_end = sp + 276|0;
 $__g = sp;
 $__g_end = sp + 272|0;
 $__dc = sp + 268|0;
 ;HEAP32[$__grouping>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 48|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,4960,(4986),$__atoms)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i12 = 0;
 while(1) {
  $exitcond$i$i13 = ($__i$0$i$i12|0)==(3);
  if ($exitcond$i$i13) {
   break;
  }
  $arrayidx$i$i15 = (($__buf) + ($__i$0$i$i12<<2)|0);
  HEAP32[$arrayidx$i$i15>>2] = 0;
  $inc$i$i16 = (($__i$0$i$i12) + 1)|0;
  $__i$0$i$i12 = $inc$i$i16;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $2 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i19 = ($3<<24>>24)<(0);
 $4 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i19 ? $4 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $45 = $$pre;$5 = $$pre;$__a$0 = $cond$i$i;
 L12: while(1) {
  $tobool$i$i$i21 = ($5|0)==(0|0);
  if ($tobool$i$i$i21) {
   $22 = 0;$36 = 0;$46 = 1;
  } else {
   $__ninp_$i$i$i$i22 = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i$i$i22>>2]|0;
   $__einp_$i$i$i$i23 = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i$i$i23>>2]|0;
   $cmp$i$i$i$i24 = ($6|0)==($7|0);
   if ($cmp$i$i$i$i24) {
    $vtable$i$i$i$i26 = HEAP32[$5>>2]|0;
    $vfn$i$i$i$i27 = ((($vtable$i$i$i$i26)) + 36|0);
    $8 = HEAP32[$vfn$i$i$i$i27>>2]|0;
    $call$i$i$i$i28 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i$i$i32 = $call$i$i$i$i28;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $call3$i$i$i$i30 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
    $retval$0$i$i$i$i32 = $call3$i$i$i$i30;
   }
   $call3$i$i$i33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i32,$call3$i$i$i33)|0);
   if ($call4$i$i$i34) {
    HEAP32[$__b>>2] = 0;
    $22 = 0;$36 = 0;$46 = 1;
   } else {
    $22 = $5;$36 = $45;$46 = 0;
   }
  }
  $10 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i41 = ($10|0)==(0|0);
  do {
   if ($tobool$i2$i$i41) {
    label = 22;
   } else {
    $__ninp_$i$i3$i$i43 = ((($10)) + 12|0);
    $11 = HEAP32[$__ninp_$i$i3$i$i43>>2]|0;
    $__einp_$i$i4$i$i44 = ((($10)) + 16|0);
    $12 = HEAP32[$__einp_$i$i4$i$i44>>2]|0;
    $cmp$i$i5$i$i45 = ($11|0)==($12|0);
    if ($cmp$i$i5$i$i45) {
     $vtable$i$i7$i$i47 = HEAP32[$10>>2]|0;
     $vfn$i$i8$i$i48 = ((($vtable$i$i7$i$i47)) + 36|0);
     $13 = HEAP32[$vfn$i$i8$i$i48>>2]|0;
     $call$i$i9$i$i49 = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
     $retval$0$i$i13$i$i53 = $call$i$i9$i$i49;
    } else {
     $14 = HEAP32[$11>>2]|0;
     $call3$i$i11$i$i51 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
     $retval$0$i$i13$i$i53 = $call3$i$i11$i$i51;
    }
    $call3$i14$i$i54 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i55 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i53,$call3$i14$i$i54)|0);
    if ($call4$i15$i$i55) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($46) {
      $47 = $10;
      break;
     } else {
      $39 = $10;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $47 = 0;
   }
  }
  $15 = HEAP32[$__a_end>>2]|0;
  $16 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i63 = ($16<<24>>24)<(0);
  $17 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $16&255;
  $cond$i65 = $tobool$i$i63 ? $17 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i65)|0);
  $cmp = ($15|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $18 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i86 = ($18<<24>>24)<(0);
   if ($tobool$i$i86) {
    $19 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i88 = $19 & 2147483647;
    $phitmp$i89 = (($and$i$i88) + -1)|0;
    $cond$i91 = $phitmp$i89;
   } else {
    $cond$i91 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i91,0);
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i95 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__buf>>2]|0;
   $cond$i$i100 = $tobool$i$i$i95 ? $21 : $__buf;
   $add$ptr12 = (($cond$i$i100) + ($cond$i65)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i100;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($22)) + 12|0);
  $23 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($22)) + 16|0);
  $24 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($23|0)==($24|0);
  if ($cmp$i$i102) {
   $vtable$i$i = HEAP32[$22>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $25 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$25 & 511]($22)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $26 = HEAP32[$23>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($26)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $call16 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $tobool = ($call16|0)==(0);
  if (!($tobool)) {
   $39 = $47;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i106 = ($27|0)==($28|0);
  if ($cmp$i$i106) {
   $vtable$i$i107 = HEAP32[$22>>2]|0;
   $vfn$i$i108 = ((($vtable$i$i107)) + 40|0);
   $29 = HEAP32[$vfn$i$i108>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($22)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $45 = $36;$5 = $22;$__a$0 = $__a$1;
 }
 $31 = HEAP32[$__a_end>>2]|0;
 $sub$ptr$rhs$cast = $__a$2;
 $sub$ptr$sub = (($31) - ($sub$ptr$rhs$cast))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$sub$ptr$sub,0);
 $32 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i$i = ($32<<24>>24)<(0);
 $33 = HEAP32[$__buf>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $33 : $__buf;
 $call21 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call22 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i,$call21,12753,$vararg_buffer)|0);
 $cmp23 = ($call22|0)==(1);
 if (!($cmp23)) {
  HEAP32[$__err>>2] = 4;
 }
 $tobool$i$i$i = ($22|0)==(0|0);
 if ($tobool$i$i$i) {
  $48 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($22)) + 12|0);
  $34 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($22)) + 16|0);
  $35 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($34|0)==($35|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$36>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $37 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$37 & 511]($22)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $38 = HEAP32[$34>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($38)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $48 = 1;
  } else {
   $48 = 0;
  }
 }
 $tobool$i2$i$i = ($39|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 50;
  } else {
   $__ninp_$i$i3$i$i = ((($39)) + 12|0);
   $40 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($39)) + 16|0);
   $41 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($40|0)==($41|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$39>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $42 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$42 & 511]($39)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $43 = HEAP32[$40>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   } else {
    if ($48) {
     break;
    } else {
     label = 52;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if ($48) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $44 = HEAP32[$__err>>2]|0;
  $or = $44 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $arrayidx = 0;
 var $arrayidx2 = 0, $arrayidx37 = 0, $arrayidx40 = 0, $arrayidx43 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0, $cmp20 = 0, $cmp23 = 0, $cmp27 = 0, $cmp3 = 0, $cmp35 = 0, $cmp38 = 0, $cmp6 = 0, $cmp8 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0;
 var $inc = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $incdec$ptr41 = 0, $incdec$ptr44 = 0, $or$cond = 0, $retval$1 = 0, $sub$ptr$div19 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$lhs$cast32 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast17 = 0, $sub$ptr$rhs$cast33 = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub34 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = ((($__atoms)) + 96|0);
   $1 = HEAP32[$arrayidx>>2]|0;
   $cmp1 = ($1|0)==($__ct|0);
   if (!($cmp1)) {
    $arrayidx2 = ((($__atoms)) + 100|0);
    $2 = HEAP32[$arrayidx2>>2]|0;
    $cmp3 = ($2|0)==($__ct|0);
    if (!($cmp3)) {
     label = 5;
     break;
    }
   }
   $cond = $cmp1 ? 43 : 45;
   $incdec$ptr = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $__size_$i$i = ((($__grouping)) + 11|0);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($3<<24>>24)<(0);
   $__size_$i3$i = ((($__grouping)) + 4|0);
   $4 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $3&255;
   $cond$i = $tobool$i$i ? $4 : $conv$i$i;
   $cmp6 = ($cond$i|0)!=(0);
   $cmp8 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $cmp8 & $cmp6;
   if ($or$cond) {
    $5 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast = $5;
    $sub$ptr$rhs$cast = $__g;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp10 = ($sub$ptr$sub|0)<(160);
    if (!($cmp10)) {
     $retval$1 = 0;
     break;
    }
    $6 = HEAP32[$__dc>>2]|0;
    $incdec$ptr12 = ((($5)) + 4|0);
    HEAP32[$__g_end>>2] = $incdec$ptr12;
    HEAP32[$5>>2] = $6;
    HEAP32[$__dc>>2] = 0;
    $retval$1 = 0;
    break;
   }
   $add$ptr = ((($__atoms)) + 104|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx<<2)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(26);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $7 = HEAP32[$__first$addr$0$i$ptr>>2]|0;
    $cmp1$i = ($7|0)==($__ct|0);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp1$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast16 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast17 = $__atoms;
   $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast17))|0;
   $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
   $cmp20 = ($sub$ptr$sub18|0)>(92);
   if ($cmp20) {
    $retval$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $cmp23 = ($sub$ptr$div19|0)<($__base|0);
     if (!($cmp23)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $cmp27 = ($sub$ptr$sub18|0)<(88);
     if (!($cmp27)) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      $sub$ptr$lhs$cast32 = $0;
      $sub$ptr$rhs$cast33 = $__a;
      $sub$ptr$sub34 = (($sub$ptr$lhs$cast32) - ($sub$ptr$rhs$cast33))|0;
      $cmp35 = ($sub$ptr$sub34|0)<(3);
      if (!($cmp35)) {
       $retval$1 = -1;
       break L6;
      }
      $arrayidx37 = ((($0)) + -1|0);
      $8 = HEAP8[$arrayidx37>>0]|0;
      $cmp38 = ($8<<24>>24)==(48);
      if (!($cmp38)) {
       $retval$1 = -1;
       break L6;
      }
      $incdec$ptr41 = ((($0)) + 1|0);
      $arrayidx40 = (4960 + ($sub$ptr$div19)|0);
      HEAP32[$__dc>>2] = 0;
      $9 = HEAP8[$arrayidx40>>0]|0;
      HEAP32[$__a_end>>2] = $incdec$ptr41;
      HEAP8[$0>>0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $arrayidx43 = (4960 + ($sub$ptr$div19)|0);
    $10 = HEAP8[$arrayidx43>>0]|0;
    $incdec$ptr44 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr44;
    HEAP8[$0>>0] = $10;
    $11 = HEAP32[$__dc>>2]|0;
    $inc = (($11) + 1)|0;
    HEAP32[$__dc>>2] = $inc;
    $retval$1 = 0;
   }
  }
 } while(0);
 return ($retval$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0;
 var $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 328|0;
 $__thousands_sep = sp + 324|0;
 $__grouping = sp + 312|0;
 $__buf = sp + 300|0;
 $__a_end = sp + 296|0;
 $__g = sp;
 $__g_end = sp + 292|0;
 $__dc = sp + 288|0;
 $__in_units = sp + 333|0;
 $__exp = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__decimal_point>>2]|0;
  $27 = HEAP32[$__thousands_sep>>2]|0;
  $call14 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP32[$28>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF64[$__v>>3] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP32[$39>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP32[$45>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__loc = 0, $call$i = 0, $call$i11 = 0, $call$i5 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i7 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i6 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 48|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,4960,(4992),$__atoms)|0);
 $call$i5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21068)|0);
 $vtable$i6 = HEAP32[$call$i5>>2]|0;
 $vfn$i7 = ((($vtable$i6)) + 12|0);
 $1 = HEAP32[$vfn$i7>>2]|0;
 $call$i8 = (FUNCTION_TABLE_ii[$1 & 511]($call$i5)|0);
 HEAP32[$__decimal_point>>2] = $call$i8;
 $vtable$i9 = HEAP32[$call$i5>>2]|0;
 $vfn$i10 = ((($vtable$i9)) + 16|0);
 $2 = HEAP32[$vfn$i10>>2]|0;
 $call$i11 = (FUNCTION_TABLE_ii[$2 & 511]($call$i5)|0);
 HEAP32[$__thousands_sep>>2] = $call$i11;
 $vtable$i12 = HEAP32[$call$i5>>2]|0;
 $vfn$i13 = ((($vtable$i12)) + 20|0);
 $3 = HEAP32[$vfn$i13>>2]|0;
 FUNCTION_TABLE_vii[$3 & 511]($agg$result,$call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i$i40 = 0, $__size_$i$i49 = 0, $__size_$i3$i = 0, $__size_$i3$i42 = 0;
 var $__size_$i3$i51 = 0, $add$ptr = 0, $and55 = 0, $arrayidx = 0, $arrayidx39 = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp11 = 0, $cmp2 = 0, $cmp20 = 0, $cmp3 = 0, $cmp30 = 0, $cmp37 = 0, $cmp43 = 0, $cmp57 = 0, $cmp64 = 0, $cmp70 = 0, $cmp78 = 0, $cmp8 = 0;
 var $cond$i = 0, $cond$i46 = 0, $cond$i55 = 0, $conv$i$i = 0, $conv$i$i44 = 0, $conv$i$i53 = 0, $conv56 = 0, $conv60 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr45 = 0, $incdec$ptr5 = 0, $incdec$ptr72 = 0, $incdec$ptr77 = 0, $or = 0, $retval$2 = 0, $sub$ptr$div29 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0;
 var $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast66 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast17 = 0, $sub$ptr$rhs$cast27 = 0, $sub$ptr$rhs$cast67 = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub68 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i41 = 0, $tobool$i$i50 = 0, $tobool13 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($cmp) {
   $0 = HEAP8[$__in_units>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if ($tobool) {
    $retval$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $1 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr;
    HEAP8[$1>>0] = 46;
    $__size_$i$i = ((($__grouping)) + 11|0);
    $2 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i = ($2<<24>>24)<(0);
    $__size_$i3$i = ((($__grouping)) + 4|0);
    $3 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i = $2&255;
    $cond$i = $tobool$i$i ? $3 : $conv$i$i;
    $cmp2 = ($cond$i|0)==(0);
    if ($cmp2) {
     $retval$2 = 0;
    } else {
     $4 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $4;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp3 = ($sub$ptr$sub|0)<(160);
     if ($cmp3) {
      $5 = HEAP32[$__dc>>2]|0;
      $incdec$ptr5 = ((($4)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr5;
      HEAP32[$4>>2] = $5;
      $retval$2 = 0;
     } else {
      $retval$2 = 0;
     }
    }
   }
  } else {
   $cmp8 = ($__ct|0)==($__thousands_sep|0);
   if ($cmp8) {
    $__size_$i$i49 = ((($__grouping)) + 11|0);
    $6 = HEAP8[$__size_$i$i49>>0]|0;
    $tobool$i$i50 = ($6<<24>>24)<(0);
    $__size_$i3$i51 = ((($__grouping)) + 4|0);
    $7 = HEAP32[$__size_$i3$i51>>2]|0;
    $conv$i$i53 = $6&255;
    $cond$i55 = $tobool$i$i50 ? $7 : $conv$i$i53;
    $cmp11 = ($cond$i55|0)==(0);
    if (!($cmp11)) {
     $8 = HEAP8[$__in_units>>0]|0;
     $tobool13 = ($8<<24>>24)==(0);
     if ($tobool13) {
      $retval$2 = -1;
      break;
     }
     $9 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast16 = $9;
     $sub$ptr$rhs$cast17 = $__g;
     $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast17))|0;
     $cmp20 = ($sub$ptr$sub18|0)<(160);
     if (!($cmp20)) {
      $retval$2 = 0;
      break;
     }
     $10 = HEAP32[$__dc>>2]|0;
     $incdec$ptr22 = ((($9)) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr22;
     HEAP32[$9>>2] = $10;
     HEAP32[$__dc>>2] = 0;
     $retval$2 = 0;
     break;
    }
   }
   $add$ptr = ((($__atoms)) + 128|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx<<2)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(32);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $11 = HEAP32[$__first$addr$0$i$ptr>>2]|0;
    $cmp1$i = ($11|0)==($__ct|0);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp1$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast26 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast27 = $__atoms;
   $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
   $cmp30 = ($sub$ptr$sub28|0)>(124);
   if ($cmp30) {
    $retval$2 = -1;
   } else {
    $sub$ptr$div29 = $sub$ptr$sub28 >> 2;
    $arrayidx = (4960 + ($sub$ptr$div29)|0);
    $12 = HEAP8[$arrayidx>>0]|0;
    $13 = (($sub$ptr$sub28) + -88)|0;
    $14 = $13 >>> 2;
    $15 = $13 << 30;
    $16 = $14 | $15;
    switch ($16|0) {
    case 2: case 3:  {
     $17 = HEAP32[$__a_end>>2]|0;
     $cmp37 = ($17|0)==($__a|0);
     if (!($cmp37)) {
      $arrayidx39 = ((($17)) + -1|0);
      $18 = HEAP8[$arrayidx39>>0]|0;
      $19 = $18 & 95;
      $20 = HEAP8[$__exp>>0]|0;
      $21 = $20 & 127;
      $cmp43 = ($19<<24>>24)==($21<<24>>24);
      if (!($cmp43)) {
       $retval$2 = -1;
       break L1;
      }
     }
     $incdec$ptr45 = ((($17)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr45;
     HEAP8[$17>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    case 1: case 0:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $22 = $12 & 95;
     $and55 = $22&255;
     $23 = HEAP8[$__exp>>0]|0;
     $conv56 = $23 << 24 >> 24;
     $cmp57 = ($and55|0)==($conv56|0);
     if ($cmp57) {
      $or = $and55 | 128;
      $conv60 = $or&255;
      HEAP8[$__exp>>0] = $conv60;
      $24 = HEAP8[$__in_units>>0]|0;
      $tobool61 = ($24<<24>>24)==(0);
      if (!($tobool61)) {
       HEAP8[$__in_units>>0] = 0;
       $__size_$i$i40 = ((($__grouping)) + 11|0);
       $25 = HEAP8[$__size_$i$i40>>0]|0;
       $tobool$i$i41 = ($25<<24>>24)<(0);
       $__size_$i3$i42 = ((($__grouping)) + 4|0);
       $26 = HEAP32[$__size_$i3$i42>>2]|0;
       $conv$i$i44 = $25&255;
       $cond$i46 = $tobool$i$i41 ? $26 : $conv$i$i44;
       $cmp64 = ($cond$i46|0)==(0);
       if (!($cmp64)) {
        $27 = HEAP32[$__g_end>>2]|0;
        $sub$ptr$lhs$cast66 = $27;
        $sub$ptr$rhs$cast67 = $__g;
        $sub$ptr$sub68 = (($sub$ptr$lhs$cast66) - ($sub$ptr$rhs$cast67))|0;
        $cmp70 = ($sub$ptr$sub68|0)<(160);
        if ($cmp70) {
         $28 = HEAP32[$__dc>>2]|0;
         $incdec$ptr72 = ((($27)) + 4|0);
         HEAP32[$__g_end>>2] = $incdec$ptr72;
         HEAP32[$27>>2] = $28;
        }
       }
      }
     }
    }
    }
    $29 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr77 = ((($29)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr77;
    HEAP8[$29>>0] = $12;
    $cmp78 = ($sub$ptr$sub28|0)>(84);
    if ($cmp78) {
     $retval$2 = 0;
    } else {
     $30 = HEAP32[$__dc>>2]|0;
     $inc = (($30) + 1)|0;
     HEAP32[$__dc>>2] = $inc;
     $retval$2 = 0;
    }
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0;
 var $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 328|0;
 $__thousands_sep = sp + 324|0;
 $__grouping = sp + 312|0;
 $__buf = sp + 300|0;
 $__a_end = sp + 296|0;
 $__g = sp;
 $__g_end = sp + 292|0;
 $__dc = sp + 288|0;
 $__in_units = sp + 333|0;
 $__exp = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__decimal_point>>2]|0;
  $27 = HEAP32[$__thousands_sep>>2]|0;
  $call14 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP32[$28>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF64[$__v>>3] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP32[$39>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP32[$45>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i13 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i34 = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i12 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i33 = 0;
 var $__size_$i$i = 0, $__size_$i$i104 = 0, $__size_$i3$i = 0, $__size_$i3$i106 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr10 = 0, $and$i$i = 0, $and$i$i78 = 0, $arrayidx$i$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i18 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i39 = 0, $call14 = 0, $call26 = 0.0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i20 = 0, $call3$i$i$i23 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i41 = 0, $call3$i14$i$i = 0, $call3$i14$i$i44 = 0, $call4$i$i$i = 0, $call4$i$i$i24 = 0, $call4$i15$i$i = 0, $call4$i15$i$i45 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i14 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i35 = 0, $cmp$i$i92 = 0, $cmp$i$i96 = 0, $cmp19 = 0, $cmp23 = 0, $cond$i = 0;
 var $cond$i$i = 0, $cond$i$i90 = 0, $cond$i110 = 0, $cond$i55 = 0, $cond$i81 = 0, $conv$i$i = 0, $conv$i$i108 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i79 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0;
 var $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $tobool$i$i$i85 = 0, $tobool$i$i$i9 = 0, $tobool$i$i105 = 0, $tobool$i$i53 = 0, $tobool$i$i76 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i31 = 0, $tobool20 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i17 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i38 = 0, $vfn$i$i98 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i16 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i37 = 0, $vtable$i$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $__atoms = sp + 160|0;
 $__decimal_point = sp + 328|0;
 $__thousands_sep = sp + 324|0;
 $__grouping = sp + 312|0;
 $__buf = sp + 300|0;
 $__a_end = sp + 296|0;
 $__g = sp;
 $__g_end = sp + 292|0;
 $__dc = sp + 288|0;
 $__in_units = sp + 333|0;
 $__exp = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$50 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i11 = ($4|0)==(0|0);
  if ($tobool$i$i$i11) {
   $21 = 0;$41 = 0;$51 = 1;
  } else {
   $__ninp_$i$i$i$i12 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i12>>2]|0;
   $__einp_$i$i$i$i13 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i13>>2]|0;
   $cmp$i$i$i$i14 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i14) {
    $vtable$i$i$i$i16 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i17 = ((($vtable$i$i$i$i16)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i17>>2]|0;
    $call$i$i$i$i18 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i22 = $call$i$i$i$i18;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i20 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i22 = $call3$i$i$i$i20;
   }
   $call3$i$i$i23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i24 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22,$call3$i$i$i23)|0);
   if ($call4$i$i$i24) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$41 = 0;$51 = 1;
   } else {
    $21 = $4;$41 = $50;$51 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i31 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i31) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i33 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i33>>2]|0;
    $__einp_$i$i4$i$i34 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i34>>2]|0;
    $cmp$i$i5$i$i35 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i35) {
     $vtable$i$i7$i$i37 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i38 = ((($vtable$i$i7$i$i37)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i38>>2]|0;
     $call$i$i9$i$i39 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i43 = $call$i$i9$i$i39;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i41 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i43 = $call3$i$i11$i$i41;
    }
    $call3$i14$i$i44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43,$call3$i14$i$i44)|0);
    if ($call4$i15$i$i45) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($51) {
      $52 = $9;
      break;
     } else {
      $44 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $52 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i53 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i55 = $tobool$i$i53 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i55)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i55 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i76 = ($17<<24>>24)<(0);
   if ($tobool$i$i76) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i78 = $18 & 2147483647;
    $phitmp$i79 = (($and$i$i78) + -1)|0;
    $cond$i81 = $phitmp$i79;
   } else {
    $cond$i81 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i81,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i85 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i90 = $tobool$i$i$i85 ? $20 : $__buf;
   $add$ptr10 = (($cond$i$i90) + ($cond$i55)|0);
   HEAP32[$__a_end>>2] = $add$ptr10;
   $__a$1 = $cond$i$i90;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i92 = ($22|0)==($23|0);
  if ($cmp$i$i92) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__decimal_point>>2]|0;
  $27 = HEAP32[$__thousands_sep>>2]|0;
  $call14 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$26,$27,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $tobool = ($call14|0)==(0);
  if (!($tobool)) {
   $44 = $52;$__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i>>2]|0;
  $29 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i96 = ($28|0)==($29|0);
  if ($cmp$i$i96) {
   $vtable$i$i97 = HEAP32[$21>>2]|0;
   $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
   $30 = HEAP32[$vfn$i$i98>>2]|0;
   (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($28)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $31 = HEAP32[$28>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
  }
  $4 = $21;$50 = $41;$__a$0 = $__a$1;
 }
 $__size_$i$i104 = ((($__grouping)) + 11|0);
 $32 = HEAP8[$__size_$i$i104>>0]|0;
 $tobool$i$i105 = ($32<<24>>24)<(0);
 $__size_$i3$i106 = ((($__grouping)) + 4|0);
 $33 = HEAP32[$__size_$i3$i106>>2]|0;
 $conv$i$i108 = $32&255;
 $cond$i110 = $tobool$i$i105 ? $33 : $conv$i$i108;
 $cmp19 = ($cond$i110|0)==(0);
 $34 = HEAP8[$__in_units>>0]|0;
 $tobool20 = ($34<<24>>24)==(0);
 $or$cond = $cmp19 | $tobool20;
 if (!($or$cond)) {
  $35 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $35;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp23 = ($sub$ptr$sub|0)<(160);
  if ($cmp23) {
   $36 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($35)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$35>>2] = $36;
  }
 }
 $37 = HEAP32[$__a_end>>2]|0;
 $call26 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2,$37,$__err));
 HEAPF32[$__v>>2] = $call26;
 $38 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$38,$__err);
 $tobool$i$i$i9 = ($21|0)==(0|0);
 if ($tobool$i$i$i9) {
  $53 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $39 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $40 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($39|0)==($40|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$41>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $42 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$42 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $43 = HEAP32[$39>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $53 = 1;
  } else {
   $53 = 0;
  }
 }
 $tobool$i2$i$i = ($44|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($44)) + 12|0);
   $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($44)) + 16|0);
   $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($45|0)==($46|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $48 = HEAP32[$45>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($48)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($53) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($53) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0;
 var $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call3$i$i = 0;
 var $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0;
 var $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0, $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0;
 var $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$54 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$45 = 0;$55 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$45 = 0;$55 = 1;
   } else {
    $21 = $4;$45 = $54;$55 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($55) {
      $56 = $9;
      break;
     } else {
      $48 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $56 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $48 = $56;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$54 = $45;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $36 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 $37 = (getTempRet0() | 0);
 $38 = $__v;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$42,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $57 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $43 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $44 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($43|0)==($44|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$45>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $46 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$46 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $47 = HEAP32[$43>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $57 = 1;
  } else {
   $57 = 0;
  }
 }
 $tobool$i2$i$i = ($48|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($48)) + 12|0);
   $49 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($48)) + 16|0);
   $50 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($49|0)==($50|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$48>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $51 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$51 & 511]($48)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $52 = HEAP32[$49>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($52)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($57) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($57) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $53 = HEAP32[$__err>>2]|0;
  $or = $53 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms) {
 $this = $this|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this,$__iob,$__atoms)|0);
 return ($call|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($agg$result,$__iob,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $__loc = 0, $call$i = 0, $call$i3 = 0, $vfn$i = 0, $vfn$i5 = 0, $vtable$i = 0, $vtable$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21068)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 16|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 $call$i3 = (FUNCTION_TABLE_ii[$0 & 511]($call$i)|0);
 HEAP32[$__thousands_sep>>2] = $call$i3;
 $vtable$i4 = HEAP32[$call$i>>2]|0;
 $vfn$i5 = ((($vtable$i4)) + 20|0);
 $1 = HEAP32[$vfn$i5>>2]|0;
 FUNCTION_TABLE_vii[$1 & 511]($agg$result,$call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return;
}
function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this,$__iob,$__atoms) {
 $this = $this|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $__loc = 0, $call$i = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 48|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,4960,(4986),$__atoms)|0);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return ($__atoms|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP32[$37>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP32[$43>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP32[$37>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP32[$43>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP16[$__v>>1] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP32[$37>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP32[$43>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0;
 var $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call3$i$i = 0;
 var $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0;
 var $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0, $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0;
 var $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$54 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$45 = 0;$55 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$45 = 0;$55 = 1;
   } else {
    $21 = $4;$45 = $54;$55 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($55) {
      $56 = $9;
      break;
     } else {
      $48 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $56 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $48 = $56;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$54 = $45;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $36 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 $37 = (getTempRet0() | 0);
 $38 = $__v;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$42,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $57 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $43 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $44 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($43|0)==($44|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$45>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $46 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$46 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $47 = HEAP32[$43>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $57 = 1;
  } else {
   $57 = 0;
  }
 }
 $tobool$i2$i$i = ($48|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($48)) + 12|0);
   $49 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($48)) + 16|0);
   $50 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($49|0)==($50|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$48>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $51 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$51 & 511]($48)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $52 = HEAP32[$49>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($52)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($57) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($57) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $53 = HEAP32[$__err>>2]|0;
  $or = $53 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms1 = 0, $__buf = 0, $__cap_$i$i = 0;
 var $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__size_$i$i = 0, $__size_$i$i110 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $__thousands_sep = 0;
 var $add$ptr = 0, $add$ptr12 = 0, $and$i$i = 0, $and$i$i84 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call15 = 0, $call2 = 0, $call25 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0, $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i102 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i98 = 0, $cmp20 = 0, $cmp22 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i116 = 0;
 var $cond$i61 = 0, $cond$i87 = 0, $conv$i$i = 0, $conv$i$i114 = 0, $exitcond$i$i = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i85 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i$i$i17 = 0, $tobool$i$i$i91 = 0, $tobool$i$i111 = 0, $tobool$i$i59 = 0, $tobool$i$i82 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i104 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i22 = 0, $vtable$i$i103 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__thousands_sep = sp + 300|0;
 $__atoms1 = sp + 160|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 272|0;
 $__g = sp;
 $__g_end = sp + 268|0;
 $__dc = sp + 264|0;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 $call2 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this,$__iob,$__atoms1)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping,$__iob,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__cap_$i$i = ((($__buf)) + 8|0);
 if ($tobool$i$i) {
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i,0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__buf>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__buf;
 HEAP32[$__a_end>>2] = $cond$i$i;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $__size_$i3$i = ((($__buf)) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $4 = $$pre;$48 = $$pre;$__a$0 = $cond$i$i;
 L8: while(1) {
  $tobool$i$i$i17 = ($4|0)==(0|0);
  if ($tobool$i$i$i17) {
   $21 = 0;$39 = 0;$49 = 1;
  } else {
   $__ninp_$i$i$i$i18 = ((($4)) + 12|0);
   $5 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
   $__einp_$i$i$i$i19 = ((($4)) + 16|0);
   $6 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
   $cmp$i$i$i$i20 = ($5|0)==($6|0);
   if ($cmp$i$i$i$i20) {
    $vtable$i$i$i$i22 = HEAP32[$4>>2]|0;
    $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
    $7 = HEAP32[$vfn$i$i$i$i23>>2]|0;
    $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
    $retval$0$i$i$i$i28 = $call$i$i$i$i24;
   } else {
    $8 = HEAP32[$5>>2]|0;
    $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
    $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
   }
   $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
   if ($call4$i$i$i30) {
    HEAP32[$__b>>2] = 0;
    $21 = 0;$39 = 0;$49 = 1;
   } else {
    $21 = $4;$39 = $48;$49 = 0;
   }
  }
  $9 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i37 = ($9|0)==(0|0);
  do {
   if ($tobool$i2$i$i37) {
    label = 19;
   } else {
    $__ninp_$i$i3$i$i39 = ((($9)) + 12|0);
    $10 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
    $__einp_$i$i4$i$i40 = ((($9)) + 16|0);
    $11 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
    $cmp$i$i5$i$i41 = ($10|0)==($11|0);
    if ($cmp$i$i5$i$i41) {
     $vtable$i$i7$i$i43 = HEAP32[$9>>2]|0;
     $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
     $12 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
     $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
     $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
    } else {
     $13 = HEAP32[$10>>2]|0;
     $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
     $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
    }
    $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
    if ($call4$i15$i$i51) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      $50 = $9;
      break;
     } else {
      $42 = $9;$__a$2 = $__a$0;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;$__a$2 = $__a$0;
    break;
   } else {
    $50 = 0;
   }
  }
  $14 = HEAP32[$__a_end>>2]|0;
  $15 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i59 = ($15<<24>>24)<(0);
  $16 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $15&255;
  $cond$i61 = $tobool$i$i59 ? $16 : $conv$i$i;
  $add$ptr = (($__a$0) + ($cond$i61)|0);
  $cmp = ($14|0)==($add$ptr|0);
  if ($cmp) {
   $mul = $cond$i61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$mul,0);
   $17 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i82 = ($17<<24>>24)<(0);
   if ($tobool$i$i82) {
    $18 = HEAP32[$__cap_$i$i>>2]|0;
    $and$i$i84 = $18 & 2147483647;
    $phitmp$i85 = (($and$i$i84) + -1)|0;
    $cond$i87 = $phitmp$i85;
   } else {
    $cond$i87 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf,$cond$i87,0);
   $19 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i$i91 = ($19<<24>>24)<(0);
   $20 = HEAP32[$__buf>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $20 : $__buf;
   $add$ptr12 = (($cond$i$i96) + ($cond$i61)|0);
   HEAP32[$__a_end>>2] = $add$ptr12;
   $__a$1 = $cond$i$i96;
  } else {
   $__a$1 = $__a$0;
  }
  $__ninp_$i$i = ((($21)) + 12|0);
  $22 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($21)) + 16|0);
  $23 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i98 = ($22|0)==($23|0);
  if ($cmp$i$i98) {
   $vtable$i$i = HEAP32[$21>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $24 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $25 = HEAP32[$22>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $26 = HEAP32[$__thousands_sep>>2]|0;
  $call15 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i,$call,$__a$1,$__a_end,$__dc,$26,$__grouping,$__g,$__g_end,$call2)|0);
  $tobool = ($call15|0)==(0);
  if (!($tobool)) {
   $42 = $50;$__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i>>2]|0;
  $28 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i102 = ($27|0)==($28|0);
  if ($cmp$i$i102) {
   $vtable$i$i103 = HEAP32[$21>>2]|0;
   $vfn$i$i104 = ((($vtable$i$i103)) + 40|0);
   $29 = HEAP32[$vfn$i$i104>>2]|0;
   (FUNCTION_TABLE_ii[$29 & 511]($21)|0);
  } else {
   $incdec$ptr$i$i = ((($27)) + 4|0);
   HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
   $30 = HEAP32[$27>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
  }
  $4 = $21;$48 = $39;$__a$0 = $__a$1;
 }
 $__size_$i$i110 = ((($__grouping)) + 11|0);
 $31 = HEAP8[$__size_$i$i110>>0]|0;
 $tobool$i$i111 = ($31<<24>>24)<(0);
 $__size_$i3$i112 = ((($__grouping)) + 4|0);
 $32 = HEAP32[$__size_$i3$i112>>2]|0;
 $conv$i$i114 = $31&255;
 $cond$i116 = $tobool$i$i111 ? $32 : $conv$i$i114;
 $cmp20 = ($cond$i116|0)==(0);
 if (!($cmp20)) {
  $33 = HEAP32[$__g_end>>2]|0;
  $sub$ptr$lhs$cast = $33;
  $sub$ptr$rhs$cast = $__g;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp22 = ($sub$ptr$sub|0)<(160);
  if ($cmp22) {
   $34 = HEAP32[$__dc>>2]|0;
   $incdec$ptr = ((($33)) + 4|0);
   HEAP32[$__g_end>>2] = $incdec$ptr;
   HEAP32[$33>>2] = $34;
  }
 }
 $35 = HEAP32[$__a_end>>2]|0;
 $call25 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$35,$__err,$call)|0);
 HEAP32[$__v>>2] = $call25;
 $36 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$36,$__err);
 $tobool$i$i$i15 = ($21|0)==(0|0);
 if ($tobool$i$i$i15) {
  $51 = 1;
 } else {
  $__ninp_$i$i$i$i = ((($21)) + 12|0);
  $37 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
  $__einp_$i$i$i$i = ((($21)) + 16|0);
  $38 = HEAP32[$__einp_$i$i$i$i>>2]|0;
  $cmp$i$i$i$i = ($37|0)==($38|0);
  if ($cmp$i$i$i$i) {
   $vtable$i$i$i$i = HEAP32[$39>>2]|0;
   $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
   $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
   $call$i$i$i$i = (FUNCTION_TABLE_ii[$40 & 511]($21)|0);
   $retval$0$i$i$i$i = $call$i$i$i$i;
  } else {
   $41 = HEAP32[$37>>2]|0;
   $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
   $retval$0$i$i$i$i = $call3$i$i$i$i;
  }
  $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
  if ($call4$i$i$i) {
   HEAP32[$__b>>2] = 0;
   $51 = 1;
  } else {
   $51 = 0;
  }
 }
 $tobool$i2$i$i = ($42|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 48;
  } else {
   $__ninp_$i$i3$i$i = ((($42)) + 12|0);
   $43 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($42)) + 16|0);
   $44 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($43|0)==($44|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$42>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $45 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$45 & 511]($42)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $46 = HEAP32[$43>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 48;
    break;
   } else {
    if ($51) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($51) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $47 = HEAP32[$__err>>2]|0;
  $or = $47 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i88 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i75 = 0, $__einp_$i$i116 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i96 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0144 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky53$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0;
 var $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i74 = 0, $__ninp_$i$i115 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i95 = 0, $__size_$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i129 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0;
 var $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $add$ptr$i = 0, $add50 = 0, $call$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i80 = 0, $call$i$i120 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i101 = 0, $call$i126 = 0, $call1 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i82 = 0, $call3$i$i$i85 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i103 = 0;
 var $call3$i$i122 = 0, $call3$i14$i$i = 0, $call3$i14$i$i106 = 0, $call4$i$i$i = 0, $call4$i$i$i86 = 0, $call4$i15$i$i = 0, $call4$i15$i$i107 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i76 = 0, $cmp$i$i117 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i97 = 0, $cmp12 = 0, $cmp2 = 0, $cmp21 = 0, $cmp24 = 0, $cmp31 = 0;
 var $cmp34 = 0, $cmp5 = 0, $cmp51 = 0, $cmp55 = 0, $cmp59 = 0, $cmp62 = 0, $cmp79 = 0, $cmp82 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i133 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i131 = 0, $dec = 0, $dec36 = 0, $dec40 = 0, $dec64 = 0, $inc = 0;
 var $inc37 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr44 = 0, $incdec$ptr45 = 0, $incdec$ptr67 = 0, $incdec$ptr68 = 0, $incdec$ptr86 = 0, $incdec$ptr87 = 0, $incdec$ptr9 = 0, $or = 0, $or91 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i89 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i84 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i105 = 0, $sub$ptr$div$i$i = 0;
 var $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i71 = 0, $tobool$i$i$i73 = 0, $tobool$i$i128 = 0, $tobool$i$i69 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i93 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i79 = 0, $vfn$i$i119 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i100 = 0, $vfn$i125 = 0, $vtable$i = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i78 = 0, $vtable$i$i118 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i99 = 0, $vtable$i124 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 if ($cmp) {
  $call1 = (_malloc($sub$ptr$div$i$i)|0);
  $cmp2 = ($call1|0)==(0|0);
  if ($cmp2) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__stat_hold$sroa$0$0 = $call1;$__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;$__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $sub$ptr$div$i$i;$__st$0 = $__status$0;
 while(1) {
  $cmp5 = ($__ky$0|0)==($__ke|0);
  if ($cmp5) {
   break;
  }
  $0 = ((($__ky$0)) + 8|0);
  $__size_$i$i$i = ((($0)) + 3|0);
  $1 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($1<<24>>24)<(0);
  if ($tobool$i$i$i) {
   $__size_$i2$i$i = ((($__ky$0)) + 4|0);
   $2 = HEAP32[$__size_$i2$i$i>>2]|0;
   $cond$i$i = $2;
  } else {
   $conv$i$i$i = $1&255;
   $cond$i$i = $conv$i$i$i;
  }
  $cmp$i = ($cond$i$i|0)==(0);
  if ($cmp$i) {
   HEAP8[$__st$0>>0] = 2;
   $dec = (($__n_might_match$0) + -1)|0;
   $inc = (($__n_does_match$0) + 1)|0;
   $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
  } else {
   HEAP8[$__st$0>>0] = 1;
   $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
  }
  $incdec$ptr = ((($__ky$0)) + 12|0);
  $incdec$ptr9 = ((($__st$0)) + 1|0);
  $__ky$0 = $incdec$ptr;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $incdec$ptr9;
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0;$__n_might_match$2 = $__n_might_match$0;
 while(1) {
  $3 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i71 = ($3|0)==(0|0);
  do {
   if ($tobool$i$i$i71) {
    $14 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($3)) + 12|0);
    $4 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($3)) + 16|0);
    $5 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($4|0)==($5|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$3>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $6 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $7 = HEAP32[$4>>2]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($7)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $14 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $14 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $8 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($8|0)==(0|0);
  if ($tobool$i2$i$i) {
   $15 = 1;$22 = 0;
  } else {
   $__ninp_$i$i3$i$i = ((($8)) + 12|0);
   $9 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($8)) + 16|0);
   $10 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($9|0)==($10|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$8>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $11 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $12 = HEAP32[$9>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($12)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    $15 = 1;$22 = 0;
   } else {
    $15 = 0;$22 = $8;
   }
  }
  $13 = $14 ^ $15;
  $cmp12 = ($__n_might_match$2|0)!=(0);
  $16 = $cmp12 & $13;
  $17 = HEAP32[$__b>>2]|0;
  if (!($16)) {
   break;
  }
  $__ninp_$i$i115 = ((($17)) + 12|0);
  $27 = HEAP32[$__ninp_$i$i115>>2]|0;
  $__einp_$i$i116 = ((($17)) + 16|0);
  $28 = HEAP32[$__einp_$i$i116>>2]|0;
  $cmp$i$i117 = ($27|0)==($28|0);
  if ($cmp$i$i117) {
   $vtable$i$i118 = HEAP32[$17>>2]|0;
   $vfn$i$i119 = ((($vtable$i$i118)) + 36|0);
   $29 = HEAP32[$vfn$i$i119>>2]|0;
   $call$i$i120 = (FUNCTION_TABLE_ii[$29 & 511]($17)|0);
   $retval$0$i$i = $call$i$i120;
  } else {
   $30 = HEAP32[$27>>2]|0;
   $call3$i$i122 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
   $retval$0$i$i = $call3$i$i122;
  }
  if ($__case_sensitive) {
   $__c$0 = $retval$0$i$i;
  } else {
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 28|0);
   $31 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iii[$31 & 511]($__ct,$retval$0$i$i)|0);
   $__c$0 = $call$i;
  }
  $add = (($__indx$0) + 1)|0;
  $__consume$0$off0 = 0;$__ky19$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
  while(1) {
   $cmp21 = ($__ky19$0|0)==($__ke|0);
   if ($cmp21) {
    break;
   }
   $32 = HEAP8[$__st$1>>0]|0;
   $cmp24 = ($32<<24>>24)==(1);
   do {
    if ($cmp24) {
     $33 = ((($__ky19$0)) + 8|0);
     $__size_$i$i$i$i = ((($33)) + 3|0);
     $34 = HEAP8[$__size_$i$i$i$i>>0]|0;
     $tobool$i$i$i$i = ($34<<24>>24)<(0);
     if ($tobool$i$i$i$i) {
      $35 = HEAP32[$__ky19$0>>2]|0;
      $cond$i$i$i = $35;
     } else {
      $cond$i$i$i = $__ky19$0;
     }
     $add$ptr$i = (($cond$i$i$i) + ($__indx$0<<2)|0);
     $36 = HEAP32[$add$ptr$i>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $36;
     } else {
      $vtable$i124 = HEAP32[$__ct>>2]|0;
      $vfn$i125 = ((($vtable$i124)) + 28|0);
      $37 = HEAP32[$vfn$i125>>2]|0;
      $call$i126 = (FUNCTION_TABLE_iii[$37 & 511]($__ct,$36)|0);
      $__kc$0 = $call$i126;
     }
     $cmp31 = ($__c$0|0)==($__kc$0|0);
     if (!($cmp31)) {
      HEAP8[$__st$1>>0] = 0;
      $dec40 = (($__n_might_match$3) + -1)|0;
      $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $dec40;
      break;
     }
     $38 = HEAP8[$__size_$i$i$i$i>>0]|0;
     $tobool$i$i128 = ($38<<24>>24)<(0);
     if ($tobool$i$i128) {
      $__size_$i2$i129 = ((($__ky19$0)) + 4|0);
      $39 = HEAP32[$__size_$i2$i129>>2]|0;
      $cond$i133 = $39;
     } else {
      $conv$i$i131 = $38&255;
      $cond$i133 = $conv$i$i131;
     }
     $cmp34 = ($cond$i133|0)==($add|0);
     if ($cmp34) {
      $dec36 = (($__n_might_match$3) + -1)|0;
      $inc37 = (($__n_does_match$3) + 1)|0;
      HEAP8[$__st$1>>0] = 2;
      $__consume$2$off0 = 1;$__n_does_match$5 = $inc37;$__n_might_match$5 = $dec36;
     } else {
      $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
     }
    } else {
     $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
    }
   } while(0);
   $incdec$ptr44 = ((($__ky19$0)) + 12|0);
   $incdec$ptr45 = ((($__st$1)) + 1|0);
   $__consume$0$off0 = $__consume$2$off0;$__ky19$0 = $incdec$ptr44;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $incdec$ptr45;
  }
  L67: do {
   if ($__consume$0$off0) {
    $40 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i = ((($40)) + 12|0);
    $41 = HEAP32[$__ninp_$i$i>>2]|0;
    $__einp_$i$i = ((($40)) + 16|0);
    $42 = HEAP32[$__einp_$i$i>>2]|0;
    $cmp$i$i = ($41|0)==($42|0);
    if ($cmp$i$i) {
     $vtable$i$i = HEAP32[$40>>2]|0;
     $vfn$i$i = ((($vtable$i$i)) + 40|0);
     $43 = HEAP32[$vfn$i$i>>2]|0;
     (FUNCTION_TABLE_ii[$43 & 511]($40)|0);
    } else {
     $incdec$ptr$i$i = ((($41)) + 4|0);
     HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
     $44 = HEAP32[$41>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
    }
    $add50 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $cmp51 = ($add50>>>0)>(1);
    if ($cmp51) {
     $__ky53$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
     while(1) {
      $cmp55 = ($__ky53$0|0)==($__ke|0);
      if ($cmp55) {
       $__n_does_match$2$be = $__n_does_match$6;
       break L67;
      }
      $45 = HEAP8[$__st$2>>0]|0;
      $cmp59 = ($45<<24>>24)==(2);
      if ($cmp59) {
       $46 = ((($__ky53$0)) + 8|0);
       $__size_$i$i = ((($46)) + 3|0);
       $47 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i69 = ($47<<24>>24)<(0);
       if ($tobool$i$i69) {
        $__size_$i2$i = ((($__ky53$0)) + 4|0);
        $48 = HEAP32[$__size_$i2$i>>2]|0;
        $cond$i = $48;
       } else {
        $conv$i$i = $47&255;
        $cond$i = $conv$i$i;
       }
       $cmp62 = ($cond$i|0)==($add|0);
       if ($cmp62) {
        $__n_does_match$7 = $__n_does_match$6;
       } else {
        $dec64 = (($__n_does_match$6) + -1)|0;
        HEAP8[$__st$2>>0] = 0;
        $__n_does_match$7 = $dec64;
       }
      } else {
       $__n_does_match$7 = $__n_does_match$6;
      }
      $incdec$ptr67 = ((($__ky53$0)) + 12|0);
      $incdec$ptr68 = ((($__st$2)) + 1|0);
      $__ky53$0 = $incdec$ptr67;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $incdec$ptr68;
     }
    } else {
     $__n_does_match$2$be = $__n_does_match$3;
    }
   } else {
    $__n_does_match$2$be = $__n_does_match$3;
   }
  } while(0);
  $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$2$be;$__n_might_match$2 = $__n_might_match$3;
 }
 $tobool$i$i$i73 = ($17|0)==(0|0);
 do {
  if ($tobool$i$i$i73) {
   $52 = 1;
  } else {
   $__ninp_$i$i$i$i74 = ((($17)) + 12|0);
   $18 = HEAP32[$__ninp_$i$i$i$i74>>2]|0;
   $__einp_$i$i$i$i75 = ((($17)) + 16|0);
   $19 = HEAP32[$__einp_$i$i$i$i75>>2]|0;
   $cmp$i$i$i$i76 = ($18|0)==($19|0);
   if ($cmp$i$i$i$i76) {
    $vtable$i$i$i$i78 = HEAP32[$17>>2]|0;
    $vfn$i$i$i$i79 = ((($vtable$i$i$i$i78)) + 36|0);
    $20 = HEAP32[$vfn$i$i$i$i79>>2]|0;
    $call$i$i$i$i80 = (FUNCTION_TABLE_ii[$20 & 511]($17)|0);
    $retval$0$i$i$i$i84 = $call$i$i$i$i80;
   } else {
    $21 = HEAP32[$18>>2]|0;
    $call3$i$i$i$i82 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($21)|0);
    $retval$0$i$i$i$i84 = $call3$i$i$i$i82;
   }
   $call3$i$i$i85 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i86 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i84,$call3$i$i$i85)|0);
   if ($call4$i$i$i86) {
    HEAP32[$__b>>2] = 0;
    $52 = 1;
    break;
   } else {
    $$pre$i$i$i88 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i89 = ($$pre$i$i$i88|0)==(0|0);
    $52 = $phitmp$i$i$i89;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i93 = ($22|0)==(0|0);
 do {
  if ($tobool$i2$i$i93) {
   label = 41;
  } else {
   $__ninp_$i$i3$i$i95 = ((($22)) + 12|0);
   $23 = HEAP32[$__ninp_$i$i3$i$i95>>2]|0;
   $__einp_$i$i4$i$i96 = ((($22)) + 16|0);
   $24 = HEAP32[$__einp_$i$i4$i$i96>>2]|0;
   $cmp$i$i5$i$i97 = ($23|0)==($24|0);
   if ($cmp$i$i5$i$i97) {
    $vtable$i$i7$i$i99 = HEAP32[$22>>2]|0;
    $vfn$i$i8$i$i100 = ((($vtable$i$i7$i$i99)) + 36|0);
    $25 = HEAP32[$vfn$i$i8$i$i100>>2]|0;
    $call$i$i9$i$i101 = (FUNCTION_TABLE_ii[$25 & 511]($22)|0);
    $retval$0$i$i13$i$i105 = $call$i$i9$i$i101;
   } else {
    $26 = HEAP32[$23>>2]|0;
    $call3$i$i11$i$i103 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($26)|0);
    $retval$0$i$i13$i$i105 = $call3$i$i11$i$i103;
   }
   $call3$i14$i$i106 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i107 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i105,$call3$i14$i$i106)|0);
   if ($call4$i15$i$i107) {
    HEAP32[$__e>>2] = 0;
    label = 41;
    break;
   } else {
    if ($52) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($52) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $49 = HEAP32[$__err>>2]|0;
  $or = $49 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
 while(1) {
  $cmp79 = ($__kb$addr$0|0)==($__ke|0);
  if ($cmp79) {
   label = 84;
   break;
  }
  $50 = HEAP8[$__st$3>>0]|0;
  $cmp82 = ($50<<24>>24)==(2);
  if ($cmp82) {
   $__kb$addr$0144 = $__kb$addr$0;
   break;
  }
  $incdec$ptr86 = ((($__kb$addr$0)) + 12|0);
  $incdec$ptr87 = ((($__st$3)) + 1|0);
  $__kb$addr$0 = $incdec$ptr86;$__st$3 = $incdec$ptr87;
 }
 if ((label|0) == 84) {
  $51 = HEAP32[$__err>>2]|0;
  $or91 = $51 | 4;
  HEAP32[$__err>>2] = $or91;
  $__kb$addr$0144 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;return ($__kb$addr$0144|0);
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0, $__i$sroa$0$0 = 0;
 var $__nm = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i = 0, $call$i$i = 0, $call2 = 0, $call2$i$i = 0, $call3$i = 0, $call4$i = 0, $call4$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i12 = 0, $cond$i$i = 0, $cond$i6$i = 0;
 var $cond$i7$i = 0, $conv = 0, $conv$i$i$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i9 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i6 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 24|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $conv = $__v&1;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call2 = (FUNCTION_TABLE_iiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$__iob,$__fl,$conv)|0);
  $retval$sroa$0$0 = $call2;
 } else {
  __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21044)|0);
  __ZNSt3__26localeD2Ev($ref$tmp);
  $vtable$i = HEAP32[$call$i>>2]|0;
  if ($__v) {
   $vfn$i = ((($vtable$i)) + 24|0);
   $3 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$3 & 511]($__nm,$call$i);
  } else {
   $vfn$i6 = ((($vtable$i)) + 28|0);
   $4 = HEAP32[$vfn$i6>>2]|0;
   FUNCTION_TABLE_vii[$4 & 511]($__nm,$call$i);
  }
  $__size_$i$i$i = ((($__nm)) + 11|0);
  $5 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($5<<24>>24)<(0);
  $6 = HEAP32[$__nm>>2]|0;
  $cond$i$i = $tobool$i$i$i ? $6 : $__nm;
  $__size_$i3$i$i = ((($__nm)) + 4|0);
  $7 = $5;$9 = $6;$__i$sroa$0$0 = $cond$i$i;
  while(1) {
   $tobool$i$i$i9 = ($7<<24>>24)<(0);
   $8 = HEAP32[$__size_$i3$i$i>>2]|0;
   $conv$i$i$i = $7&255;
   $cond$i7$i = $tobool$i$i$i9 ? $9 : $__nm;
   $cond$i6$i = $tobool$i$i$i9 ? $8 : $conv$i$i$i;
   $add$ptr$i = (($cond$i7$i) + ($cond$i6$i)|0);
   $cmp$i$i12 = ($__i$sroa$0$0|0)==($add$ptr$i|0);
   if ($cmp$i$i12) {
    break;
   }
   $10 = HEAP8[$__i$sroa$0$0>>0]|0;
   $11 = HEAP32[$__s>>2]|0;
   $tobool$i = ($11|0)==(0|0);
   if (!($tobool$i)) {
    $__nout_$i$i = ((($11)) + 24|0);
    $12 = HEAP32[$__nout_$i$i>>2]|0;
    $__eout_$i$i = ((($11)) + 28|0);
    $13 = HEAP32[$__eout_$i$i>>2]|0;
    $cmp$i$i = ($12|0)==($13|0);
    if ($cmp$i$i) {
     $vtable$i$i = HEAP32[$11>>2]|0;
     $vfn$i$i = ((($vtable$i$i)) + 52|0);
     $14 = HEAP32[$vfn$i$i>>2]|0;
     $call$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($10)|0);
     $call2$i$i = (FUNCTION_TABLE_iii[$14 & 511]($11,$call$i$i)|0);
     $retval$0$i$i = $call2$i$i;
    } else {
     $incdec$ptr$i$i = ((($12)) + 1|0);
     HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
     HEAP8[$12>>0] = $10;
     $call4$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($10)|0);
     $retval$0$i$i = $call4$i$i;
    }
    $call3$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i,$call3$i)|0);
    if ($call4$i) {
     HEAP32[$__s>>2] = 0;
    }
   }
   $incdec$ptr$i = ((($__i$sroa$0$0)) + 1|0);
   $$pre = HEAP8[$__size_$i$i$i>>0]|0;
   $$pre18 = HEAP32[$__nm>>2]|0;
   $7 = $$pre;$9 = $$pre18;$__i$sroa$0$0 = $incdec$ptr$i;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0;
 var $call8 = 0, $mul = 0, $ref$tmp = 0, $sub = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12974>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12974+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12974+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12974+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12974+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12974+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12980,1,$0);
 $1 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $1 >>> 9;
 $and$lobit = $and & 1;
 $add3 = (($and$lobit) + 13)|0;
 $2 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $sub = $and$lobit << 1;
 $mul = $sub | 24;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $3 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $3;
 $4 = HEAP32[$__op>>2]|0;
 $5 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$4,$5,$__iob,$__fl)|0);
 _llvm_stackrestore(($2|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0;
 var $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $mul = 0, $ref$tmp = 0, $sub = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12971,1,$6);
 $7 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $7 >>> 9;
 $and$lobit = $and & 1;
 $add3 = (($and$lobit) + 23)|0;
 $8 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 $9 = $vararg_buffer;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $sub = $and$lobit << 1;
 $mul = $sub | 44;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $13 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $13;
 $14 = HEAP32[$__op>>2]|0;
 $15 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$14,$15,$__iob,$__fl)|0);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0;
 var $call6 = 0, $call8 = 0, $ref$tmp = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12974>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12974+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12974+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12974+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12974+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12974+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12980,0,$0);
 $1 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $1 >>> 9;
 $and$lobit = $and & 1;
 $add3 = $and$lobit | 12;
 $2 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $add = $and$lobit << 1;
 $sub9 = $add | 21;
 $vla10$alloca_mul = $sub9;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $3 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $3;
 $4 = HEAP32[$__op>>2]|0;
 $5 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$4,$5,$__iob,$__fl)|0);
 _llvm_stackrestore(($2|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr = 0;
 var $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $mul = 0, $ref$tmp = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12971,0,$6);
 $7 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $7 >>> 9;
 $and$lobit = $and & 1;
 $add = $and$lobit | 22;
 $add3 = (($add) + 1)|0;
 $8 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 $9 = $vararg_buffer;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $mul = $add << 1;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $13 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $13;
 $14 = HEAP32[$__op>>2]|0;
 $15 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$14,$15,$__iob,$__fl)|0);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i28 = 0, $add$ptr = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call2 = 0, $call21 = 0, $call28 = 0, $call35 = 0, $call4 = 0;
 var $call42 = 0, $call7 = 0, $cmp = 0, $cmp23 = 0, $cmp32 = 0, $cmp36 = 0, $mul = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 172|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $__fmt = sp + 96|0;
 $__nar = sp + 64|0;
 $__nb = sp + 168|0;
 $__o = sp;
 $__op = sp + 164|0;
 $__oe = sp + 160|0;
 $ref$tmp40 = sp + 156|0;
 $agg$tmp = sp + 152|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,21468,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 if ($cmp) {
  $call14 = (__ZNSt3__26__clocEv()|0);
  if ($call2) {
   $__precision_$i28 = ((($__iob)) + 8|0);
   $6 = HEAP32[$__precision_$i28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $6;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $call17 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $call17;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $call21 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $call21;
  }
  $7 = HEAP32[$__nb>>2]|0;
  $cmp23 = ($7|0)==(0|0);
  if ($cmp23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $8 = $7;$__nbh$sroa$0$0 = $7;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre = HEAP32[$__nb>>2]|0;
  $8 = $$pre;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
 }
 $add$ptr27 = (($8) + ($__nc$2)|0);
 $call28 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8,$add$ptr27,$__iob)|0);
 $cmp32 = ($8|0)==($__nar|0);
 if ($cmp32) {
  $__ob$0 = $__o;$__obh$sroa$0$0 = 0;
 } else {
  $mul = $__nc$2 << 1;
  $call35 = (_malloc($mul)|0);
  $cmp36 = ($call35|0)==(0|0);
  if ($cmp36) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__ob$0 = $call35;$__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40,$__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8,$call28,$add$ptr27,$__ob$0,$__op,$__oe,$ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $9 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $9;
 $10 = HEAP32[$__op>>2]|0;
 $11 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call42 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__ob$0,$10,$11,$__iob,$__fl)|0);
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;return ($call42|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i28 = 0, $add$ptr = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call2 = 0, $call21 = 0, $call28 = 0, $call35 = 0, $call4 = 0;
 var $call42 = 0, $call7 = 0, $cmp = 0, $cmp23 = 0, $cmp32 = 0, $cmp36 = 0, $mul = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 172|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $__fmt = sp + 96|0;
 $__nar = sp + 64|0;
 $__nb = sp + 168|0;
 $__o = sp;
 $__op = sp + 164|0;
 $__oe = sp + 160|0;
 $ref$tmp40 = sp + 156|0;
 $agg$tmp = sp + 152|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,12969,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 if ($cmp) {
  $call14 = (__ZNSt3__26__clocEv()|0);
  if ($call2) {
   $__precision_$i28 = ((($__iob)) + 8|0);
   $6 = HEAP32[$__precision_$i28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $6;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $call17 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $call17;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $call21 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $call21;
  }
  $7 = HEAP32[$__nb>>2]|0;
  $cmp23 = ($7|0)==(0|0);
  if ($cmp23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $8 = $7;$__nbh$sroa$0$0 = $7;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre = HEAP32[$__nb>>2]|0;
  $8 = $$pre;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
 }
 $add$ptr27 = (($8) + ($__nc$2)|0);
 $call28 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8,$add$ptr27,$__iob)|0);
 $cmp32 = ($8|0)==($__nar|0);
 if ($cmp32) {
  $__ob$0 = $__o;$__obh$sroa$0$0 = 0;
 } else {
  $mul = $__nc$2 << 1;
  $call35 = (_malloc($mul)|0);
  $cmp36 = ($call35|0)==(0|0);
  if ($cmp36) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__ob$0 = $call35;$__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40,$__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8,$call28,$add$ptr27,$__ob$0,$__op,$__oe,$ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $9 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $9;
 $10 = HEAP32[$__op>>2]|0;
 $11 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call42 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__ob$0,$10,$11,$__iob,$__fl)|0);
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;return ($call42|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 84|0;
 $vararg_buffer = sp + 72|0;
 $__fmt = sp + 88|0;
 $__nar = sp + 48|0;
 $__o = sp;
 $ref$tmp = sp + 80|0;
 $agg$tmp = sp + 76|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12963>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12963+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12963+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12963+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12963+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12963+5>>0]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 32|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,$__nar,$add$ptr,$__o)|0);
 $add$ptr13 = (($__o) + ($call3)|0);
 $cmp = ($call6|0)==($add$ptr|0);
 $sub$ptr$rhs$cast = $__nar;
 $sub$ptr$lhs$cast16 = $call6;
 $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
 $add$ptr19 = (($__o) + ($sub$ptr$sub18)|0);
 $__op$0 = $cmp ? $add$ptr13 : $add$ptr19;
 $1 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call21 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl)|0);
 STACKTOP = sp;return ($call21|0);
}
function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $__va = 0, $call = 0, $call$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call$i = (___uselocale($__l)|0);
 $call = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $tobool$i = ($call$i|0)==(0|0);
 if (!($tobool$i)) {
  (___uselocale($call$i)|0);
 }
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $0 = 0, $1 = 0, $2 = 0, $__fmtflags_$i = 0, $add$ptr = 0, $add$ptr17 = 0, $and = 0, $arrayidx9 = 0, $cmp4 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 176;
 $trunc = $and&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $1 = HEAP8[$__nb>>0]|0;
   switch ($1<<24>>24) {
   case 43: case 45:  {
    $add$ptr = ((($__nb)) + 1|0);
    $retval$0 = $add$ptr;
    break L1;
    break;
   }
   default: {
   }
   }
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nb;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp4 = ($sub$ptr$sub|0)>(1);
   $cmp7 = ($1<<24>>24)==(48);
   $or$cond = $cmp4 & $cmp7;
   if ($or$cond) {
    $arrayidx9 = ((($__nb)) + 1|0);
    $2 = HEAP8[$arrayidx9>>0]|0;
    switch ($2<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $add$ptr17 = ((($__nb)) + 2|0);
    $retval$0 = $add$ptr17;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $retval$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $retval$0 = $__nb;
 }
 return ($retval$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$3 = 0, $__len$addr$0 = 0, $and = 0, $and1 = 0, $and6 = 0;
 var $and7 = 0, $cmp8 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr11 = 0, $incdec$ptr14 = 0, $incdec$ptr15 = 0, $incdec$ptr4 = 0, $specify_precision$0$off0 = 0, $tobool = 0, $tobool13 = 0, $tobool2 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 1024;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$1 = $__fmtp$addr$0;
 } else {
  $incdec$ptr4 = ((($__fmtp$addr$0)) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$1 = $incdec$ptr4;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags & 16384;
 $cmp8 = ($and6|0)==(260);
 if ($cmp8) {
  $__fmtp$addr$2 = $__fmtp$addr$1;$specify_precision$0$off0 = 0;
 } else {
  $incdec$ptr10 = ((($__fmtp$addr$1)) + 1|0);
  HEAP8[$__fmtp$addr$1>>0] = 46;
  $incdec$ptr11 = ((($__fmtp$addr$1)) + 2|0);
  HEAP8[$incdec$ptr10>>0] = 42;
  $__fmtp$addr$2 = $incdec$ptr11;$specify_precision$0$off0 = 1;
 }
 $__fmtp$addr$3 = $__fmtp$addr$2;$__len$addr$0 = $__len;
 while(1) {
  $0 = HEAP8[$__len$addr$0>>0]|0;
  $tobool13 = ($0<<24>>24)==(0);
  if ($tobool13) {
   break;
  }
  $incdec$ptr14 = ((($__len$addr$0)) + 1|0);
  $incdec$ptr15 = ((($__fmtp$addr$3)) + 1|0);
  HEAP8[$__fmtp$addr$3>>0] = $0;
  $__fmtp$addr$3 = $incdec$ptr15;$__len$addr$0 = $incdec$ptr14;
 }
 $trunc = $and6&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $1 = $and7 >>> 9;
   $2 = $1&255;
   $3 = $2 ^ 102;
   $$sink = $3;
   break;
  }
  case 256:  {
   $4 = $and7 >>> 9;
   $5 = $4&255;
   $6 = $5 ^ 101;
   $$sink = $6;
   break;
  }
  default: {
   $7 = $and7 >>> 9;
   $8 = $7&255;
   if ($cmp8) {
    $9 = $8 ^ 97;
    $$sink = $9;
    break L14;
   } else {
    $10 = $8 ^ 103;
    $$sink = $10;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$__fmtp$addr$3>>0] = $$sink;
 return ($specify_precision$0$off0|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $__va = 0, $call = 0, $call$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call$i = (___uselocale($__l)|0);
 $call = (_vasprintf($__s,$__format,$__va)|0);
 $tobool$i = ($call$i|0)==(0|0);
 if (!($tobool$i)) {
  (___uselocale($call$i)|0);
 }
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i101 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i102 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0;
 var $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr100 = 0, $add$ptr107 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i80 = 0, $call$i83 = 0, $call$i86 = 0, $call$i89 = 0, $call$i98 = 0, $call26 = 0, $call27 = 0, $call35 = 0, $call36 = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i99 = 0, $cmp1$i$i = 0, $cmp1$i$i104 = 0, $cmp101 = 0, $cmp24 = 0, $cmp32 = 0, $cmp53 = 0, $cmp57 = 0, $cmp6 = 0, $cmp61 = 0, $cmp65 = 0, $cmp8 = 0, $cmp81 = 0, $cmp84 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i117 = 0, $conv$i$i = 0;
 var $conv$i$i$i = 0, $conv25 = 0, $conv34 = 0, $conv60 = 0, $inc = 0, $inc71 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i103 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i106 = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr23 = 0, $incdec$ptr30 = 0, $incdec$ptr41 = 0, $incdec$ptr5 = 0, $incdec$ptr63 = 0, $incdec$ptr70 = 0, $incdec$ptr73 = 0;
 var $incdec$ptr87 = 0, $incdec$ptr88 = 0, $incdec$ptr91 = 0, $incdec$ptr94 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast104 = 0, $sub$ptr$lhs$cast47 = 0, $sub$ptr$lhs$cast75 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast105 = 0, $sub$ptr$rhs$cast48 = 0, $sub$ptr$rhs$cast76 = 0, $sub$ptr$rhs$cast98 = 0, $sub$ptr$sub = 0, $sub$ptr$sub106 = 0, $sub$ptr$sub49 = 0;
 var $sub$ptr$sub77 = 0, $sub$ptr$sub99 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i114 = 0, $tobool37 = 0, $vfn$i = 0, $vfn$i110 = 0, $vfn$i119 = 0, $vfn$i132 = 0, $vfn$i82 = 0, $vfn$i85 = 0, $vfn$i88 = 0, $vfn$i91 = 0, $vfn$i94 = 0, $vfn$i97 = 0, $vtable$i = 0, $vtable$i109 = 0, $vtable$i118 = 0;
 var $vtable$i131 = 0, $vtable$i81 = 0, $vtable$i84 = 0, $vtable$i87 = 0, $vtable$i90 = 0, $vtable$i93 = 0, $vtable$i96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 $call$i80 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21044)|0);
 $vtable$i = HEAP32[$call$i80>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i80);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 switch ($1<<24>>24) {
 case 43: case 45:  {
  $incdec$ptr = ((($__nb)) + 1|0);
  $vtable$i81 = HEAP32[$call$i>>2]|0;
  $vfn$i82 = ((($vtable$i81)) + 28|0);
  $2 = HEAP32[$vfn$i82>>2]|0;
  $call$i83 = (FUNCTION_TABLE_iii[$2 & 511]($call$i,$1)|0);
  $3 = HEAP32[$__oe>>2]|0;
  $incdec$ptr5 = ((($3)) + 1|0);
  HEAP32[$__oe>>2] = $incdec$ptr5;
  HEAP8[$3>>0] = $call$i83;
  $__nf$0 = $incdec$ptr;
  break;
 }
 default: {
  $__nf$0 = $__nb;
 }
 }
 $sub$ptr$lhs$cast = $__ne;
 $sub$ptr$rhs$cast = $__nf$0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp6 = ($sub$ptr$sub|0)>(1);
 L4: do {
  if ($cmp6) {
   $4 = HEAP8[$__nf$0>>0]|0;
   $cmp8 = ($4<<24>>24)==(48);
   if ($cmp8) {
    $arrayidx10 = ((($__nf$0)) + 1|0);
    $5 = HEAP8[$arrayidx10>>0]|0;
    switch ($5<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $vtable$i84 = HEAP32[$call$i>>2]|0;
    $vfn$i85 = ((($vtable$i84)) + 28|0);
    $6 = HEAP32[$vfn$i85>>2]|0;
    $call$i86 = (FUNCTION_TABLE_iii[$6 & 511]($call$i,48)|0);
    $7 = HEAP32[$__oe>>2]|0;
    $incdec$ptr20 = ((($7)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr20;
    HEAP8[$7>>0] = $call$i86;
    $incdec$ptr21 = ((($__nf$0)) + 2|0);
    $8 = HEAP8[$arrayidx10>>0]|0;
    $vtable$i87 = HEAP32[$call$i>>2]|0;
    $vfn$i88 = ((($vtable$i87)) + 28|0);
    $9 = HEAP32[$vfn$i88>>2]|0;
    $call$i89 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,$8)|0);
    $10 = HEAP32[$__oe>>2]|0;
    $incdec$ptr23 = ((($10)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr23;
    HEAP8[$10>>0] = $call$i89;
    $__ns$0 = $incdec$ptr21;
    while(1) {
     $cmp24 = ($__ns$0>>>0)<($__ne>>>0);
     if (!($cmp24)) {
      $__nf$1 = $incdec$ptr21;$__ns$2 = $__ns$0;
      break L4;
     }
     $11 = HEAP8[$__ns$0>>0]|0;
     $conv25 = $11 << 24 >> 24;
     $call26 = (__ZNSt3__26__clocEv()|0);
     $call27 = (_isxdigit_l($conv25,$call26)|0);
     $tobool = ($call27|0)==(0);
     if ($tobool) {
      $__nf$1 = $incdec$ptr21;$__ns$2 = $__ns$0;
      break L4;
     }
     $incdec$ptr30 = ((($__ns$0)) + 1|0);
     $__ns$0 = $incdec$ptr30;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L12: do {
  if ((label|0) == 4) {
   $__ns$1 = $__nf$0;
   while(1) {
    $cmp32 = ($__ns$1>>>0)<($__ne>>>0);
    if (!($cmp32)) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $12 = HEAP8[$__ns$1>>0]|0;
    $conv34 = $12 << 24 >> 24;
    $call35 = (__ZNSt3__26__clocEv()|0);
    $call36 = (_isdigit_l($conv34,$call35)|0);
    $tobool37 = ($call36|0)==(0);
    if ($tobool37) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $incdec$ptr41 = ((($__ns$1)) + 1|0);
    $__ns$1 = $incdec$ptr41;
   }
  }
 } while(0);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $13 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($13<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $14 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $13&255;
 $cond$i$i = $tobool$i$i$i ? $14 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 L19: do {
  if ($cmp$i) {
   $15 = HEAP32[$__oe>>2]|0;
   $vtable$i90 = HEAP32[$call$i>>2]|0;
   $vfn$i91 = ((($vtable$i90)) + 32|0);
   $16 = HEAP32[$vfn$i91>>2]|0;
   (FUNCTION_TABLE_iiiii[$16 & 511]($call$i,$__nf$1,$__ns$2,$15)|0);
   $sub$ptr$lhs$cast47 = $__ns$2;
   $sub$ptr$rhs$cast48 = $__nf$1;
   $sub$ptr$sub49 = (($sub$ptr$lhs$cast47) - ($sub$ptr$rhs$cast48))|0;
   $17 = HEAP32[$__oe>>2]|0;
   $add$ptr = (($17) + ($sub$ptr$sub49)|0);
   HEAP32[$__oe>>2] = $add$ptr;
   $$pre$phiZ2D = $call$i;
  } else {
   $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
   L22: do {
    if (!($cmp$i$i)) {
     $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ns$2;
     while(1) {
      $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
      if (!($cmp1$i$i)) {
       break L22;
      }
      $18 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $19 = HEAP8[$incdec$ptr$i$i>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $19;
      HEAP8[$incdec$ptr$i$i>>0] = $18;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
   } while(0);
   $vtable$i96 = HEAP32[$call$i80>>2]|0;
   $vfn$i97 = ((($vtable$i96)) + 16|0);
   $20 = HEAP32[$vfn$i97>>2]|0;
   $call$i98 = (FUNCTION_TABLE_ii[$20 & 511]($call$i80)|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $cmp53 = ($__p$0>>>0)<($__ns$2>>>0);
    if (!($cmp53)) {
     break;
    }
    $24 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i$i114 = ($24<<24>>24)<(0);
    $25 = HEAP32[$__grouping>>2]|0;
    $cond$i$i117 = $tobool$i$i$i114 ? $25 : $__grouping;
    $add$ptr$i = (($cond$i$i117) + ($__dg$0)|0);
    $26 = HEAP8[$add$ptr$i>>0]|0;
    $cmp57 = ($26<<24>>24)>(0);
    $conv60 = $26 << 24 >> 24;
    $cmp61 = ($__dc$0|0)==($conv60|0);
    $or$cond = $cmp57 & $cmp61;
    if ($or$cond) {
     $27 = HEAP32[$__oe>>2]|0;
     $incdec$ptr63 = ((($27)) + 1|0);
     HEAP32[$__oe>>2] = $incdec$ptr63;
     HEAP8[$27>>0] = $call$i98;
     $28 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i = ($28<<24>>24)<(0);
     $29 = HEAP32[$__size_$i3$i$i>>2]|0;
     $conv$i$i = $28&255;
     $cond$i = $tobool$i$i ? $29 : $conv$i$i;
     $sub = (($cond$i) + -1)|0;
     $cmp65 = ($__dg$0>>>0)<($sub>>>0);
     $inc = $cmp65&1;
     $spec$select = (($__dg$0) + ($inc))|0;
     $__dc$1 = 0;$__dg$1 = $spec$select;
    } else {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    }
    $30 = HEAP8[$__p$0>>0]|0;
    $vtable$i131 = HEAP32[$call$i>>2]|0;
    $vfn$i132 = ((($vtable$i131)) + 28|0);
    $31 = HEAP32[$vfn$i132>>2]|0;
    $call$i133 = (FUNCTION_TABLE_iii[$31 & 511]($call$i,$30)|0);
    $32 = HEAP32[$__oe>>2]|0;
    $incdec$ptr70 = ((($32)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr70;
    HEAP8[$32>>0] = $call$i133;
    $inc71 = (($__dc$1) + 1)|0;
    $incdec$ptr73 = ((($__p$0)) + 1|0);
    $__dc$0 = $inc71;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr73;
   }
   $sub$ptr$lhs$cast75 = $__nf$1;
   $sub$ptr$rhs$cast76 = $__nb;
   $sub$ptr$sub77 = (($sub$ptr$lhs$cast75) - ($sub$ptr$rhs$cast76))|0;
   $add$ptr78 = (($__ob) + ($sub$ptr$sub77)|0);
   $21 = HEAP32[$__oe>>2]|0;
   $cmp$i$i99 = ($add$ptr78|0)==($21|0);
   if ($cmp$i$i99) {
    $$pre$phiZ2D = $call$i;
   } else {
    $__first$addr$0$i$i101 = $add$ptr78;$__last$addr$0$i$i102 = $21;
    while(1) {
     $incdec$ptr$i$i103 = ((($__last$addr$0$i$i102)) + -1|0);
     $cmp1$i$i104 = ($__first$addr$0$i$i101>>>0)<($incdec$ptr$i$i103>>>0);
     if (!($cmp1$i$i104)) {
      $$pre$phiZ2D = $call$i;
      break L19;
     }
     $22 = HEAP8[$__first$addr$0$i$i101>>0]|0;
     $23 = HEAP8[$incdec$ptr$i$i103>>0]|0;
     HEAP8[$__first$addr$0$i$i101>>0] = $23;
     HEAP8[$incdec$ptr$i$i103>>0] = $22;
     $incdec$ptr2$i$i106 = ((($__first$addr$0$i$i101)) + 1|0);
     $__first$addr$0$i$i101 = $incdec$ptr2$i$i106;$__last$addr$0$i$i102 = $incdec$ptr$i$i103;
    }
   }
  }
 } while(0);
 $__nf$2 = $__ns$2;
 while(1) {
  $cmp81 = ($__nf$2>>>0)<($__ne>>>0);
  if (!($cmp81)) {
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2>>0]|0;
  $cmp84 = ($33<<24>>24)==(46);
  if ($cmp84) {
   label = 32;
   break;
  }
  $vtable$i109 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i110 = ((($vtable$i109)) + 28|0);
  $36 = HEAP32[$vfn$i110>>2]|0;
  $call$i111 = (FUNCTION_TABLE_iii[$36 & 511]($call$i,$33)|0);
  $37 = HEAP32[$__oe>>2]|0;
  $incdec$ptr91 = ((($37)) + 1|0);
  HEAP32[$__oe>>2] = $incdec$ptr91;
  HEAP8[$37>>0] = $call$i111;
  $incdec$ptr94 = ((($__nf$2)) + 1|0);
  $__nf$2 = $incdec$ptr94;
 }
 if ((label|0) == 32) {
  $vtable$i118 = HEAP32[$call$i80>>2]|0;
  $vfn$i119 = ((($vtable$i118)) + 12|0);
  $34 = HEAP32[$vfn$i119>>2]|0;
  $call$i120 = (FUNCTION_TABLE_ii[$34 & 511]($call$i80)|0);
  $35 = HEAP32[$__oe>>2]|0;
  $incdec$ptr87 = ((($35)) + 1|0);
  HEAP32[$__oe>>2] = $incdec$ptr87;
  HEAP8[$35>>0] = $call$i120;
  $incdec$ptr88 = ((($__nf$2)) + 1|0);
  $__nf$3 = $incdec$ptr88;
 }
 $38 = HEAP32[$__oe>>2]|0;
 $vtable$i93 = HEAP32[$call$i>>2]|0;
 $vfn$i94 = ((($vtable$i93)) + 32|0);
 $39 = HEAP32[$vfn$i94>>2]|0;
 (FUNCTION_TABLE_iiiii[$39 & 511]($call$i,$__nf$3,$__ne,$38)|0);
 $sub$ptr$rhs$cast98 = $__nf$3;
 $sub$ptr$sub99 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast98))|0;
 $40 = HEAP32[$__oe>>2]|0;
 $add$ptr100 = (($40) + ($sub$ptr$sub99)|0);
 HEAP32[$__oe>>2] = $add$ptr100;
 $cmp101 = ($__np|0)==($__ne|0);
 $sub$ptr$lhs$cast104 = $__np;
 $sub$ptr$rhs$cast105 = $__nb;
 $sub$ptr$sub106 = (($sub$ptr$lhs$cast104) - ($sub$ptr$rhs$cast105))|0;
 $add$ptr107 = (($__ob) + ($sub$ptr$sub106)|0);
 $storemerge = $cmp101 ? $add$ptr100 : $add$ptr107;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$11 = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$2$ph = 0, $__len$addr$0 = 0, $and = 0, $and1 = 0, $and14 = 0, $and9 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $incdec$ptr7 = 0, $incdec$ptr8 = 0, $tobool = 0, $tobool2 = 0;
 var $tobool6 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 512;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$2$ph = $__fmtp$addr$0;
 } else {
  $incdec$ptr4 = ((($__fmtp$addr$0)) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$2$ph = $incdec$ptr4;
 }
 $__fmtp$addr$2 = $__fmtp$addr$2$ph;$__len$addr$0 = $__len;
 while(1) {
  $0 = HEAP8[$__len$addr$0>>0]|0;
  $tobool6 = ($0<<24>>24)==(0);
  if ($tobool6) {
   break;
  }
  $incdec$ptr7 = ((($__len$addr$0)) + 1|0);
  $incdec$ptr8 = ((($__fmtp$addr$2)) + 1|0);
  HEAP8[$__fmtp$addr$2>>0] = $0;
  $__fmtp$addr$2 = $incdec$ptr8;$__len$addr$0 = $incdec$ptr7;
 }
 $and9 = $__flags & 74;
 $trunc = $and9&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink = 111;
  break;
 }
 case 8:  {
  $and14 = $__flags >>> 9;
  $1 = $and14 & 32;
  $2 = $1&255;
  $3 = $2 ^ 120;
  $$sink = $3;
  break;
 }
 default: {
  $$11 = $__signd ? 100 : 117;
  $$sink = $$11;
 }
 }
 HEAP8[$__fmtp$addr$2>>0] = $$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i74 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i75 = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i96 = 0, $add$ptr54 = 0, $add$ptr62 = 0, $arrayidx16 = 0, $call$i = 0, $call$i53 = 0, $call$i59 = 0, $call$i62 = 0, $call$i65 = 0, $call$i68 = 0, $call$i71 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i72 = 0;
 var $cmp1$i$i = 0, $cmp1$i$i77 = 0, $cmp12 = 0, $cmp14 = 0, $cmp32 = 0, $cmp35 = 0, $cmp39 = 0, $cmp43 = 0, $cmp56 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i95 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv38 = 0, $inc = 0, $inc49 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i76 = 0;
 var $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i79 = 0, $incdec$ptr26 = 0, $incdec$ptr27 = 0, $incdec$ptr29 = 0, $incdec$ptr41 = 0, $incdec$ptr48 = 0, $incdec$ptr50 = 0, $incdec$ptr8 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast51 = 0, $sub$ptr$lhs$cast59 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0, $sub$ptr$rhs$cast52 = 0;
 var $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub53 = 0, $sub$ptr$sub61 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, $vfn$i = 0, $vfn$i55 = 0, $vfn$i58 = 0, $vfn$i61 = 0, $vfn$i64 = 0, $vfn$i67 = 0, $vfn$i70 = 0, $vtable$i = 0, $vtable$i54 = 0, $vtable$i57 = 0, $vtable$i60 = 0, $vtable$i63 = 0;
 var $vtable$i66 = 0, $vtable$i69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 $call$i53 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21044)|0);
 $vtable$i = HEAP32[$call$i53>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i53);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $2 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $1&255;
 $cond$i$i = $tobool$i$i$i ? $2 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 if ($cmp$i) {
  $vtable$i54 = HEAP32[$call$i>>2]|0;
  $vfn$i55 = ((($vtable$i54)) + 32|0);
  $3 = HEAP32[$vfn$i55>>2]|0;
  (FUNCTION_TABLE_iiiii[$3 & 511]($call$i,$__nb,$__ne,$__ob)|0);
  $sub$ptr$lhs$cast = $__ne;
  $sub$ptr$rhs$cast = $__nb;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $add$ptr = (($__ob) + ($sub$ptr$sub)|0);
  HEAP32[$__oe>>2] = $add$ptr;
  $29 = $add$ptr;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $4 = HEAP8[$__nb>>0]|0;
  switch ($4<<24>>24) {
  case 43: case 45:  {
   $incdec$ptr = ((($__nb)) + 1|0);
   $vtable$i57 = HEAP32[$call$i>>2]|0;
   $vfn$i58 = ((($vtable$i57)) + 28|0);
   $5 = HEAP32[$vfn$i58>>2]|0;
   $call$i59 = (FUNCTION_TABLE_iii[$5 & 511]($call$i,$4)|0);
   $6 = HEAP32[$__oe>>2]|0;
   $incdec$ptr8 = ((($6)) + 1|0);
   HEAP32[$__oe>>2] = $incdec$ptr8;
   HEAP8[$6>>0] = $call$i59;
   $__nf$0 = $incdec$ptr;
   break;
  }
  default: {
   $__nf$0 = $__nb;
  }
  }
  $sub$ptr$lhs$cast9 = $__ne;
  $sub$ptr$rhs$cast10 = $__nf$0;
  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
  $cmp12 = ($sub$ptr$sub11|0)>(1);
  L7: do {
   if ($cmp12) {
    $7 = HEAP8[$__nf$0>>0]|0;
    $cmp14 = ($7<<24>>24)==(48);
    if ($cmp14) {
     $arrayidx16 = ((($__nf$0)) + 1|0);
     $8 = HEAP8[$arrayidx16>>0]|0;
     switch ($8<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $__nf$1 = $__nf$0;
      break L7;
     }
     }
     $vtable$i60 = HEAP32[$call$i>>2]|0;
     $vfn$i61 = ((($vtable$i60)) + 28|0);
     $9 = HEAP32[$vfn$i61>>2]|0;
     $call$i62 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,48)|0);
     $10 = HEAP32[$__oe>>2]|0;
     $incdec$ptr26 = ((($10)) + 1|0);
     HEAP32[$__oe>>2] = $incdec$ptr26;
     HEAP8[$10>>0] = $call$i62;
     $incdec$ptr27 = ((($__nf$0)) + 2|0);
     $11 = HEAP8[$arrayidx16>>0]|0;
     $vtable$i63 = HEAP32[$call$i>>2]|0;
     $vfn$i64 = ((($vtable$i63)) + 28|0);
     $12 = HEAP32[$vfn$i64>>2]|0;
     $call$i65 = (FUNCTION_TABLE_iii[$12 & 511]($call$i,$11)|0);
     $13 = HEAP32[$__oe>>2]|0;
     $incdec$ptr29 = ((($13)) + 1|0);
     HEAP32[$__oe>>2] = $incdec$ptr29;
     HEAP8[$13>>0] = $call$i65;
     $__nf$1 = $incdec$ptr27;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } while(0);
  $cmp$i$i = ($__nf$1|0)==($__ne|0);
  L12: do {
   if (!($cmp$i$i)) {
    $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ne;
    while(1) {
     $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
     $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
     if (!($cmp1$i$i)) {
      break L12;
     }
     $14 = HEAP8[$__first$addr$0$i$i>>0]|0;
     $15 = HEAP8[$incdec$ptr$i$i>>0]|0;
     HEAP8[$__first$addr$0$i$i>>0] = $15;
     HEAP8[$incdec$ptr$i$i>>0] = $14;
     $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
     $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
    }
   }
  } while(0);
  $vtable$i69 = HEAP32[$call$i53>>2]|0;
  $vfn$i70 = ((($vtable$i69)) + 16|0);
  $16 = HEAP32[$vfn$i70>>2]|0;
  $call$i71 = (FUNCTION_TABLE_ii[$16 & 511]($call$i53)|0);
  $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
  while(1) {
   $cmp32 = ($__p$0>>>0)<($__ne>>>0);
   if (!($cmp32)) {
    break;
   }
   $20 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i90 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__grouping>>2]|0;
   $cond$i$i95 = $tobool$i$i$i90 ? $21 : $__grouping;
   $add$ptr$i96 = (($cond$i$i95) + ($__dg$0)|0);
   $22 = HEAP8[$add$ptr$i96>>0]|0;
   $cmp35 = ($22<<24>>24)!=(0);
   $conv38 = $22 << 24 >> 24;
   $cmp39 = ($__dc$0|0)==($conv38|0);
   $or$cond = $cmp35 & $cmp39;
   if ($or$cond) {
    $23 = HEAP32[$__oe>>2]|0;
    $incdec$ptr41 = ((($23)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr41;
    HEAP8[$23>>0] = $call$i71;
    $24 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i = ($24<<24>>24)<(0);
    $25 = HEAP32[$__size_$i3$i$i>>2]|0;
    $conv$i$i = $24&255;
    $cond$i = $tobool$i$i ? $25 : $conv$i$i;
    $sub = (($cond$i) + -1)|0;
    $cmp43 = ($__dg$0>>>0)<($sub>>>0);
    $inc = $cmp43&1;
    $spec$select = (($__dg$0) + ($inc))|0;
    $__dc$1 = 0;$__dg$1 = $spec$select;
   } else {
    $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
   }
   $26 = HEAP8[$__p$0>>0]|0;
   $vtable$i66 = HEAP32[$call$i>>2]|0;
   $vfn$i67 = ((($vtable$i66)) + 28|0);
   $27 = HEAP32[$vfn$i67>>2]|0;
   $call$i68 = (FUNCTION_TABLE_iii[$27 & 511]($call$i,$26)|0);
   $28 = HEAP32[$__oe>>2]|0;
   $incdec$ptr48 = ((($28)) + 1|0);
   HEAP32[$__oe>>2] = $incdec$ptr48;
   HEAP8[$28>>0] = $call$i68;
   $inc49 = (($__dc$1) + 1)|0;
   $incdec$ptr50 = ((($__p$0)) + 1|0);
   $__dc$0 = $inc49;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr50;
  }
  $sub$ptr$lhs$cast51 = $__nf$1;
  $sub$ptr$rhs$cast52 = $__nb;
  $sub$ptr$sub53 = (($sub$ptr$lhs$cast51) - ($sub$ptr$rhs$cast52))|0;
  $add$ptr54 = (($__ob) + ($sub$ptr$sub53)|0);
  $17 = HEAP32[$__oe>>2]|0;
  $cmp$i$i72 = ($add$ptr54|0)==($17|0);
  if ($cmp$i$i72) {
   $29 = $add$ptr54;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i74 = $add$ptr54;$__last$addr$0$i$i75 = $17;
   while(1) {
    $incdec$ptr$i$i76 = ((($__last$addr$0$i$i75)) + -1|0);
    $cmp1$i$i77 = ($__first$addr$0$i$i74>>>0)<($incdec$ptr$i$i76>>>0);
    if (!($cmp1$i$i77)) {
     break;
    }
    $18 = HEAP8[$__first$addr$0$i$i74>>0]|0;
    $19 = HEAP8[$incdec$ptr$i$i76>>0]|0;
    HEAP8[$__first$addr$0$i$i74>>0] = $19;
    HEAP8[$incdec$ptr$i$i76>>0] = $18;
    $incdec$ptr2$i$i79 = ((($__first$addr$0$i$i74)) + 1|0);
    $__first$addr$0$i$i74 = $incdec$ptr2$i$i79;$__last$addr$0$i$i75 = $incdec$ptr$i$i76;
   }
   $$pre = HEAP32[$__oe>>2]|0;
   $29 = $$pre;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 $cmp56 = ($__np|0)==($__ne|0);
 $sub$ptr$lhs$cast59 = $__np;
 $sub$ptr$sub61 = (($sub$ptr$lhs$cast59) - ($sub$ptr$rhs$cast60$pre$phiZZZZ2D))|0;
 $add$ptr62 = (($__ob) + ($sub$ptr$sub61)|0);
 $storemerge = $cmp56 ? $29 : $add$ptr62;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0;
 var $__i$sroa$0$0 = 0, $__nm = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i = 0, $call$i$i = 0, $call2 = 0, $call2$i$i = 0, $call3$i = 0, $call4$i = 0, $call4$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i11 = 0, $cond$i$i = 0;
 var $cond$i5$i = 0, $cond$i6$i = 0, $conv = 0, $conv$i$i$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i8 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i6 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 24|0);
  $1 = HEAP32[$vfn>>2]|0;
  $2 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  $conv = $__v&1;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call2 = (FUNCTION_TABLE_iiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$__iob,$__fl,$conv)|0);
  $retval$sroa$0$0 = $call2;
 } else {
  __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21068)|0);
  __ZNSt3__26localeD2Ev($ref$tmp);
  $vtable$i = HEAP32[$call$i>>2]|0;
  if ($__v) {
   $vfn$i = ((($vtable$i)) + 24|0);
   $3 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$3 & 511]($__nm,$call$i);
  } else {
   $vfn$i6 = ((($vtable$i)) + 28|0);
   $4 = HEAP32[$vfn$i6>>2]|0;
   FUNCTION_TABLE_vii[$4 & 511]($__nm,$call$i);
  }
  $5 = ((($__nm)) + 8|0);
  $__size_$i$i$i = ((($5)) + 3|0);
  $6 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($6<<24>>24)<(0);
  $7 = HEAP32[$__nm>>2]|0;
  $cond$i$i = $tobool$i$i$i ? $7 : $__nm;
  $__size_$i2$i$i = ((($__nm)) + 4|0);
  $10 = $7;$8 = $6;$__i$sroa$0$0 = $cond$i$i;
  while(1) {
   $tobool$i$i$i8 = ($8<<24>>24)<(0);
   $9 = HEAP32[$__size_$i2$i$i>>2]|0;
   $conv$i$i$i = $8&255;
   $cond$i6$i = $tobool$i$i$i8 ? $10 : $__nm;
   $cond$i5$i = $tobool$i$i$i8 ? $9 : $conv$i$i$i;
   $add$ptr$i = (($cond$i6$i) + ($cond$i5$i<<2)|0);
   $cmp$i$i11 = ($__i$sroa$0$0|0)==($add$ptr$i|0);
   if ($cmp$i$i11) {
    break;
   }
   $11 = HEAP32[$__i$sroa$0$0>>2]|0;
   $12 = HEAP32[$__s>>2]|0;
   $tobool$i = ($12|0)==(0|0);
   if (!($tobool$i)) {
    $__nout_$i$i = ((($12)) + 24|0);
    $13 = HEAP32[$__nout_$i$i>>2]|0;
    $__eout_$i$i = ((($12)) + 28|0);
    $14 = HEAP32[$__eout_$i$i>>2]|0;
    $cmp$i$i = ($13|0)==($14|0);
    if ($cmp$i$i) {
     $vtable$i$i = HEAP32[$12>>2]|0;
     $vfn$i$i = ((($vtable$i$i)) + 52|0);
     $15 = HEAP32[$vfn$i$i>>2]|0;
     $call$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $call2$i$i = (FUNCTION_TABLE_iii[$15 & 511]($12,$call$i$i)|0);
     $retval$0$i$i = $call2$i$i;
    } else {
     $incdec$ptr$i$i = ((($13)) + 4|0);
     HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
     HEAP32[$13>>2] = $11;
     $call4$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i = $call4$i$i;
    }
    $call3$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i,$call3$i)|0);
    if ($call4$i) {
     HEAP32[$__s>>2] = 0;
    }
   }
   $incdec$ptr$i = ((($__i$sroa$0$0)) + 4|0);
   $$pre = HEAP8[$__size_$i$i$i>>0]|0;
   $$pre17 = HEAP32[$__nm>>2]|0;
   $10 = $$pre17;$8 = $$pre;$__i$sroa$0$0 = $incdec$ptr$i;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s>>2]|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0;
 var $call8 = 0, $mul = 0, $ref$tmp = 0, $sub = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12974>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12974+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12974+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12974+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12974+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12974+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12980,1,$0);
 $1 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $1 >>> 9;
 $and$lobit = $and & 1;
 $add3 = (($and$lobit) + 13)|0;
 $2 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $sub = $and$lobit << 1;
 $mul = $sub | 24;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9<<2;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $3 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $3;
 $4 = HEAP32[$__op>>2]|0;
 $5 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$4,$5,$__iob,$__fl)|0);
 _llvm_stackrestore(($2|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0;
 var $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $mul = 0, $ref$tmp = 0, $sub = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12971,1,$6);
 $7 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $7 >>> 9;
 $and$lobit = $and & 1;
 $add3 = (($and$lobit) + 23)|0;
 $8 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 $9 = $vararg_buffer;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $sub = $and$lobit << 1;
 $mul = $sub | 44;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9<<2;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $13 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $13;
 $14 = HEAP32[$__op>>2]|0;
 $15 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$14,$15,$__iob,$__fl)|0);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0;
 var $call6 = 0, $call8 = 0, $ref$tmp = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12974>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12974+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12974+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12974+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12974+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12974+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12980,0,$0);
 $1 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $1 >>> 9;
 $and$lobit = $and & 1;
 $add3 = $and$lobit | 12;
 $2 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $add = $and$lobit << 1;
 $sub9 = $add | 21;
 $vla10$alloca_mul = $sub9<<2;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $3 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $3;
 $4 = HEAP32[$__op>>2]|0;
 $5 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$4,$5,$__iob,$__fl)|0);
 _llvm_stackrestore(($2|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr = 0;
 var $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $mul = 0, $ref$tmp = 0, $sub9 = 0, $vararg_buffer = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,12971,0,$6);
 $7 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $7 >>> 9;
 $and$lobit = $and & 1;
 $add = $and$lobit | 22;
 $add3 = (($add) + 1)|0;
 $8 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add3;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $call4 = (__ZNSt3__26__clocEv()|0);
 $9 = $vararg_buffer;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $call6 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla,$add3,$call4,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($vla) + ($call6)|0);
 $call8 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla,$add$ptr7,$__iob)|0);
 $mul = $add << 1;
 $sub9 = (($mul) + -1)|0;
 $vla10$alloca_mul = $sub9<<2;
 $vla10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla10$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla10$alloca_mul)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla,$call8,$add$ptr7,$vla10,$__op,$__oe,$ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $13 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $13;
 $14 = HEAP32[$__op>>2]|0;
 $15 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call11 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$vla10,$14,$15,$__iob,$__fl)|0);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return ($call11|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i27 = 0, $add$ptr = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call2 = 0, $call21 = 0, $call28 = 0, $call35 = 0;
 var $call4 = 0, $call42 = 0, $call7 = 0, $cmp = 0, $cmp23 = 0, $cmp32 = 0, $cmp36 = 0, $mul34 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $agg$tmp$byval_copy = sp + 348|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $__fmt = sp + 272|0;
 $__nar = sp + 240|0;
 $__nb = sp + 344|0;
 $__o = sp;
 $__op = sp + 340|0;
 $__oe = sp + 336|0;
 $ref$tmp40 = sp + 332|0;
 $agg$tmp = sp + 328|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,21468,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 if ($cmp) {
  $call14 = (__ZNSt3__26__clocEv()|0);
  if ($call2) {
   $__precision_$i27 = ((($__iob)) + 8|0);
   $6 = HEAP32[$__precision_$i27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $6;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $call17 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $call17;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $call21 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $call21;
  }
  $7 = HEAP32[$__nb>>2]|0;
  $cmp23 = ($7|0)==(0|0);
  if ($cmp23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $8 = $7;$__nbh$sroa$0$0 = $7;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre = HEAP32[$__nb>>2]|0;
  $8 = $$pre;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
 }
 $add$ptr27 = (($8) + ($__nc$2)|0);
 $call28 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8,$add$ptr27,$__iob)|0);
 $cmp32 = ($8|0)==($__nar|0);
 do {
  if ($cmp32) {
   $12 = 0;$__ob$0 = $__o;$__obh$sroa$0$0 = 1;
  } else {
   $mul34 = $__nc$2 << 3;
   $call35 = (_malloc($mul34)|0);
   $cmp36 = ($call35|0)==(0|0);
   if ($cmp36) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $12 = $call35;$__ob$0 = $call35;$__obh$sroa$0$0 = 0;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40,$__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8,$call28,$add$ptr27,$__ob$0,$__op,$__oe,$ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $9 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $9;
 $10 = HEAP32[$__op>>2]|0;
 $11 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call42 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__ob$0,$10,$11,$__iob,$__fl)|0);
 HEAP32[$__s>>2] = $call42;
 if (!($__obh$sroa$0$0)) {
  _free($12);
 }
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;return ($call42|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i27 = 0, $add$ptr = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call2 = 0, $call21 = 0, $call28 = 0, $call35 = 0;
 var $call4 = 0, $call42 = 0, $call7 = 0, $cmp = 0, $cmp23 = 0, $cmp32 = 0, $cmp36 = 0, $mul34 = 0, $ref$tmp40 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $agg$tmp$byval_copy = sp + 348|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $__fmt = sp + 272|0;
 $__nar = sp + 240|0;
 $__nb = sp + 344|0;
 $__o = sp;
 $__op = sp + 340|0;
 $__oe = sp + 336|0;
 $ref$tmp40 = sp + 332|0;
 $agg$tmp = sp + 328|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,12969,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 if ($cmp) {
  $call14 = (__ZNSt3__26__clocEv()|0);
  if ($call2) {
   $__precision_$i27 = ((($__iob)) + 8|0);
   $6 = HEAP32[$__precision_$i27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $6;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $call17 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $call17;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $call21 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb,$call14,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $call21;
  }
  $7 = HEAP32[$__nb>>2]|0;
  $cmp23 = ($7|0)==(0|0);
  if ($cmp23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $8 = $7;$__nbh$sroa$0$0 = $7;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre = HEAP32[$__nb>>2]|0;
  $8 = $$pre;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
 }
 $add$ptr27 = (($8) + ($__nc$2)|0);
 $call28 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8,$add$ptr27,$__iob)|0);
 $cmp32 = ($8|0)==($__nar|0);
 do {
  if ($cmp32) {
   $12 = 0;$__ob$0 = $__o;$__obh$sroa$0$0 = 1;
  } else {
   $mul34 = $__nc$2 << 3;
   $call35 = (_malloc($mul34)|0);
   $cmp36 = ($call35|0)==(0|0);
   if ($cmp36) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $12 = $call35;$__ob$0 = $call35;$__obh$sroa$0$0 = 0;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp40,$__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8,$call28,$add$ptr27,$__ob$0,$__op,$__oe,$ref$tmp40);
 __ZNSt3__26localeD2Ev($ref$tmp40);
 $9 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $9;
 $10 = HEAP32[$__op>>2]|0;
 $11 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call42 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__ob$0,$10,$11,$__iob,$__fl)|0);
 HEAP32[$__s>>2] = $call42;
 if (!($__obh$sroa$0$0)) {
  _free($12);
 }
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;return ($call42|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $agg$tmp$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 184|0;
 $__fmt = sp + 200|0;
 $__nar = sp + 160|0;
 $__o = sp;
 $ref$tmp = sp + 192|0;
 $agg$tmp = sp + 188|0;
 ;HEAP8[$__fmt>>0]=HEAP8[12963>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[12963+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[12963+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[12963+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[12963+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[12963+5>>0]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 48|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$0 & 511]($call$i,$__nar,$add$ptr,$__o)|0);
 $add$ptr13 = (($__o) + ($call3<<2)|0);
 $cmp = ($call6|0)==($add$ptr|0);
 $sub$ptr$rhs$cast = $__nar;
 $sub$ptr$lhs$cast16 = $call6;
 $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
 $add$ptr19 = (($__o) + ($sub$ptr$sub18<<2)|0);
 $__op$0 = $cmp ? $add$ptr13 : $add$ptr19;
 $1 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call21 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl)|0);
 STACKTOP = sp;return ($call21|0);
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__size_$i$i$i = 0, $__sp = 0, $__width_$i = 0, $call$i = 0, $call$i32 = 0, $call$i35 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp22 = 0;
 var $cmp32 = 0, $cmp36 = 0, $cmp8 = 0, $cond$i$i = 0, $retval$sroa$0$2 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div31 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub6 = 0, $tobool$i$i$i = 0, $vfn$i = 0, $vfn$i31 = 0, $vfn$i34 = 0, $vtable$i = 0;
 var $vtable$i30 = 0, $vtable$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 L1: do {
  if ($cmp) {
   $retval$sroa$0$2 = 0;
  } else {
   $sub$ptr$lhs$cast = $__oe;
   $sub$ptr$rhs$cast = $__ob;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   $__width_$i = ((($__iob)) + 12|0);
   $1 = HEAP32[$__width_$i>>2]|0;
   $cmp1 = ($1|0)>($sub$ptr$div|0);
   $sub = (($1) - ($sub$ptr$div))|0;
   $__ns$0 = $cmp1 ? $sub : 0;
   $sub$ptr$lhs$cast4 = $__op;
   $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
   $cmp8 = ($sub$ptr$sub6|0)>(0);
   if ($cmp8) {
    $vtable$i30 = HEAP32[$0>>2]|0;
    $vfn$i31 = ((($vtable$i30)) + 48|0);
    $2 = HEAP32[$vfn$i31>>2]|0;
    $call$i32 = (FUNCTION_TABLE_iiii[$2 & 511]($0,$__ob,$sub$ptr$div7)|0);
    $cmp12 = ($call$i32|0)==($sub$ptr$div7|0);
    if (!($cmp12)) {
     HEAP32[$__s>>2] = 0;
     $retval$sroa$0$2 = 0;
     break;
    }
   }
   $cmp17 = ($__ns$0|0)>(0);
   do {
    if ($cmp17) {
     ;HEAP32[$__sp>>2]=0|0;HEAP32[$__sp+4>>2]=0|0;HEAP32[$__sp+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($__sp,$__ns$0,$__fl);
     $3 = ((($__sp)) + 8|0);
     $__size_$i$i$i = ((($3)) + 3|0);
     $4 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i = ($4<<24>>24)<(0);
     $5 = HEAP32[$__sp>>2]|0;
     $cond$i$i = $tobool$i$i$i ? $5 : $__sp;
     $vtable$i33 = HEAP32[$0>>2]|0;
     $vfn$i34 = ((($vtable$i33)) + 48|0);
     $6 = HEAP32[$vfn$i34>>2]|0;
     $call$i35 = (FUNCTION_TABLE_iiii[$6 & 511]($0,$cond$i$i,$__ns$0)|0);
     $cmp22 = ($call$i35|0)==($__ns$0|0);
     if ($cmp22) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $retval$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $sub$ptr$sub30 = (($sub$ptr$lhs$cast) - ($sub$ptr$lhs$cast4))|0;
   $sub$ptr$div31 = $sub$ptr$sub30 >> 2;
   $cmp32 = ($sub$ptr$sub30|0)>(0);
   if ($cmp32) {
    $vtable$i = HEAP32[$0>>2]|0;
    $vfn$i = ((($vtable$i)) + 48|0);
    $7 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiii[$7 & 511]($0,$__op,$sub$ptr$div31)|0);
    $cmp36 = ($call$i|0)==($sub$ptr$div31|0);
    if (!($cmp36)) {
     HEAP32[$__s>>2] = 0;
     $retval$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$__width_$i>>2] = 0;
   $retval$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i102 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i103 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0;
 var $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr100 = 0, $add$ptr107 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i81 = 0, $call$i84 = 0, $call$i87 = 0, $call$i90 = 0, $call$i99 = 0, $call26 = 0, $call27 = 0;
 var $call35 = 0, $call36 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i100 = 0, $cmp1$i$i = 0, $cmp1$i$i105 = 0, $cmp101 = 0, $cmp24 = 0, $cmp32 = 0, $cmp53 = 0, $cmp57 = 0, $cmp6 = 0, $cmp61 = 0, $cmp65 = 0, $cmp8 = 0, $cmp81 = 0, $cmp84 = 0, $cond$i = 0, $cond$i$i = 0;
 var $cond$i$i117 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv25 = 0, $conv34 = 0, $conv60 = 0, $inc = 0, $inc71 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i104 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i107 = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr23 = 0, $incdec$ptr30 = 0, $incdec$ptr41 = 0, $incdec$ptr5 = 0, $incdec$ptr63 = 0;
 var $incdec$ptr70 = 0, $incdec$ptr73 = 0, $incdec$ptr87 = 0, $incdec$ptr88 = 0, $incdec$ptr91 = 0, $incdec$ptr94 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast104 = 0, $sub$ptr$lhs$cast47 = 0, $sub$ptr$lhs$cast75 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast105 = 0, $sub$ptr$rhs$cast48 = 0, $sub$ptr$rhs$cast76 = 0, $sub$ptr$rhs$cast98 = 0, $sub$ptr$sub = 0;
 var $sub$ptr$sub106 = 0, $sub$ptr$sub49 = 0, $sub$ptr$sub77 = 0, $sub$ptr$sub99 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i114 = 0, $tobool37 = 0, $vfn$i = 0, $vfn$i110 = 0, $vfn$i119 = 0, $vfn$i132 = 0, $vfn$i83 = 0, $vfn$i86 = 0, $vfn$i89 = 0, $vfn$i92 = 0, $vfn$i95 = 0, $vfn$i98 = 0, $vtable$i = 0;
 var $vtable$i109 = 0, $vtable$i118 = 0, $vtable$i131 = 0, $vtable$i82 = 0, $vtable$i85 = 0, $vtable$i88 = 0, $vtable$i91 = 0, $vtable$i94 = 0, $vtable$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $call$i81 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21068)|0);
 $vtable$i = HEAP32[$call$i81>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i81);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 switch ($1<<24>>24) {
 case 43: case 45:  {
  $incdec$ptr = ((($__nb)) + 1|0);
  $vtable$i82 = HEAP32[$call$i>>2]|0;
  $vfn$i83 = ((($vtable$i82)) + 44|0);
  $2 = HEAP32[$vfn$i83>>2]|0;
  $call$i84 = (FUNCTION_TABLE_iii[$2 & 511]($call$i,$1)|0);
  $3 = HEAP32[$__oe>>2]|0;
  $incdec$ptr5 = ((($3)) + 4|0);
  HEAP32[$__oe>>2] = $incdec$ptr5;
  HEAP32[$3>>2] = $call$i84;
  $__nf$0 = $incdec$ptr;
  break;
 }
 default: {
  $__nf$0 = $__nb;
 }
 }
 $sub$ptr$lhs$cast = $__ne;
 $sub$ptr$rhs$cast = $__nf$0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp6 = ($sub$ptr$sub|0)>(1);
 L4: do {
  if ($cmp6) {
   $4 = HEAP8[$__nf$0>>0]|0;
   $cmp8 = ($4<<24>>24)==(48);
   if ($cmp8) {
    $arrayidx10 = ((($__nf$0)) + 1|0);
    $5 = HEAP8[$arrayidx10>>0]|0;
    switch ($5<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $vtable$i85 = HEAP32[$call$i>>2]|0;
    $vfn$i86 = ((($vtable$i85)) + 44|0);
    $6 = HEAP32[$vfn$i86>>2]|0;
    $call$i87 = (FUNCTION_TABLE_iii[$6 & 511]($call$i,48)|0);
    $7 = HEAP32[$__oe>>2]|0;
    $incdec$ptr20 = ((($7)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr20;
    HEAP32[$7>>2] = $call$i87;
    $incdec$ptr21 = ((($__nf$0)) + 2|0);
    $8 = HEAP8[$arrayidx10>>0]|0;
    $vtable$i88 = HEAP32[$call$i>>2]|0;
    $vfn$i89 = ((($vtable$i88)) + 44|0);
    $9 = HEAP32[$vfn$i89>>2]|0;
    $call$i90 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,$8)|0);
    $10 = HEAP32[$__oe>>2]|0;
    $incdec$ptr23 = ((($10)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr23;
    HEAP32[$10>>2] = $call$i90;
    $__ns$0 = $incdec$ptr21;
    while(1) {
     $cmp24 = ($__ns$0>>>0)<($__ne>>>0);
     if (!($cmp24)) {
      $__nf$1 = $incdec$ptr21;$__ns$2 = $__ns$0;
      break L4;
     }
     $11 = HEAP8[$__ns$0>>0]|0;
     $conv25 = $11 << 24 >> 24;
     $call26 = (__ZNSt3__26__clocEv()|0);
     $call27 = (_isxdigit_l($conv25,$call26)|0);
     $tobool = ($call27|0)==(0);
     if ($tobool) {
      $__nf$1 = $incdec$ptr21;$__ns$2 = $__ns$0;
      break L4;
     }
     $incdec$ptr30 = ((($__ns$0)) + 1|0);
     $__ns$0 = $incdec$ptr30;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L12: do {
  if ((label|0) == 4) {
   $__ns$1 = $__nf$0;
   while(1) {
    $cmp32 = ($__ns$1>>>0)<($__ne>>>0);
    if (!($cmp32)) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $12 = HEAP8[$__ns$1>>0]|0;
    $conv34 = $12 << 24 >> 24;
    $call35 = (__ZNSt3__26__clocEv()|0);
    $call36 = (_isdigit_l($conv34,$call35)|0);
    $tobool37 = ($call36|0)==(0);
    if ($tobool37) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $incdec$ptr41 = ((($__ns$1)) + 1|0);
    $__ns$1 = $incdec$ptr41;
   }
  }
 } while(0);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $13 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($13<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $14 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $13&255;
 $cond$i$i = $tobool$i$i$i ? $14 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 L19: do {
  if ($cmp$i) {
   $15 = HEAP32[$__oe>>2]|0;
   $vtable$i91 = HEAP32[$call$i>>2]|0;
   $vfn$i92 = ((($vtable$i91)) + 48|0);
   $16 = HEAP32[$vfn$i92>>2]|0;
   (FUNCTION_TABLE_iiiii[$16 & 511]($call$i,$__nf$1,$__ns$2,$15)|0);
   $sub$ptr$lhs$cast47 = $__ns$2;
   $sub$ptr$rhs$cast48 = $__nf$1;
   $sub$ptr$sub49 = (($sub$ptr$lhs$cast47) - ($sub$ptr$rhs$cast48))|0;
   $17 = HEAP32[$__oe>>2]|0;
   $add$ptr = (($17) + ($sub$ptr$sub49<<2)|0);
   HEAP32[$__oe>>2] = $add$ptr;
   $$pre$phiZ2D = $call$i;$41 = $add$ptr;
  } else {
   $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
   L22: do {
    if (!($cmp$i$i)) {
     $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ns$2;
     while(1) {
      $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
      if (!($cmp1$i$i)) {
       break L22;
      }
      $18 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $19 = HEAP8[$incdec$ptr$i$i>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $19;
      HEAP8[$incdec$ptr$i$i>>0] = $18;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
   } while(0);
   $vtable$i97 = HEAP32[$call$i81>>2]|0;
   $vfn$i98 = ((($vtable$i97)) + 16|0);
   $20 = HEAP32[$vfn$i98>>2]|0;
   $call$i99 = (FUNCTION_TABLE_ii[$20 & 511]($call$i81)|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $cmp53 = ($__p$0>>>0)<($__ns$2>>>0);
    if (!($cmp53)) {
     break;
    }
    $24 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i$i114 = ($24<<24>>24)<(0);
    $25 = HEAP32[$__grouping>>2]|0;
    $cond$i$i117 = $tobool$i$i$i114 ? $25 : $__grouping;
    $add$ptr$i = (($cond$i$i117) + ($__dg$0)|0);
    $26 = HEAP8[$add$ptr$i>>0]|0;
    $cmp57 = ($26<<24>>24)>(0);
    $conv60 = $26 << 24 >> 24;
    $cmp61 = ($__dc$0|0)==($conv60|0);
    $or$cond = $cmp57 & $cmp61;
    if ($or$cond) {
     $27 = HEAP32[$__oe>>2]|0;
     $incdec$ptr63 = ((($27)) + 4|0);
     HEAP32[$__oe>>2] = $incdec$ptr63;
     HEAP32[$27>>2] = $call$i99;
     $28 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i = ($28<<24>>24)<(0);
     $29 = HEAP32[$__size_$i3$i$i>>2]|0;
     $conv$i$i = $28&255;
     $cond$i = $tobool$i$i ? $29 : $conv$i$i;
     $sub = (($cond$i) + -1)|0;
     $cmp65 = ($__dg$0>>>0)<($sub>>>0);
     $inc = $cmp65&1;
     $spec$select = (($__dg$0) + ($inc))|0;
     $__dc$1 = 0;$__dg$1 = $spec$select;
    } else {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    }
    $30 = HEAP8[$__p$0>>0]|0;
    $vtable$i131 = HEAP32[$call$i>>2]|0;
    $vfn$i132 = ((($vtable$i131)) + 44|0);
    $31 = HEAP32[$vfn$i132>>2]|0;
    $call$i133 = (FUNCTION_TABLE_iii[$31 & 511]($call$i,$30)|0);
    $32 = HEAP32[$__oe>>2]|0;
    $incdec$ptr70 = ((($32)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr70;
    HEAP32[$32>>2] = $call$i133;
    $inc71 = (($__dc$1) + 1)|0;
    $incdec$ptr73 = ((($__p$0)) + 1|0);
    $__dc$0 = $inc71;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr73;
   }
   $sub$ptr$lhs$cast75 = $__nf$1;
   $sub$ptr$rhs$cast76 = $__nb;
   $sub$ptr$sub77 = (($sub$ptr$lhs$cast75) - ($sub$ptr$rhs$cast76))|0;
   $add$ptr78 = (($__ob) + ($sub$ptr$sub77<<2)|0);
   $21 = HEAP32[$__oe>>2]|0;
   $cmp$i$i100 = ($add$ptr78|0)==($21|0);
   if ($cmp$i$i100) {
    $$pre$phiZ2D = $call$i;$41 = $add$ptr78;
   } else {
    $__first$addr$0$i$i102 = $add$ptr78;$__last$addr$0$i$i103 = $21;
    while(1) {
     $incdec$ptr$i$i104 = ((($__last$addr$0$i$i103)) + -4|0);
     $cmp1$i$i105 = ($__first$addr$0$i$i102>>>0)<($incdec$ptr$i$i104>>>0);
     if (!($cmp1$i$i105)) {
      $$pre$phiZ2D = $call$i;$41 = $21;
      break L19;
     }
     $22 = HEAP32[$__first$addr$0$i$i102>>2]|0;
     $23 = HEAP32[$incdec$ptr$i$i104>>2]|0;
     HEAP32[$__first$addr$0$i$i102>>2] = $23;
     HEAP32[$incdec$ptr$i$i104>>2] = $22;
     $incdec$ptr2$i$i107 = ((($__first$addr$0$i$i102)) + 4|0);
     $__first$addr$0$i$i102 = $incdec$ptr2$i$i107;$__last$addr$0$i$i103 = $incdec$ptr$i$i104;
    }
   }
  }
 } while(0);
 $42 = $41;$__nf$2 = $__ns$2;
 while(1) {
  $cmp81 = ($__nf$2>>>0)<($__ne>>>0);
  if (!($cmp81)) {
   $39 = $42;$__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2>>0]|0;
  $cmp84 = ($33<<24>>24)==(46);
  if ($cmp84) {
   label = 32;
   break;
  }
  $vtable$i109 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i110 = ((($vtable$i109)) + 44|0);
  $36 = HEAP32[$vfn$i110>>2]|0;
  $call$i111 = (FUNCTION_TABLE_iii[$36 & 511]($call$i,$33)|0);
  $37 = HEAP32[$__oe>>2]|0;
  $incdec$ptr91 = ((($37)) + 4|0);
  HEAP32[$__oe>>2] = $incdec$ptr91;
  HEAP32[$37>>2] = $call$i111;
  $incdec$ptr94 = ((($__nf$2)) + 1|0);
  $42 = $incdec$ptr91;$__nf$2 = $incdec$ptr94;
 }
 if ((label|0) == 32) {
  $vtable$i118 = HEAP32[$call$i81>>2]|0;
  $vfn$i119 = ((($vtable$i118)) + 12|0);
  $34 = HEAP32[$vfn$i119>>2]|0;
  $call$i120 = (FUNCTION_TABLE_ii[$34 & 511]($call$i81)|0);
  $35 = HEAP32[$__oe>>2]|0;
  $incdec$ptr87 = ((($35)) + 4|0);
  HEAP32[$__oe>>2] = $incdec$ptr87;
  HEAP32[$35>>2] = $call$i120;
  $incdec$ptr88 = ((($__nf$2)) + 1|0);
  $39 = $incdec$ptr87;$__nf$3 = $incdec$ptr88;
 }
 $vtable$i94 = HEAP32[$call$i>>2]|0;
 $vfn$i95 = ((($vtable$i94)) + 48|0);
 $38 = HEAP32[$vfn$i95>>2]|0;
 (FUNCTION_TABLE_iiiii[$38 & 511]($call$i,$__nf$3,$__ne,$39)|0);
 $sub$ptr$rhs$cast98 = $__nf$3;
 $sub$ptr$sub99 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast98))|0;
 $40 = HEAP32[$__oe>>2]|0;
 $add$ptr100 = (($40) + ($sub$ptr$sub99<<2)|0);
 HEAP32[$__oe>>2] = $add$ptr100;
 $cmp101 = ($__np|0)==($__ne|0);
 $sub$ptr$lhs$cast104 = $__np;
 $sub$ptr$rhs$cast105 = $__nb;
 $sub$ptr$sub106 = (($sub$ptr$lhs$cast104) - ($sub$ptr$rhs$cast105))|0;
 $add$ptr107 = (($__ob) + ($sub$ptr$sub106<<2)|0);
 $storemerge = $cmp101 ? $add$ptr100 : $add$ptr107;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i75 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i76 = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i96 = 0, $add$ptr54 = 0, $add$ptr62 = 0, $arrayidx16 = 0, $call$i = 0, $call$i54 = 0, $call$i60 = 0, $call$i63 = 0, $call$i66 = 0, $call$i69 = 0, $call$i72 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i73 = 0;
 var $cmp1$i$i = 0, $cmp1$i$i78 = 0, $cmp12 = 0, $cmp14 = 0, $cmp32 = 0, $cmp35 = 0, $cmp39 = 0, $cmp43 = 0, $cmp56 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i95 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv38 = 0, $inc = 0, $inc49 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i77 = 0;
 var $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i80 = 0, $incdec$ptr26 = 0, $incdec$ptr27 = 0, $incdec$ptr29 = 0, $incdec$ptr41 = 0, $incdec$ptr48 = 0, $incdec$ptr50 = 0, $incdec$ptr8 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast51 = 0, $sub$ptr$lhs$cast59 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0, $sub$ptr$rhs$cast52 = 0;
 var $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub53 = 0, $sub$ptr$sub61 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, $vfn$i = 0, $vfn$i56 = 0, $vfn$i59 = 0, $vfn$i62 = 0, $vfn$i65 = 0, $vfn$i68 = 0, $vfn$i71 = 0, $vtable$i = 0, $vtable$i55 = 0, $vtable$i58 = 0, $vtable$i61 = 0, $vtable$i64 = 0;
 var $vtable$i67 = 0, $vtable$i70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $call$i54 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21068)|0);
 $vtable$i = HEAP32[$call$i54>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 511]($__grouping,$call$i54);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $2 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $1&255;
 $cond$i$i = $tobool$i$i$i ? $2 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 if ($cmp$i) {
  $vtable$i55 = HEAP32[$call$i>>2]|0;
  $vfn$i56 = ((($vtable$i55)) + 48|0);
  $3 = HEAP32[$vfn$i56>>2]|0;
  (FUNCTION_TABLE_iiiii[$3 & 511]($call$i,$__nb,$__ne,$__ob)|0);
  $sub$ptr$lhs$cast = $__ne;
  $sub$ptr$rhs$cast = $__nb;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $add$ptr = (($__ob) + ($sub$ptr$sub<<2)|0);
  HEAP32[$__oe>>2] = $add$ptr;
  $29 = $add$ptr;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $4 = HEAP8[$__nb>>0]|0;
  switch ($4<<24>>24) {
  case 43: case 45:  {
   $incdec$ptr = ((($__nb)) + 1|0);
   $vtable$i58 = HEAP32[$call$i>>2]|0;
   $vfn$i59 = ((($vtable$i58)) + 44|0);
   $5 = HEAP32[$vfn$i59>>2]|0;
   $call$i60 = (FUNCTION_TABLE_iii[$5 & 511]($call$i,$4)|0);
   $6 = HEAP32[$__oe>>2]|0;
   $incdec$ptr8 = ((($6)) + 4|0);
   HEAP32[$__oe>>2] = $incdec$ptr8;
   HEAP32[$6>>2] = $call$i60;
   $__nf$0 = $incdec$ptr;
   break;
  }
  default: {
   $__nf$0 = $__nb;
  }
  }
  $sub$ptr$lhs$cast9 = $__ne;
  $sub$ptr$rhs$cast10 = $__nf$0;
  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
  $cmp12 = ($sub$ptr$sub11|0)>(1);
  L7: do {
   if ($cmp12) {
    $7 = HEAP8[$__nf$0>>0]|0;
    $cmp14 = ($7<<24>>24)==(48);
    if ($cmp14) {
     $arrayidx16 = ((($__nf$0)) + 1|0);
     $8 = HEAP8[$arrayidx16>>0]|0;
     switch ($8<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $__nf$1 = $__nf$0;
      break L7;
     }
     }
     $vtable$i61 = HEAP32[$call$i>>2]|0;
     $vfn$i62 = ((($vtable$i61)) + 44|0);
     $9 = HEAP32[$vfn$i62>>2]|0;
     $call$i63 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,48)|0);
     $10 = HEAP32[$__oe>>2]|0;
     $incdec$ptr26 = ((($10)) + 4|0);
     HEAP32[$__oe>>2] = $incdec$ptr26;
     HEAP32[$10>>2] = $call$i63;
     $incdec$ptr27 = ((($__nf$0)) + 2|0);
     $11 = HEAP8[$arrayidx16>>0]|0;
     $vtable$i64 = HEAP32[$call$i>>2]|0;
     $vfn$i65 = ((($vtable$i64)) + 44|0);
     $12 = HEAP32[$vfn$i65>>2]|0;
     $call$i66 = (FUNCTION_TABLE_iii[$12 & 511]($call$i,$11)|0);
     $13 = HEAP32[$__oe>>2]|0;
     $incdec$ptr29 = ((($13)) + 4|0);
     HEAP32[$__oe>>2] = $incdec$ptr29;
     HEAP32[$13>>2] = $call$i66;
     $__nf$1 = $incdec$ptr27;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } while(0);
  $cmp$i$i = ($__nf$1|0)==($__ne|0);
  L12: do {
   if (!($cmp$i$i)) {
    $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ne;
    while(1) {
     $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
     $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
     if (!($cmp1$i$i)) {
      break L12;
     }
     $14 = HEAP8[$__first$addr$0$i$i>>0]|0;
     $15 = HEAP8[$incdec$ptr$i$i>>0]|0;
     HEAP8[$__first$addr$0$i$i>>0] = $15;
     HEAP8[$incdec$ptr$i$i>>0] = $14;
     $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
     $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
    }
   }
  } while(0);
  $vtable$i70 = HEAP32[$call$i54>>2]|0;
  $vfn$i71 = ((($vtable$i70)) + 16|0);
  $16 = HEAP32[$vfn$i71>>2]|0;
  $call$i72 = (FUNCTION_TABLE_ii[$16 & 511]($call$i54)|0);
  $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
  while(1) {
   $cmp32 = ($__p$0>>>0)<($__ne>>>0);
   if (!($cmp32)) {
    break;
   }
   $20 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i90 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__grouping>>2]|0;
   $cond$i$i95 = $tobool$i$i$i90 ? $21 : $__grouping;
   $add$ptr$i96 = (($cond$i$i95) + ($__dg$0)|0);
   $22 = HEAP8[$add$ptr$i96>>0]|0;
   $cmp35 = ($22<<24>>24)!=(0);
   $conv38 = $22 << 24 >> 24;
   $cmp39 = ($__dc$0|0)==($conv38|0);
   $or$cond = $cmp35 & $cmp39;
   if ($or$cond) {
    $23 = HEAP32[$__oe>>2]|0;
    $incdec$ptr41 = ((($23)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr41;
    HEAP32[$23>>2] = $call$i72;
    $24 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i = ($24<<24>>24)<(0);
    $25 = HEAP32[$__size_$i3$i$i>>2]|0;
    $conv$i$i = $24&255;
    $cond$i = $tobool$i$i ? $25 : $conv$i$i;
    $sub = (($cond$i) + -1)|0;
    $cmp43 = ($__dg$0>>>0)<($sub>>>0);
    $inc = $cmp43&1;
    $spec$select = (($__dg$0) + ($inc))|0;
    $__dc$1 = 0;$__dg$1 = $spec$select;
   } else {
    $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
   }
   $26 = HEAP8[$__p$0>>0]|0;
   $vtable$i67 = HEAP32[$call$i>>2]|0;
   $vfn$i68 = ((($vtable$i67)) + 44|0);
   $27 = HEAP32[$vfn$i68>>2]|0;
   $call$i69 = (FUNCTION_TABLE_iii[$27 & 511]($call$i,$26)|0);
   $28 = HEAP32[$__oe>>2]|0;
   $incdec$ptr48 = ((($28)) + 4|0);
   HEAP32[$__oe>>2] = $incdec$ptr48;
   HEAP32[$28>>2] = $call$i69;
   $inc49 = (($__dc$1) + 1)|0;
   $incdec$ptr50 = ((($__p$0)) + 1|0);
   $__dc$0 = $inc49;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr50;
  }
  $sub$ptr$lhs$cast51 = $__nf$1;
  $sub$ptr$rhs$cast52 = $__nb;
  $sub$ptr$sub53 = (($sub$ptr$lhs$cast51) - ($sub$ptr$rhs$cast52))|0;
  $add$ptr54 = (($__ob) + ($sub$ptr$sub53<<2)|0);
  $17 = HEAP32[$__oe>>2]|0;
  $cmp$i$i73 = ($add$ptr54|0)==($17|0);
  if ($cmp$i$i73) {
   $29 = $add$ptr54;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i75 = $add$ptr54;$__last$addr$0$i$i76 = $17;
   while(1) {
    $incdec$ptr$i$i77 = ((($__last$addr$0$i$i76)) + -4|0);
    $cmp1$i$i78 = ($__first$addr$0$i$i75>>>0)<($incdec$ptr$i$i77>>>0);
    if (!($cmp1$i$i78)) {
     break;
    }
    $18 = HEAP32[$__first$addr$0$i$i75>>2]|0;
    $19 = HEAP32[$incdec$ptr$i$i77>>2]|0;
    HEAP32[$__first$addr$0$i$i75>>2] = $19;
    HEAP32[$incdec$ptr$i$i77>>2] = $18;
    $incdec$ptr2$i$i80 = ((($__first$addr$0$i$i75)) + 4|0);
    $__first$addr$0$i$i75 = $incdec$ptr2$i$i80;$__last$addr$0$i$i76 = $incdec$ptr$i$i77;
   }
   $$pre = HEAP32[$__oe>>2]|0;
   $29 = $$pre;$sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 $cmp56 = ($__np|0)==($__ne|0);
 $sub$ptr$lhs$cast59 = $__np;
 $sub$ptr$sub61 = (($sub$ptr$lhs$cast59) - ($sub$ptr$rhs$cast60$pre$phiZZZZ2D))|0;
 $add$ptr62 = (($__ob) + ($sub$ptr$sub61<<2)|0);
 $storemerge = $cmp56 ? $29 : $add$ptr62;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,13499,(13507))|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i = 0, $cond$i$i1117 = 0, $conv$i$i = 0, $tobool$i$i$i = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $__size_$i$i$i = ((($call)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($3<<24>>24)<(0);
 $4 = HEAP32[$call>>2]|0;
 $__size_$i3$i = ((($call)) + 4|0);
 $5 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $3&255;
 $cond$i$i1117 = $tobool$i$i$i ? $4 : $call;
 $cond$i = $tobool$i$i$i ? $5 : $conv$i$i;
 $add$ptr6 = (($cond$i$i1117) + ($cond$i)|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call7 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i1117,$add$ptr6)|0);
 STACKTOP = sp;return ($call7|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_wday = ((($__tm)) + 24|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_mon = ((($__tm)) + 16|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_year = ((($__tm)) + 20|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__size_$i$i$i = 0, $__size_$i$i$i91 = 0, $__size_$i3$i = 0, $__size_$i3$i111 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp19 = 0, $agg$tmp19$byval_copy = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $agg$tmp25 = 0;
 var $agg$tmp25$byval_copy = 0, $agg$tmp29 = 0, $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp41 = 0, $agg$tmp41$byval_copy = 0, $agg$tmp44 = 0, $agg$tmp44$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp48 = 0;
 var $agg$tmp48$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0, $agg$tmp58 = 0, $agg$tmp58$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $agg$tmp8 = 0;
 var $agg$tmp8$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp83$byval_copy = 0, $agg$tmp91 = 0, $agg$tmp91$byval_copy = 0, $agg$tmp94 = 0, $agg$tmp94$byval_copy = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call13 = 0, $call20 = 0, $call26 = 0, $call49 = 0, $call5 = 0, $call55 = 0, $call63 = 0, $call73 = 0;
 var $call80 = 0, $call88 = 0, $cond$i = 0, $cond$i$i106127 = 0, $cond$i$i88121 = 0, $cond$i115 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i113 = 0, $or = 0, $ref$tmp = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tm_hour = 0, $tm_hour31 = 0, $tm_hour43 = 0, $tm_mday = 0, $tm_min = 0, $tm_mon = 0, $tm_mon36 = 0;
 var $tm_wday = 0, $tm_wday66 = 0, $tm_yday = 0, $tm_year = 0, $tm_year93 = 0, $tobool$i$i$i = 0, $tobool$i$i$i92 = 0, $vfn = 0, $vfn70 = 0, $vfn79 = 0, $vtable = 0, $vtable69 = 0, $vtable78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp96$byval_copy = sp + 248|0;
 $agg$tmp94$byval_copy = sp + 244|0;
 $agg$tmp91$byval_copy = sp + 240|0;
 $agg$tmp83$byval_copy = sp + 236|0;
 $agg$tmp82$byval_copy = sp + 232|0;
 $agg$tmp72$byval_copy = sp + 228|0;
 $agg$tmp71$byval_copy = sp + 224|0;
 $agg$tmp67$byval_copy = sp + 220|0;
 $agg$tmp62$byval_copy = sp + 216|0;
 $agg$tmp61$byval_copy = sp + 212|0;
 $agg$tmp58$byval_copy = sp + 208|0;
 $agg$tmp54$byval_copy = sp + 204|0;
 $agg$tmp53$byval_copy = sp + 200|0;
 $agg$tmp48$byval_copy = sp + 196|0;
 $agg$tmp47$byval_copy = sp + 192|0;
 $agg$tmp44$byval_copy = sp + 188|0;
 $agg$tmp41$byval_copy = sp + 184|0;
 $agg$tmp39$byval_copy = sp + 180|0;
 $agg$tmp37$byval_copy = sp + 176|0;
 $agg$tmp34$byval_copy = sp + 172|0;
 $agg$tmp32$byval_copy = sp + 168|0;
 $agg$tmp29$byval_copy = sp + 164|0;
 $agg$tmp25$byval_copy = sp + 160|0;
 $agg$tmp24$byval_copy = sp + 156|0;
 $agg$tmp19$byval_copy = sp + 152|0;
 $agg$tmp18$byval_copy = sp + 148|0;
 $agg$tmp15$byval_copy = sp + 144|0;
 $agg$tmp8$byval_copy = sp + 140|0;
 $agg$tmp7$byval_copy = sp + 136|0;
 $agg$tmp3$byval_copy = sp + 132|0;
 $agg$tmp$byval_copy = sp + 128|0;
 $ref$tmp = sp + 124|0;
 $agg$tmp = sp + 120|0;
 $agg$tmp3 = sp + 116|0;
 $agg$tmp7 = sp + 112|0;
 $agg$tmp8 = sp + 108|0;
 $agg$tmp15 = sp + 104|0;
 $agg$tmp18 = sp + 100|0;
 $agg$tmp19 = sp + 96|0;
 $agg$tmp24 = sp + 92|0;
 $agg$tmp25 = sp + 88|0;
 $agg$tmp29 = sp + 84|0;
 $agg$tmp32 = sp + 80|0;
 $agg$tmp34 = sp + 76|0;
 $agg$tmp37 = sp + 72|0;
 $agg$tmp39 = sp + 68|0;
 $agg$tmp41 = sp + 64|0;
 $agg$tmp44 = sp + 60|0;
 $agg$tmp47 = sp + 56|0;
 $agg$tmp48 = sp + 52|0;
 $agg$tmp53 = sp + 48|0;
 $agg$tmp54 = sp + 44|0;
 $agg$tmp58 = sp + 40|0;
 $agg$tmp61 = sp + 36|0;
 $agg$tmp62 = sp + 32|0;
 $agg$tmp67 = sp + 28|0;
 $agg$tmp71 = sp + 24|0;
 $agg$tmp72 = sp + 20|0;
 $agg$tmp82 = sp + 16|0;
 $agg$tmp83 = sp + 12|0;
 $agg$tmp91 = sp + 8|0;
 $agg$tmp94 = sp + 4|0;
 $agg$tmp96 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $conv = $__fmt << 24 >> 24;
 do {
  switch ($conv|0) {
  case 65: case 97:  {
   $tm_wday = ((($__tm)) + 24|0);
   $1 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $1;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $tm_mon = ((($__tm)) + 16|0);
   $2 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $2;
   ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 99:  {
   $add$ptr = ((($this)) + 8|0);
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = ((($vtable)) + 12|0);
   $3 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$3 & 511]($add$ptr)|0);
   $4 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $4;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $5;
   $__size_$i$i$i = ((($call5)) + 11|0);
   $6 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($6<<24>>24)<(0);
   $7 = HEAP32[$call5>>2]|0;
   $__size_$i3$i = ((($call5)) + 4|0);
   $8 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $6&255;
   $cond$i$i88121 = $tobool$i$i$i ? $7 : $call5;
   $cond$i = $tobool$i$i$i ? $8 : $conv$i$i;
   $add$ptr12 = (($cond$i$i88121) + ($cond$i)|0);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;
   $call13 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i88121,$add$ptr12)|0);
   HEAP32[$__b>>2] = $call13;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $tm_mday = ((($__tm)) + 12|0);
   $9 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp15>>2] = $9;
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mday,$__b,$agg$tmp15$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 68:  {
   $10 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp18>>2] = $10;
   $11 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp19>>2] = $11;
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;
   ;HEAP32[$agg$tmp19$byval_copy>>2]=HEAP32[$agg$tmp19>>2]|0;
   $call20 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp18$byval_copy,$agg$tmp19$byval_copy,$__iob,$__err,$__tm,13459,(13467))|0);
   HEAP32[$__b>>2] = $call20;
   label = 26;
   break;
  }
  case 70:  {
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp24>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp25>>2] = $13;
   ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;
   ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;
   $call26 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp24$byval_copy,$agg$tmp25$byval_copy,$__iob,$__err,$__tm,13467,(13475))|0);
   HEAP32[$__b>>2] = $call26;
   label = 26;
   break;
  }
  case 72:  {
   $tm_hour = ((($__tm)) + 8|0);
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $14;
   ;HEAP32[$agg$tmp29$byval_copy>>2]=HEAP32[$agg$tmp29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour,$__b,$agg$tmp29$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 73:  {
   $tm_hour31 = ((($__tm)) + 8|0);
   $15 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $15;
   ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour31,$__b,$agg$tmp32$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 106:  {
   $tm_yday = ((($__tm)) + 28|0);
   $16 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $16;
   ;HEAP32[$agg$tmp34$byval_copy>>2]=HEAP32[$agg$tmp34>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_yday,$__b,$agg$tmp34$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 109:  {
   $tm_mon36 = ((($__tm)) + 16|0);
   $17 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp37>>2] = $17;
   ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon36,$__b,$agg$tmp37$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 77:  {
   $tm_min = ((($__tm)) + 4|0);
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $18;
   ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_min,$__b,$agg$tmp39$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $19 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp41>>2] = $19;
   ;HEAP32[$agg$tmp41$byval_copy>>2]=HEAP32[$agg$tmp41>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$agg$tmp41$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 112:  {
   $tm_hour43 = ((($__tm)) + 8|0);
   $20 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp44>>2] = $20;
   ;HEAP32[$agg$tmp44$byval_copy>>2]=HEAP32[$agg$tmp44>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour43,$__b,$agg$tmp44$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 114:  {
   $21 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp47>>2] = $21;
   $22 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp48>>2] = $22;
   ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;
   ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;
   $call49 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp47$byval_copy,$agg$tmp48$byval_copy,$__iob,$__err,$__tm,13475,(13486))|0);
   HEAP32[$__b>>2] = $call49;
   label = 26;
   break;
  }
  case 82:  {
   $23 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp53>>2] = $23;
   $24 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp54>>2] = $24;
   ;HEAP32[$agg$tmp53$byval_copy>>2]=HEAP32[$agg$tmp53>>2]|0;
   ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;
   $call55 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp53$byval_copy,$agg$tmp54$byval_copy,$__iob,$__err,$__tm,13486,(13491))|0);
   HEAP32[$__b>>2] = $call55;
   label = 26;
   break;
  }
  case 83:  {
   $25 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp58>>2] = $25;
   ;HEAP32[$agg$tmp58$byval_copy>>2]=HEAP32[$agg$tmp58>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$agg$tmp58$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 84:  {
   $26 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp61>>2] = $26;
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp62>>2] = $27;
   ;HEAP32[$agg$tmp61$byval_copy>>2]=HEAP32[$agg$tmp61>>2]|0;
   ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;
   $call63 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp61$byval_copy,$agg$tmp62$byval_copy,$__iob,$__err,$__tm,13491,(13499))|0);
   HEAP32[$__b>>2] = $call63;
   label = 26;
   break;
  }
  case 119:  {
   $tm_wday66 = ((($__tm)) + 24|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp67>>2] = $28;
   ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday66,$__b,$agg$tmp67$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 120:  {
   $vtable69 = HEAP32[$this>>2]|0;
   $vfn70 = ((($vtable69)) + 20|0);
   $29 = HEAP32[$vfn70>>2]|0;
   $30 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp71>>2] = $30;
   $31 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp72>>2] = $31;
   ;HEAP32[$agg$tmp71$byval_copy>>2]=HEAP32[$agg$tmp71>>2]|0;
   ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;
   $call73 = (FUNCTION_TABLE_iiiiiii[$29 & 255]($this,$agg$tmp71$byval_copy,$agg$tmp72$byval_copy,$__iob,$__err,$__tm)|0);
   $retval$sroa$0$0 = $call73;
   break;
  }
  case 88:  {
   $add$ptr77 = ((($this)) + 8|0);
   $vtable78 = HEAP32[$add$ptr77>>2]|0;
   $vfn79 = ((($vtable78)) + 24|0);
   $32 = HEAP32[$vfn79>>2]|0;
   $call80 = (FUNCTION_TABLE_ii[$32 & 511]($add$ptr77)|0);
   $33 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp82>>2] = $33;
   $34 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp83>>2] = $34;
   $__size_$i$i$i91 = ((($call80)) + 11|0);
   $35 = HEAP8[$__size_$i$i$i91>>0]|0;
   $tobool$i$i$i92 = ($35<<24>>24)<(0);
   $36 = HEAP32[$call80>>2]|0;
   $__size_$i3$i111 = ((($call80)) + 4|0);
   $37 = HEAP32[$__size_$i3$i111>>2]|0;
   $conv$i$i113 = $35&255;
   $cond$i$i106127 = $tobool$i$i$i92 ? $36 : $call80;
   $cond$i115 = $tobool$i$i$i92 ? $37 : $conv$i$i113;
   $add$ptr87 = (($cond$i$i106127) + ($cond$i115)|0);
   ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;
   ;HEAP32[$agg$tmp83$byval_copy>>2]=HEAP32[$agg$tmp83>>2]|0;
   $call88 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp82$byval_copy,$agg$tmp83$byval_copy,$__iob,$__err,$__tm,$cond$i$i106127,$add$ptr87)|0);
   HEAP32[$__b>>2] = $call88;
   label = 26;
   break;
  }
  case 121:  {
   $tm_year = ((($__tm)) + 20|0);
   $38 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp91>>2] = $38;
   ;HEAP32[$agg$tmp91$byval_copy>>2]=HEAP32[$agg$tmp91>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year,$__b,$agg$tmp91$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 89:  {
   $tm_year93 = ((($__tm)) + 20|0);
   $39 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp94>>2] = $39;
   ;HEAP32[$agg$tmp94$byval_copy>>2]=HEAP32[$agg$tmp94>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year93,$__b,$agg$tmp94$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 37:  {
   $40 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp96>>2] = $40;
   ;HEAP32[$agg$tmp96$byval_copy>>2]=HEAP32[$agg$tmp96>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$agg$tmp96$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  default: {
   $41 = HEAP32[$__err>>2]|0;
   $or = $41 | 4;
   HEAP32[$__err>>2] = $or;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18776]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18776)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L10init_weeksEv();
   HEAP32[5289] = 17776;
  }
 }
 $2 = HEAP32[5289]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18760]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18760)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L11init_monthsEv();
   HEAP32[5288] = 17488;
  }
 }
 $2 = HEAP32[5288]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18744]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18744)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L10init_am_pmEv();
   HEAP32[5287] = 17200;
  }
 }
 $2 = HEAP32[5287]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18736]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18736)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21136>>2]=0|0;HEAP32[21136+4>>2]=0|0;HEAP32[21136+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(13217)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(21136,13217,$call$i);
  }
 }
 return (21136|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18728]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18728)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21124>>2]=0|0;HEAP32[21124+4>>2]=0|0;HEAP32[21124+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(13205)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(21124,13205,$call$i);
  }
 }
 return (21124|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18720]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18720)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21112>>2]=0|0;HEAP32[21112+4>>2]=0|0;HEAP32[21112+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(13196)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(21112,13196,$call$i);
  }
 }
 return (21112|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18712]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18712)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21100>>2]=0|0;HEAP32[21100+4>>2]=0|0;HEAP32[21100+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(13187)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(21100,13187,$call$i);
  }
 }
 return (21100|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18752]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18752)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 17200;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((17488)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17200,13238)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17212),13241)|0);
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18768]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18768)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 17488;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((17776)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17488,13244)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17500),13252)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17512),13261)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17524),13267)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17536),13273)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17548),13277)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17560),13282)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17572),13287)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17584),13294)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17596),13304)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17608),13312)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17620),13321)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17632),13330)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17644),13334)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17656),13338)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17668),13342)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17680),13273)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17692),13346)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17704),13350)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17716),13354)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17728),13358)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17740),13362)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17752),13366)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17764),13370)|0);
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18784]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18784)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 17776;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((17944)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17776,13374)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17788),13381)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17800),13388)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17812),13396)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17824),13406)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17836),13415)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17848),13422)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17860),13431)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17872),13435)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17884),13439)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17896),13443)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17908),13447)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17920),13451)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((17932),13455)|0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 7)&-1;
  HEAP32[$__w>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 12)&-1;
  HEAP32[$__m>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0;
 var $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i149 = 0, $__einp_$i$i$i$i56 = 0, $__einp_$i$i117 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i170 = 0, $__einp_$i$i4$i$i77 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i148 = 0, $__ninp_$i$i$i$i55 = 0, $__ninp_$i$i116 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i169 = 0;
 var $__ninp_$i$i3$i$i76 = 0, $__opt$0 = 0, $__tab_$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $and3$i = 0, $and3$i100 = 0, $and3$i48 = 0, $arrayidx$i = 0, $arrayidx$i47 = 0, $arrayidx$i99 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i154 = 0, $call$i$i$i$i61 = 0, $call$i$i121 = 0, $call$i$i9$i$i = 0;
 var $call$i$i9$i$i175 = 0, $call$i$i9$i$i82 = 0, $call$i130 = 0, $call$i133 = 0, $call$i37 = 0, $call$i40 = 0, $call$i43 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i156 = 0, $call3$i$i$i$i63 = 0, $call3$i$i$i159 = 0, $call3$i$i$i66 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i177 = 0, $call3$i$i11$i$i84 = 0, $call3$i$i123 = 0, $call3$i14$i$i = 0;
 var $call3$i14$i$i180 = 0, $call3$i14$i$i87 = 0, $call4$i$i$i = 0, $call4$i$i$i160 = 0, $call4$i$i$i67 = 0, $call4$i15$i$i = 0, $call4$i15$i$i181 = 0, $call4$i15$i$i88 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i150 = 0, $cmp$i$i$i$i57 = 0, $cmp$i$i108 = 0, $cmp$i$i118 = 0, $cmp$i$i137 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i171 = 0, $cmp$i$i5$i$i78 = 0, $cmp$i$i94 = 0, $cmp17 = 0;
 var $cmp2 = 0, $cmp2$i = 0, $cmp2$i44 = 0, $cmp2$i96 = 0, $cmp30 = 0, $cmp5 = 0, $cmp51 = 0, $cmp6$i = 0, $cmp6$i101 = 0, $cmp6$i49 = 0, $cmp7 = 0, $conv$i = 0, $conv$i126 = 0, $conv$i45 = 0, $conv$i95 = 0, $conv$i97 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i142 = 0, $incdec$ptr16 = 0;
 var $incdec$ptr25 = 0, $incdec$ptr54 = 0, $or = 0, $or$cond = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i158 = 0, $retval$0$i$i$i$i65 = 0, $retval$0$i$i125 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i179 = 0, $retval$0$i$i13$i$i86 = 0, $retval$sroa$0$0$copyload = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i147 = 0, $tobool$i$i$i54 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i167 = 0;
 var $tobool$i2$i$i74 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i153 = 0, $vfn$i$i$i$i60 = 0, $vfn$i$i110 = 0, $vfn$i$i120 = 0, $vfn$i$i139 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i174 = 0, $vfn$i$i8$i$i81 = 0, $vfn$i129 = 0, $vfn$i132 = 0, $vfn$i39 = 0, $vfn$i42 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i152 = 0, $vtable$i$i$i$i59 = 0, $vtable$i$i109 = 0, $vtable$i$i119 = 0, $vtable$i$i138 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i173 = 0, $vtable$i$i7$i$i80 = 0, $vtable$i128 = 0, $vtable$i131 = 0, $vtable$i38 = 0, $vtable$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp23$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21028)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__err>>2] = 0;
 $__tab_$i = ((($call$i)) + 8|0);
 $0 = 0;$__fmtb$addr$0 = $__fmtb;
 L1: while(1) {
  $cmp = ($__fmtb$addr$0|0)!=($__fmte|0);
  $cmp2 = ($0|0)==(0);
  $or$cond = $cmp & $cmp2;
  $1 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   $61 = $1;
   break;
  }
  $tobool$i$i$i = ($1|0)==(0|0);
  $2 = $1;
  if ($tobool$i$i$i) {
   $20 = $2;$49 = 0;$72 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($1)) + 12|0);
   $3 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($1)) + 16|0);
   $4 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($3|0)==($4|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$1>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $5 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$5 & 511]($1)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $6 = HEAP8[$3>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($6)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $20 = 0;$49 = 0;$72 = 1;
   } else {
    $20 = $2;$49 = $1;$72 = 0;
   }
  }
  $7 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($7|0)==(0|0);
  $8 = $7;
  do {
   if ($tobool$i2$i$i) {
    $$ph = $8;
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($7)) + 12|0);
    $9 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($7)) + 16|0);
    $10 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($9|0)==($10|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$7>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $11 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$11 & 511]($7)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $12 = HEAP8[$9>>0]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($12)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     $$ph = 0;
     label = 15;
     break;
    } else {
     if ($72) {
      $21 = $8;$73 = $7;
      break;
     } else {
      label = 63;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($72) {
    label = 63;
    break;
   } else {
    $21 = $$ph;$73 = 0;
   }
  }
  $13 = HEAP8[$__fmtb$addr$0>>0]|0;
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 36|0);
  $14 = HEAP32[$vfn$i>>2]|0;
  $call$i37 = (FUNCTION_TABLE_iiii[$14 & 511]($call$i,$13,0)|0);
  $cmp5 = ($call$i37<<24>>24)==(37);
  L24: do {
   if ($cmp5) {
    $incdec$ptr = ((($__fmtb$addr$0)) + 1|0);
    $cmp7 = ($incdec$ptr|0)==($__fmte|0);
    if ($cmp7) {
     label = 63;
     break L1;
    }
    $15 = HEAP8[$incdec$ptr>>0]|0;
    $vtable$i38 = HEAP32[$call$i>>2]|0;
    $vfn$i39 = ((($vtable$i38)) + 36|0);
    $16 = HEAP32[$vfn$i39>>2]|0;
    $call$i40 = (FUNCTION_TABLE_iiii[$16 & 511]($call$i,$15,0)|0);
    switch ($call$i40<<24>>24) {
    case 48: case 69:  {
     $incdec$ptr16 = ((($__fmtb$addr$0)) + 2|0);
     $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
     if ($cmp17) {
      label = 63;
      break L1;
     }
     $17 = HEAP8[$incdec$ptr16>>0]|0;
     $vtable$i41 = HEAP32[$call$i>>2]|0;
     $vfn$i42 = ((($vtable$i41)) + 36|0);
     $18 = HEAP32[$vfn$i42>>2]|0;
     $call$i43 = (FUNCTION_TABLE_iiii[$18 & 511]($call$i,$17,0)|0);
     $22 = $incdec$ptr;$__cmd$0 = $call$i43;$__opt$0 = $call$i40;
     break;
    }
    default: {
     $22 = $__fmtb$addr$0;$__cmd$0 = $call$i40;$__opt$0 = 0;
    }
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 36|0);
    $19 = HEAP32[$vfn>>2]|0;
    HEAP32[$agg$tmp>>2] = $20;
    HEAP32[$agg$tmp23>>2] = $21;
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
    ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;
    $call24 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $call24;
    $incdec$ptr25 = ((($22)) + 2|0);
    $__fmtb$addr$4 = $incdec$ptr25;
   } else {
    $23 = HEAP8[$__fmtb$addr$0>>0]|0;
    $cmp2$i = ($23<<24>>24)>(-1);
    if ($cmp2$i) {
     $conv$i = $23 << 24 >> 24;
     $24 = HEAP32[$__tab_$i>>2]|0;
     $arrayidx$i = (($24) + ($conv$i<<1)|0);
     $25 = HEAP16[$arrayidx$i>>1]|0;
     $and3$i = $25 & 8192;
     $cmp6$i = ($and3$i<<16>>16)==(0);
     if (!($cmp6$i)) {
      $__fmtb$addr$0$pn = $__fmtb$addr$0;
      while(1) {
       $__fmtb$addr$3 = ((($__fmtb$addr$0$pn)) + 1|0);
       $cmp30 = ($__fmtb$addr$3|0)==($__fmte|0);
       if ($cmp30) {
        $__fmtb$addr$3$lcssa = $__fmte;
        break;
       }
       $26 = HEAP8[$__fmtb$addr$3>>0]|0;
       $cmp2$i44 = ($26<<24>>24)>(-1);
       if (!($cmp2$i44)) {
        $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
        break;
       }
       $conv$i45 = $26 << 24 >> 24;
       $arrayidx$i47 = (($24) + ($conv$i45<<1)|0);
       $27 = HEAP16[$arrayidx$i47>>1]|0;
       $and3$i48 = $27 & 8192;
       $cmp6$i49 = ($and3$i48<<16>>16)==(0);
       if ($cmp6$i49) {
        $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
        break;
       } else {
        $__fmtb$addr$0$pn = $__fmtb$addr$3;
       }
      }
      $28 = $49;$33 = $73;
      while(1) {
       $tobool$i$i$i54 = ($28|0)==(0|0);
       if ($tobool$i$i$i54) {
        $38 = 0;$74 = 1;
       } else {
        $__ninp_$i$i$i$i55 = ((($28)) + 12|0);
        $29 = HEAP32[$__ninp_$i$i$i$i55>>2]|0;
        $__einp_$i$i$i$i56 = ((($28)) + 16|0);
        $30 = HEAP32[$__einp_$i$i$i$i56>>2]|0;
        $cmp$i$i$i$i57 = ($29|0)==($30|0);
        if ($cmp$i$i$i$i57) {
         $vtable$i$i$i$i59 = HEAP32[$28>>2]|0;
         $vfn$i$i$i$i60 = ((($vtable$i$i$i$i59)) + 36|0);
         $31 = HEAP32[$vfn$i$i$i$i60>>2]|0;
         $call$i$i$i$i61 = (FUNCTION_TABLE_ii[$31 & 511]($28)|0);
         $retval$0$i$i$i$i65 = $call$i$i$i$i61;
        } else {
         $32 = HEAP8[$29>>0]|0;
         $call3$i$i$i$i63 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
         $retval$0$i$i$i$i65 = $call3$i$i$i$i63;
        }
        $call3$i$i$i66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i67 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i65,$call3$i$i$i66)|0);
        if ($call4$i$i$i67) {
         HEAP32[$__b>>2] = 0;
         $38 = 0;$74 = 1;
        } else {
         $38 = $28;$74 = 0;
        }
       }
       $tobool$i2$i$i74 = ($33|0)==(0|0);
       do {
        if ($tobool$i2$i$i74) {
         label = 42;
        } else {
         $__ninp_$i$i3$i$i76 = ((($33)) + 12|0);
         $34 = HEAP32[$__ninp_$i$i3$i$i76>>2]|0;
         $__einp_$i$i4$i$i77 = ((($33)) + 16|0);
         $35 = HEAP32[$__einp_$i$i4$i$i77>>2]|0;
         $cmp$i$i5$i$i78 = ($34|0)==($35|0);
         if ($cmp$i$i5$i$i78) {
          $vtable$i$i7$i$i80 = HEAP32[$33>>2]|0;
          $vfn$i$i8$i$i81 = ((($vtable$i$i7$i$i80)) + 36|0);
          $36 = HEAP32[$vfn$i$i8$i$i81>>2]|0;
          $call$i$i9$i$i82 = (FUNCTION_TABLE_ii[$36 & 511]($33)|0);
          $retval$0$i$i13$i$i86 = $call$i$i9$i$i82;
         } else {
          $37 = HEAP8[$34>>0]|0;
          $call3$i$i11$i$i84 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
          $retval$0$i$i13$i$i86 = $call3$i$i11$i$i84;
         }
         $call3$i14$i$i87 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i88 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i86,$call3$i14$i$i87)|0);
         if ($call4$i15$i$i88) {
          HEAP32[$__e>>2] = 0;
          label = 42;
          break;
         } else {
          if ($74) {
           $75 = $33;
           break;
          } else {
           $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
           break L24;
          }
         }
        }
       } while(0);
       if ((label|0) == 42) {
        label = 0;
        if ($74) {
         $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
         break L24;
        } else {
         $75 = 0;
        }
       }
       $__ninp_$i$i = ((($38)) + 12|0);
       $39 = HEAP32[$__ninp_$i$i>>2]|0;
       $__einp_$i$i = ((($38)) + 16|0);
       $40 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i94 = ($39|0)==($40|0);
       if ($cmp$i$i94) {
        $vtable$i$i = HEAP32[$38>>2]|0;
        $vfn$i$i = ((($vtable$i$i)) + 36|0);
        $41 = HEAP32[$vfn$i$i>>2]|0;
        $call$i$i = (FUNCTION_TABLE_ii[$41 & 511]($38)|0);
        $retval$0$i$i = $call$i$i;
       } else {
        $42 = HEAP8[$39>>0]|0;
        $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
        $retval$0$i$i = $call3$i$i;
       }
       $conv$i95 = $retval$0$i$i&255;
       $cmp2$i96 = ($conv$i95<<24>>24)>(-1);
       if (!($cmp2$i96)) {
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L24;
       }
       $sext = $retval$0$i$i << 24;
       $conv$i97 = $sext >> 24;
       $43 = HEAP32[$__tab_$i>>2]|0;
       $arrayidx$i99 = (($43) + ($conv$i97<<1)|0);
       $44 = HEAP16[$arrayidx$i99>>1]|0;
       $and3$i100 = $44 & 8192;
       $cmp6$i101 = ($and3$i100<<16>>16)==(0);
       if ($cmp6$i101) {
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L24;
       }
       $45 = HEAP32[$__ninp_$i$i>>2]|0;
       $46 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i108 = ($45|0)==($46|0);
       if ($cmp$i$i108) {
        $vtable$i$i109 = HEAP32[$38>>2]|0;
        $vfn$i$i110 = ((($vtable$i$i109)) + 40|0);
        $47 = HEAP32[$vfn$i$i110>>2]|0;
        (FUNCTION_TABLE_ii[$47 & 511]($38)|0);
       } else {
        $incdec$ptr$i$i = ((($45)) + 1|0);
        HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
        $48 = HEAP8[$45>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
       }
       $28 = $38;$33 = $75;
      }
     }
    }
    $__ninp_$i$i116 = ((($49)) + 12|0);
    $50 = HEAP32[$__ninp_$i$i116>>2]|0;
    $__einp_$i$i117 = ((($49)) + 16|0);
    $51 = HEAP32[$__einp_$i$i117>>2]|0;
    $cmp$i$i118 = ($50|0)==($51|0);
    if ($cmp$i$i118) {
     $vtable$i$i119 = HEAP32[$49>>2]|0;
     $vfn$i$i120 = ((($vtable$i$i119)) + 36|0);
     $52 = HEAP32[$vfn$i$i120>>2]|0;
     $call$i$i121 = (FUNCTION_TABLE_ii[$52 & 511]($49)|0);
     $retval$0$i$i125 = $call$i$i121;
    } else {
     $53 = HEAP8[$50>>0]|0;
     $call3$i$i123 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($53)|0);
     $retval$0$i$i125 = $call3$i$i123;
    }
    $conv$i126 = $retval$0$i$i125&255;
    $vtable$i128 = HEAP32[$call$i>>2]|0;
    $vfn$i129 = ((($vtable$i128)) + 12|0);
    $54 = HEAP32[$vfn$i129>>2]|0;
    $call$i130 = (FUNCTION_TABLE_iii[$54 & 511]($call$i,$conv$i126)|0);
    $55 = HEAP8[$__fmtb$addr$0>>0]|0;
    $vtable$i131 = HEAP32[$call$i>>2]|0;
    $vfn$i132 = ((($vtable$i131)) + 12|0);
    $56 = HEAP32[$vfn$i132>>2]|0;
    $call$i133 = (FUNCTION_TABLE_iii[$56 & 511]($call$i,$55)|0);
    $cmp51 = ($call$i130<<24>>24)==($call$i133<<24>>24);
    if (!($cmp51)) {
     HEAP32[$__err>>2] = 4;
     $__fmtb$addr$4 = $__fmtb$addr$0;
     break;
    }
    $57 = HEAP32[$__ninp_$i$i116>>2]|0;
    $58 = HEAP32[$__einp_$i$i117>>2]|0;
    $cmp$i$i137 = ($57|0)==($58|0);
    if ($cmp$i$i137) {
     $vtable$i$i138 = HEAP32[$49>>2]|0;
     $vfn$i$i139 = ((($vtable$i$i138)) + 40|0);
     $59 = HEAP32[$vfn$i$i139>>2]|0;
     (FUNCTION_TABLE_ii[$59 & 511]($49)|0);
    } else {
     $incdec$ptr$i$i142 = ((($57)) + 1|0);
     HEAP32[$__ninp_$i$i116>>2] = $incdec$ptr$i$i142;
     $60 = HEAP8[$57>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
    }
    $incdec$ptr54 = ((($__fmtb$addr$0)) + 1|0);
    $__fmtb$addr$4 = $incdec$ptr54;
   }
  } while(0);
  $$pre = HEAP32[$__err>>2]|0;
  $0 = $$pre;$__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label|0) == 63) {
  HEAP32[$__err>>2] = 4;
  $61 = $49;
 }
 $tobool$i$i$i147 = ($61|0)==(0|0);
 if ($tobool$i$i$i147) {
  $76 = 1;$retval$sroa$0$0$copyload = 0;
 } else {
  $__ninp_$i$i$i$i148 = ((($61)) + 12|0);
  $62 = HEAP32[$__ninp_$i$i$i$i148>>2]|0;
  $__einp_$i$i$i$i149 = ((($61)) + 16|0);
  $63 = HEAP32[$__einp_$i$i$i$i149>>2]|0;
  $cmp$i$i$i$i150 = ($62|0)==($63|0);
  if ($cmp$i$i$i$i150) {
   $vtable$i$i$i$i152 = HEAP32[$61>>2]|0;
   $vfn$i$i$i$i153 = ((($vtable$i$i$i$i152)) + 36|0);
   $64 = HEAP32[$vfn$i$i$i$i153>>2]|0;
   $call$i$i$i$i154 = (FUNCTION_TABLE_ii[$64 & 511]($61)|0);
   $retval$0$i$i$i$i158 = $call$i$i$i$i154;
  } else {
   $65 = HEAP8[$62>>0]|0;
   $call3$i$i$i$i156 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($65)|0);
   $retval$0$i$i$i$i158 = $call3$i$i$i$i156;
  }
  $call3$i$i$i159 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i160 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i158,$call3$i$i$i159)|0);
  if ($call4$i$i$i160) {
   HEAP32[$__b>>2] = 0;
   $76 = 1;$retval$sroa$0$0$copyload = 0;
  } else {
   $76 = 0;$retval$sroa$0$0$copyload = $61;
  }
 }
 $66 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i167 = ($66|0)==(0|0);
 do {
  if ($tobool$i2$i$i167) {
   label = 76;
  } else {
   $__ninp_$i$i3$i$i169 = ((($66)) + 12|0);
   $67 = HEAP32[$__ninp_$i$i3$i$i169>>2]|0;
   $__einp_$i$i4$i$i170 = ((($66)) + 16|0);
   $68 = HEAP32[$__einp_$i$i4$i$i170>>2]|0;
   $cmp$i$i5$i$i171 = ($67|0)==($68|0);
   if ($cmp$i$i5$i$i171) {
    $vtable$i$i7$i$i173 = HEAP32[$66>>2]|0;
    $vfn$i$i8$i$i174 = ((($vtable$i$i7$i$i173)) + 36|0);
    $69 = HEAP32[$vfn$i$i8$i$i174>>2]|0;
    $call$i$i9$i$i175 = (FUNCTION_TABLE_ii[$69 & 511]($66)|0);
    $retval$0$i$i13$i$i179 = $call$i$i9$i$i175;
   } else {
    $70 = HEAP8[$67>>0]|0;
    $call3$i$i11$i$i177 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($70)|0);
    $retval$0$i$i13$i$i179 = $call3$i$i11$i$i177;
   }
   $call3$i14$i$i180 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i181 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i179,$call3$i14$i$i180)|0);
   if ($call4$i15$i$i181) {
    HEAP32[$__e>>2] = 0;
    label = 76;
    break;
   } else {
    if ($76) {
     break;
    } else {
     label = 78;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 76) {
  if ($76) {
   label = 78;
  }
 }
 if ((label|0) == 78) {
  $71 = HEAP32[$__err>>2]|0;
  $or = $71 | 2;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(31);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(12);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i39 = 0, $__einp_$i$i7 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i38 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $and3$i = 0, $arrayidx$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i23 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i44 = 0, $call3$i$i = 0, $call3$i$i$i = 0;
 var $call3$i$i$i$i = 0, $call3$i$i$i$i25 = 0, $call3$i$i$i28 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i46 = 0, $call3$i14$i$i = 0, $call3$i14$i$i49 = 0, $call4$i$i$i = 0, $call4$i$i$i29 = 0, $call4$i15$i$i = 0, $call4$i15$i$i50 = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i40 = 0, $cmp$i$i8 = 0, $cmp2$i = 0, $cmp6$i = 0, $conv$i = 0;
 var $conv$i4 = 0, $incdec$ptr$i$i = 0, $or = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i32 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i27 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i48 = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i36 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i10 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i43 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i42 = 0, $vtable$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__tab_$i = ((($__ct)) + 8|0);
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $33 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($0)) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($0)) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $4 = HEAP8[$1>>0]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $33 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $33 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($5)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($5)) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $9 = HEAP8[$6>>0]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($33) {
      $34 = $5;
      break;
     } else {
      $27 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($33) {
    $27 = 0;
    break;
   } else {
    $34 = 0;
   }
  }
  $10 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = ((($10)) + 12|0);
  $11 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($10)) + 16|0);
  $12 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($11|0)==($12|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$10>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $13 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $14 = HEAP8[$11>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $cmp2$i = ($conv$i<<24>>24)>(-1);
  if (!($cmp2$i)) {
   $27 = $34;
   break;
  }
  $sext = $retval$0$i$i << 24;
  $conv$i4 = $sext >> 24;
  $15 = HEAP32[$__tab_$i>>2]|0;
  $arrayidx$i = (($15) + ($conv$i4<<1)|0);
  $16 = HEAP16[$arrayidx$i>>1]|0;
  $and3$i = $16 & 8192;
  $cmp6$i = ($and3$i<<16>>16)==(0);
  if ($cmp6$i) {
   $27 = $34;
   break;
  }
  $17 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i6 = ((($17)) + 12|0);
  $18 = HEAP32[$__ninp_$i$i6>>2]|0;
  $__einp_$i$i7 = ((($17)) + 16|0);
  $19 = HEAP32[$__einp_$i$i7>>2]|0;
  $cmp$i$i8 = ($18|0)==($19|0);
  if ($cmp$i$i8) {
   $vtable$i$i9 = HEAP32[$17>>2]|0;
   $vfn$i$i10 = ((($vtable$i$i9)) + 40|0);
   $20 = HEAP32[$vfn$i$i10>>2]|0;
   (FUNCTION_TABLE_ii[$20 & 511]($17)|0);
  } else {
   $incdec$ptr$i$i = ((($18)) + 1|0);
   HEAP32[$__ninp_$i$i6>>2] = $incdec$ptr$i$i;
   $21 = HEAP8[$18>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($21)|0);
  }
 }
 $22 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i16 = ($22|0)==(0|0);
 do {
  if ($tobool$i$i$i16) {
   $35 = 1;
  } else {
   $__ninp_$i$i$i$i17 = ((($22)) + 12|0);
   $23 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
   $__einp_$i$i$i$i18 = ((($22)) + 16|0);
   $24 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
   $cmp$i$i$i$i19 = ($23|0)==($24|0);
   if ($cmp$i$i$i$i19) {
    $vtable$i$i$i$i21 = HEAP32[$22>>2]|0;
    $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
    $25 = HEAP32[$vfn$i$i$i$i22>>2]|0;
    $call$i$i$i$i23 = (FUNCTION_TABLE_ii[$25 & 511]($22)|0);
    $retval$0$i$i$i$i27 = $call$i$i$i$i23;
   } else {
    $26 = HEAP8[$23>>0]|0;
    $call3$i$i$i$i25 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($26)|0);
    $retval$0$i$i$i$i27 = $call3$i$i$i$i25;
   }
   $call3$i$i$i28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i27,$call3$i$i$i28)|0);
   if ($call4$i$i$i29) {
    HEAP32[$__b>>2] = 0;
    $35 = 1;
    break;
   } else {
    $$pre$i$i$i31 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i32 = ($$pre$i$i$i31|0)==(0|0);
    $35 = $phitmp$i$i$i32;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i36 = ($27|0)==(0|0);
 do {
  if ($tobool$i2$i$i36) {
   label = 39;
  } else {
   $__ninp_$i$i3$i$i38 = ((($27)) + 12|0);
   $28 = HEAP32[$__ninp_$i$i3$i$i38>>2]|0;
   $__einp_$i$i4$i$i39 = ((($27)) + 16|0);
   $29 = HEAP32[$__einp_$i$i4$i$i39>>2]|0;
   $cmp$i$i5$i$i40 = ($28|0)==($29|0);
   if ($cmp$i$i5$i$i40) {
    $vtable$i$i7$i$i42 = HEAP32[$27>>2]|0;
    $vfn$i$i8$i$i43 = ((($vtable$i$i7$i$i42)) + 36|0);
    $30 = HEAP32[$vfn$i$i8$i$i43>>2]|0;
    $call$i$i9$i$i44 = (FUNCTION_TABLE_ii[$30 & 511]($27)|0);
    $retval$0$i$i13$i$i48 = $call$i$i9$i$i44;
   } else {
    $31 = HEAP8[$28>>0]|0;
    $call3$i$i11$i$i46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $retval$0$i$i13$i$i48 = $call3$i$i11$i$i46;
   }
   $call3$i14$i$i49 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i50 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i48,$call3$i14$i$i49)|0);
   if ($call4$i15$i$i50) {
    HEAP32[$__e>>2] = 0;
    label = 39;
    break;
   } else {
    if ($35) {
     break;
    } else {
     label = 41;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  if ($35) {
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $32 = HEAP32[$__err>>2]|0;
  $or = $32 | 2;
  HEAP32[$__err>>2] = $or;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i13 = 0, $__size_$i3$i = 0, $__size_$i3$i15 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $arrayidx3 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i19 = 0, $conv$i$i = 0, $conv$i$i17 = 0, $or = 0, $or$cond = 0, $or$cond21 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i14 = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $__size_$i$i = ((($call)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($call)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i = $2;
 } else {
  $conv$i$i = $1&255;
  $cond$i = $conv$i$i;
 }
 $arrayidx3 = ((($call)) + 12|0);
 $__size_$i$i13 = ((($arrayidx3)) + 11|0);
 $3 = HEAP8[$__size_$i$i13>>0]|0;
 $tobool$i$i14 = ($3<<24>>24)<(0);
 if ($tobool$i$i14) {
  $__size_$i3$i15 = ((($call)) + 16|0);
  $4 = HEAP32[$__size_$i3$i15>>2]|0;
  $cond$i19 = $4;
 } else {
  $conv$i$i17 = $3&255;
  $cond$i19 = $conv$i$i17;
 }
 $add = (0 - ($cond$i19))|0;
 $cmp = ($cond$i|0)==($add|0);
 do {
  if ($cmp) {
   $5 = HEAP32[$__err>>2]|0;
   $or = $5 | 4;
   HEAP32[$__err>>2] = $or;
  } else {
   $6 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $6;
   $add$ptr5 = ((($call)) + 24|0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call6 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
   $sub$ptr$lhs$cast = $call6;
   $sub$ptr$rhs$cast = $call;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $7 = ($sub$ptr$sub|0)==(0);
   $8 = HEAP32[$__h>>2]|0;
   $cmp8 = ($8|0)==(12);
   $or$cond = $cmp8 & $7;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $9 = ($sub$ptr$sub|0)==(12);
   $cmp12 = ($8|0)<(12);
   $or$cond21 = $cmp12 & $9;
   if ($or$cond21) {
    $add14 = (($8) + 12)|0;
    HEAP32[$__h>>2] = $add14;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $cmp4 = 0, $spec$select = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $cmp = ($call|0)<(69);
  if ($cmp) {
   $add = (($call) + 2000)|0;
   $__t$0 = $add;
  } else {
   $cmp4 = ($call|0)<(100);
   $add6 = (($call) + 1900)|0;
   $spec$select = $cmp4 ? $add6 : $call;
   $__t$0 = $spec$select;
  }
  $sub = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $sub = (($call) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__einp_$i$i8 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__ninp_$i$i7 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0;
 var $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i5 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i9 = 0, $conv$i = 0, $incdec$ptr$i$i = 0, $or = 0, $or5 = 0;
 var $or9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i33 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $tobool$i$i$i = 0, $tobool$i$i$i17 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i11 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i = 0;
 var $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i10 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $34 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP8[$1>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $34 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $34 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP8[$6>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($34) {
     $28 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($34) {
   label = 16;
  } else {
   $28 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i5 = ($12|0)==($13|0);
   if ($cmp$i$i5) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP8[$12>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 36|0);
   $16 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$16 & 511]($__ct,$conv$i,0)|0);
   $cmp = ($call$i<<24>>24)==(37);
   if (!($cmp)) {
    $17 = HEAP32[$__err>>2]|0;
    $or5 = $17 | 4;
    HEAP32[$__err>>2] = $or5;
    break;
   }
   $18 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i7 = ((($18)) + 12|0);
   $19 = HEAP32[$__ninp_$i$i7>>2]|0;
   $__einp_$i$i8 = ((($18)) + 16|0);
   $20 = HEAP32[$__einp_$i$i8>>2]|0;
   $cmp$i$i9 = ($19|0)==($20|0);
   if ($cmp$i$i9) {
    $vtable$i$i10 = HEAP32[$18>>2]|0;
    $vfn$i$i11 = ((($vtable$i$i10)) + 40|0);
    $21 = HEAP32[$vfn$i$i11>>2]|0;
    (FUNCTION_TABLE_ii[$21 & 511]($18)|0);
   } else {
    $incdec$ptr$i$i = ((($19)) + 1|0);
    HEAP32[$__ninp_$i$i7>>2] = $incdec$ptr$i$i;
    $22 = HEAP8[$19>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($22)|0);
   }
   $23 = HEAP32[$__b>>2]|0;
   $tobool$i$i$i17 = ($23|0)==(0|0);
   do {
    if ($tobool$i$i$i17) {
     $35 = 1;
    } else {
     $__ninp_$i$i$i$i18 = ((($23)) + 12|0);
     $24 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
     $__einp_$i$i$i$i19 = ((($23)) + 16|0);
     $25 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
     $cmp$i$i$i$i20 = ($24|0)==($25|0);
     if ($cmp$i$i$i$i20) {
      $vtable$i$i$i$i22 = HEAP32[$23>>2]|0;
      $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
      $26 = HEAP32[$vfn$i$i$i$i23>>2]|0;
      $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$26 & 511]($23)|0);
      $retval$0$i$i$i$i28 = $call$i$i$i$i24;
     } else {
      $27 = HEAP8[$24>>0]|0;
      $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($27)|0);
      $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
     }
     $call3$i$i$i29 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i$i$i30 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
     if ($call4$i$i$i30) {
      HEAP32[$__b>>2] = 0;
      $35 = 1;
      break;
     } else {
      $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i33 = ($$pre$i$i$i32|0)==(0|0);
      $35 = $phitmp$i$i$i33;
      break;
     }
    }
   } while(0);
   $tobool$i2$i$i37 = ($28|0)==(0|0);
   do {
    if ($tobool$i2$i$i37) {
     label = 38;
    } else {
     $__ninp_$i$i3$i$i39 = ((($28)) + 12|0);
     $29 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
     $__einp_$i$i4$i$i40 = ((($28)) + 16|0);
     $30 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
     $cmp$i$i5$i$i41 = ($29|0)==($30|0);
     if ($cmp$i$i5$i$i41) {
      $vtable$i$i7$i$i43 = HEAP32[$28>>2]|0;
      $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
      $31 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
      $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$31 & 511]($28)|0);
      $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
     } else {
      $32 = HEAP8[$29>>0]|0;
      $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
      $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
     }
     $call3$i14$i$i50 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i51 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
     if ($call4$i15$i$i51) {
      HEAP32[$__e>>2] = 0;
      label = 38;
      break;
     } else {
      if ($35) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($35)) {
     break;
    }
   }
   $33 = HEAP32[$__err>>2]|0;
   $or9 = $33 | 2;
   HEAP32[$__err>>2] = $or9;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i124 = 0, $$pre$i$i$i46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i111 = 0, $__einp_$i$i$i$i33 = 0, $__einp_$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i132 = 0, $__einp_$i$i4$i$i54 = 0, $__einp_$i$i73 = 0, $__einp_$i$i98 = 0;
 var $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i110 = 0, $__ninp_$i$i$i$i32 = 0, $__ninp_$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i131 = 0, $__ninp_$i$i3$i$i53 = 0, $__ninp_$i$i72 = 0, $__ninp_$i$i97 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $and3$i = 0, $and3$i88 = 0, $arrayidx$i = 0, $arrayidx$i87 = 0;
 var $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i116 = 0, $call$i$i$i$i38 = 0, $call$i$i77 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i137 = 0, $call$i$i9$i$i59 = 0, $call$i95 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i118 = 0, $call3$i$i$i$i40 = 0, $call3$i$i$i121 = 0, $call3$i$i$i43 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i139 = 0, $call3$i$i11$i$i61 = 0;
 var $call3$i$i79 = 0, $call3$i14$i$i = 0, $call3$i14$i$i142 = 0, $call3$i14$i$i64 = 0, $call4$i$i$i = 0, $call4$i$i$i122 = 0, $call4$i$i$i44 = 0, $call4$i15$i$i = 0, $call4$i15$i$i143 = 0, $call4$i15$i$i65 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i112 = 0, $cmp$i$i$i$i34 = 0, $cmp$i$i18 = 0, $cmp$i$i23 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i133 = 0, $cmp$i$i5$i$i55 = 0, $cmp$i$i74 = 0;
 var $cmp$i$i99 = 0, $cmp2$i = 0, $cmp2$i84 = 0, $cmp6$i = 0, $cmp6$i89 = 0, $conv = 0, $conv$i = 0, $conv$i19 = 0, $conv$i82 = 0, $conv$i85 = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i104 = 0, $mul = 0, $or = 0, $or20 = 0, $or4 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i125 = 0, $phitmp$i$i$i47 = 0;
 var $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i120 = 0, $retval$0$i$i$i$i42 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i141 = 0, $retval$0$i$i13$i$i63 = 0, $retval$0$i$i81 = 0, $retval$2 = 0, $sext = 0, $sext151 = 0, $tobool$i$i$i = 0, $tobool$i$i$i109 = 0, $tobool$i$i$i31 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i129 = 0, $tobool$i2$i$i51 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0;
 var $vfn$i$i$i$i115 = 0, $vfn$i$i$i$i37 = 0, $vfn$i$i101 = 0, $vfn$i$i25 = 0, $vfn$i$i76 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i136 = 0, $vfn$i$i8$i$i58 = 0, $vfn$i94 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i114 = 0, $vtable$i$i$i$i36 = 0, $vtable$i$i100 = 0, $vtable$i$i24 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i135 = 0, $vtable$i$i7$i$i57 = 0, $vtable$i$i75 = 0;
 var $vtable$i93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $62 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP8[$1>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $62 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $62 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP8[$6>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($62) {
     $63 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($62) {
   label = 16;
  } else {
   $63 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
   $retval$2 = 0;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i18 = ($12|0)==($13|0);
   if ($cmp$i$i18) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP8[$12>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $cmp2$i = ($conv$i<<24>>24)>(-1);
   if ($cmp2$i) {
    $sext = $retval$0$i$i << 24;
    $conv$i19 = $sext >> 24;
    $__tab_$i = ((($__ct)) + 8|0);
    $16 = HEAP32[$__tab_$i>>2]|0;
    $arrayidx$i = (($16) + ($conv$i19<<1)|0);
    $17 = HEAP16[$arrayidx$i>>1]|0;
    $and3$i = $17 & 2048;
    $cmp6$i = ($and3$i<<16>>16)==(0);
    if (!($cmp6$i)) {
     $vtable$i = HEAP32[$__ct>>2]|0;
     $vfn$i = ((($vtable$i)) + 36|0);
     $19 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_iiii[$19 & 511]($__ct,$conv$i,0)|0);
     $conv = $call$i << 24 >> 24;
     $20 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i21 = ((($20)) + 12|0);
     $21 = HEAP32[$__ninp_$i$i21>>2]|0;
     $__einp_$i$i22 = ((($20)) + 16|0);
     $22 = HEAP32[$__einp_$i$i22>>2]|0;
     $cmp$i$i23 = ($21|0)==($22|0);
     if ($cmp$i$i23) {
      $vtable$i$i24 = HEAP32[$20>>2]|0;
      $vfn$i$i25 = ((($vtable$i$i24)) + 40|0);
      $23 = HEAP32[$vfn$i$i25>>2]|0;
      (FUNCTION_TABLE_ii[$23 & 511]($20)|0);
     } else {
      $incdec$ptr$i$i = ((($21)) + 1|0);
      HEAP32[$__ninp_$i$i21>>2] = $incdec$ptr$i$i;
      $24 = HEAP8[$21>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($24)|0);
     }
     $30 = $63;$64 = $63;$__n$addr$0$in = $__n;$__r$0$in = $conv;
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
      $25 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i31 = ($25|0)==(0|0);
      do {
       if ($tobool$i$i$i31) {
        $36 = 1;
       } else {
        $__ninp_$i$i$i$i32 = ((($25)) + 12|0);
        $26 = HEAP32[$__ninp_$i$i$i$i32>>2]|0;
        $__einp_$i$i$i$i33 = ((($25)) + 16|0);
        $27 = HEAP32[$__einp_$i$i$i$i33>>2]|0;
        $cmp$i$i$i$i34 = ($26|0)==($27|0);
        if ($cmp$i$i$i$i34) {
         $vtable$i$i$i$i36 = HEAP32[$25>>2]|0;
         $vfn$i$i$i$i37 = ((($vtable$i$i$i$i36)) + 36|0);
         $28 = HEAP32[$vfn$i$i$i$i37>>2]|0;
         $call$i$i$i$i38 = (FUNCTION_TABLE_ii[$28 & 511]($25)|0);
         $retval$0$i$i$i$i42 = $call$i$i$i$i38;
        } else {
         $29 = HEAP8[$26>>0]|0;
         $call3$i$i$i$i40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
         $retval$0$i$i$i$i42 = $call3$i$i$i$i40;
        }
        $call3$i$i$i43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i42,$call3$i$i$i43)|0);
        if ($call4$i$i$i44) {
         HEAP32[$__b>>2] = 0;
         $36 = 1;
         break;
        } else {
         $$pre$i$i$i46 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i47 = ($$pre$i$i$i46|0)==(0|0);
         $36 = $phitmp$i$i$i47;
         break;
        }
       }
      } while(0);
      $tobool$i2$i$i51 = ($30|0)==(0|0);
      if ($tobool$i2$i$i51) {
       $37 = 1;$56 = $64;$65 = 0;
      } else {
       $__ninp_$i$i3$i$i53 = ((($30)) + 12|0);
       $31 = HEAP32[$__ninp_$i$i3$i$i53>>2]|0;
       $__einp_$i$i4$i$i54 = ((($30)) + 16|0);
       $32 = HEAP32[$__einp_$i$i4$i$i54>>2]|0;
       $cmp$i$i5$i$i55 = ($31|0)==($32|0);
       if ($cmp$i$i5$i$i55) {
        $vtable$i$i7$i$i57 = HEAP32[$30>>2]|0;
        $vfn$i$i8$i$i58 = ((($vtable$i$i7$i$i57)) + 36|0);
        $33 = HEAP32[$vfn$i$i8$i$i58>>2]|0;
        $call$i$i9$i$i59 = (FUNCTION_TABLE_ii[$33 & 511]($30)|0);
        $retval$0$i$i13$i$i63 = $call$i$i9$i$i59;
       } else {
        $34 = HEAP8[$31>>0]|0;
        $call3$i$i11$i$i61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($34)|0);
        $retval$0$i$i13$i$i63 = $call3$i$i11$i$i61;
       }
       $call3$i14$i$i64 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i65 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i63,$call3$i14$i$i64)|0);
       if ($call4$i15$i$i65) {
        HEAP32[$__e>>2] = 0;
        $37 = 1;$56 = 0;$65 = 0;
       } else {
        $37 = 0;$56 = $64;$65 = $30;
       }
      }
      $35 = $36 ^ $37;
      $cmp = ($__n$addr$0$in|0)>(1);
      $38 = $cmp & $35;
      $39 = HEAP32[$__b>>2]|0;
      if (!($38)) {
       break;
      }
      $__ninp_$i$i72 = ((($39)) + 12|0);
      $40 = HEAP32[$__ninp_$i$i72>>2]|0;
      $__einp_$i$i73 = ((($39)) + 16|0);
      $41 = HEAP32[$__einp_$i$i73>>2]|0;
      $cmp$i$i74 = ($40|0)==($41|0);
      if ($cmp$i$i74) {
       $vtable$i$i75 = HEAP32[$39>>2]|0;
       $vfn$i$i76 = ((($vtable$i$i75)) + 36|0);
       $42 = HEAP32[$vfn$i$i76>>2]|0;
       $call$i$i77 = (FUNCTION_TABLE_ii[$42 & 511]($39)|0);
       $retval$0$i$i81 = $call$i$i77;
      } else {
       $43 = HEAP8[$40>>0]|0;
       $call3$i$i79 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
       $retval$0$i$i81 = $call3$i$i79;
      }
      $conv$i82 = $retval$0$i$i81&255;
      $cmp2$i84 = ($conv$i82<<24>>24)>(-1);
      if (!($cmp2$i84)) {
       $retval$2 = $__r$0;
       break L22;
      }
      $sext151 = $retval$0$i$i81 << 24;
      $conv$i85 = $sext151 >> 24;
      $44 = HEAP32[$__tab_$i>>2]|0;
      $arrayidx$i87 = (($44) + ($conv$i85<<1)|0);
      $45 = HEAP16[$arrayidx$i87>>1]|0;
      $and3$i88 = $45 & 2048;
      $cmp6$i89 = ($and3$i88<<16>>16)==(0);
      if ($cmp6$i89) {
       $retval$2 = $__r$0;
       break L22;
      }
      $mul = ($__r$0*10)|0;
      $vtable$i93 = HEAP32[$__ct>>2]|0;
      $vfn$i94 = ((($vtable$i93)) + 36|0);
      $46 = HEAP32[$vfn$i94>>2]|0;
      $call$i95 = (FUNCTION_TABLE_iiii[$46 & 511]($__ct,$conv$i82,0)|0);
      $conv14 = $call$i95 << 24 >> 24;
      $add = (($mul) + ($conv14))|0;
      $47 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i97 = ((($47)) + 12|0);
      $48 = HEAP32[$__ninp_$i$i97>>2]|0;
      $__einp_$i$i98 = ((($47)) + 16|0);
      $49 = HEAP32[$__einp_$i$i98>>2]|0;
      $cmp$i$i99 = ($48|0)==($49|0);
      if ($cmp$i$i99) {
       $vtable$i$i100 = HEAP32[$47>>2]|0;
       $vfn$i$i101 = ((($vtable$i$i100)) + 40|0);
       $50 = HEAP32[$vfn$i$i101>>2]|0;
       (FUNCTION_TABLE_ii[$50 & 511]($47)|0);
      } else {
       $incdec$ptr$i$i104 = ((($48)) + 1|0);
       HEAP32[$__ninp_$i$i97>>2] = $incdec$ptr$i$i104;
       $51 = HEAP8[$48>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($51)|0);
      }
      $30 = $65;$64 = $56;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
     }
     $tobool$i$i$i109 = ($39|0)==(0|0);
     do {
      if ($tobool$i$i$i109) {
       $66 = 1;
      } else {
       $__ninp_$i$i$i$i110 = ((($39)) + 12|0);
       $52 = HEAP32[$__ninp_$i$i$i$i110>>2]|0;
       $__einp_$i$i$i$i111 = ((($39)) + 16|0);
       $53 = HEAP32[$__einp_$i$i$i$i111>>2]|0;
       $cmp$i$i$i$i112 = ($52|0)==($53|0);
       if ($cmp$i$i$i$i112) {
        $vtable$i$i$i$i114 = HEAP32[$39>>2]|0;
        $vfn$i$i$i$i115 = ((($vtable$i$i$i$i114)) + 36|0);
        $54 = HEAP32[$vfn$i$i$i$i115>>2]|0;
        $call$i$i$i$i116 = (FUNCTION_TABLE_ii[$54 & 511]($39)|0);
        $retval$0$i$i$i$i120 = $call$i$i$i$i116;
       } else {
        $55 = HEAP8[$52>>0]|0;
        $call3$i$i$i$i118 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($55)|0);
        $retval$0$i$i$i$i120 = $call3$i$i$i$i118;
       }
       $call3$i$i$i121 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i122 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i120,$call3$i$i$i121)|0);
       if ($call4$i$i$i122) {
        HEAP32[$__b>>2] = 0;
        $66 = 1;
        break;
       } else {
        $$pre$i$i$i124 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i125 = ($$pre$i$i$i124|0)==(0|0);
        $66 = $phitmp$i$i$i125;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i129 = ($56|0)==(0|0);
     do {
      if ($tobool$i2$i$i129) {
       label = 63;
      } else {
       $__ninp_$i$i3$i$i131 = ((($56)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i3$i$i131>>2]|0;
       $__einp_$i$i4$i$i132 = ((($56)) + 16|0);
       $58 = HEAP32[$__einp_$i$i4$i$i132>>2]|0;
       $cmp$i$i5$i$i133 = ($57|0)==($58|0);
       if ($cmp$i$i5$i$i133) {
        $vtable$i$i7$i$i135 = HEAP32[$56>>2]|0;
        $vfn$i$i8$i$i136 = ((($vtable$i$i7$i$i135)) + 36|0);
        $59 = HEAP32[$vfn$i$i8$i$i136>>2]|0;
        $call$i$i9$i$i137 = (FUNCTION_TABLE_ii[$59 & 511]($56)|0);
        $retval$0$i$i13$i$i141 = $call$i$i9$i$i137;
       } else {
        $60 = HEAP8[$57>>0]|0;
        $call3$i$i11$i$i139 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
        $retval$0$i$i13$i$i141 = $call3$i$i11$i$i139;
       }
       $call3$i14$i$i142 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i143 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i141,$call3$i14$i$i142)|0);
       if ($call4$i15$i$i143) {
        HEAP32[$__e>>2] = 0;
        label = 63;
        break;
       } else {
        if ($66) {
         $retval$2 = $__r$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      if (!($66)) {
       $retval$2 = $__r$0;
       break;
      }
     }
     $61 = HEAP32[$__err>>2]|0;
     $or20 = $61 | 2;
     HEAP32[$__err>>2] = $or20;
     $retval$2 = $__r$0;
     break;
    }
   }
   $18 = HEAP32[$__err>>2]|0;
   $or4 = $18 | 4;
   HEAP32[$__err>>2] = $or4;
   $retval$2 = 0;
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,5184,(5216))|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i = 0, $cond$i$i1016 = 0, $conv$i$i = 0;
 var $tobool$i$i$i = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $3 = ((($call)) + 8|0);
 $__size_$i$i$i = ((($3)) + 3|0);
 $4 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($4<<24>>24)<(0);
 $5 = HEAP32[$call>>2]|0;
 $__size_$i2$i = ((($call)) + 4|0);
 $6 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i = $4&255;
 $cond$i$i1016 = $tobool$i$i$i ? $5 : $call;
 $cond$i = $tobool$i$i$i ? $6 : $conv$i$i;
 $add$ptr6 = (($cond$i$i1016) + ($cond$i<<2)|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call7 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i1016,$add$ptr6)|0);
 STACKTOP = sp;return ($call7|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_wday = ((($__tm)) + 24|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_mon = ((($__tm)) + 16|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $tm_year = ((($__tm)) + 20|0);
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i);
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__size_$i$i$i = 0, $__size_$i$i$i89 = 0, $__size_$i2$i = 0, $__size_$i2$i107 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp19 = 0, $agg$tmp19$byval_copy = 0, $agg$tmp24 = 0;
 var $agg$tmp24$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp29 = 0, $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp41 = 0, $agg$tmp41$byval_copy = 0, $agg$tmp44 = 0, $agg$tmp44$byval_copy = 0, $agg$tmp47 = 0;
 var $agg$tmp47$byval_copy = 0, $agg$tmp48 = 0, $agg$tmp48$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0, $agg$tmp58 = 0, $agg$tmp58$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $agg$tmp72 = 0;
 var $agg$tmp72$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp83$byval_copy = 0, $agg$tmp91 = 0, $agg$tmp91$byval_copy = 0, $agg$tmp94 = 0, $agg$tmp94$byval_copy = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call13 = 0, $call20 = 0, $call26 = 0, $call49 = 0, $call5 = 0, $call55 = 0;
 var $call63 = 0, $call73 = 0, $call80 = 0, $call88 = 0, $cond$i = 0, $cond$i$i103123 = 0, $cond$i$i87117 = 0, $cond$i111 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i109 = 0, $or = 0, $ref$tmp = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tm_hour = 0, $tm_hour31 = 0, $tm_hour43 = 0, $tm_mday = 0, $tm_min = 0;
 var $tm_mon = 0, $tm_mon36 = 0, $tm_wday = 0, $tm_wday66 = 0, $tm_yday = 0, $tm_year = 0, $tm_year93 = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, $vfn = 0, $vfn70 = 0, $vfn79 = 0, $vtable = 0, $vtable69 = 0, $vtable78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp96$byval_copy = sp + 248|0;
 $agg$tmp94$byval_copy = sp + 244|0;
 $agg$tmp91$byval_copy = sp + 240|0;
 $agg$tmp83$byval_copy = sp + 236|0;
 $agg$tmp82$byval_copy = sp + 232|0;
 $agg$tmp72$byval_copy = sp + 228|0;
 $agg$tmp71$byval_copy = sp + 224|0;
 $agg$tmp67$byval_copy = sp + 220|0;
 $agg$tmp62$byval_copy = sp + 216|0;
 $agg$tmp61$byval_copy = sp + 212|0;
 $agg$tmp58$byval_copy = sp + 208|0;
 $agg$tmp54$byval_copy = sp + 204|0;
 $agg$tmp53$byval_copy = sp + 200|0;
 $agg$tmp48$byval_copy = sp + 196|0;
 $agg$tmp47$byval_copy = sp + 192|0;
 $agg$tmp44$byval_copy = sp + 188|0;
 $agg$tmp41$byval_copy = sp + 184|0;
 $agg$tmp39$byval_copy = sp + 180|0;
 $agg$tmp37$byval_copy = sp + 176|0;
 $agg$tmp34$byval_copy = sp + 172|0;
 $agg$tmp32$byval_copy = sp + 168|0;
 $agg$tmp29$byval_copy = sp + 164|0;
 $agg$tmp25$byval_copy = sp + 160|0;
 $agg$tmp24$byval_copy = sp + 156|0;
 $agg$tmp19$byval_copy = sp + 152|0;
 $agg$tmp18$byval_copy = sp + 148|0;
 $agg$tmp15$byval_copy = sp + 144|0;
 $agg$tmp8$byval_copy = sp + 140|0;
 $agg$tmp7$byval_copy = sp + 136|0;
 $agg$tmp3$byval_copy = sp + 132|0;
 $agg$tmp$byval_copy = sp + 128|0;
 $ref$tmp = sp + 124|0;
 $agg$tmp = sp + 120|0;
 $agg$tmp3 = sp + 116|0;
 $agg$tmp7 = sp + 112|0;
 $agg$tmp8 = sp + 108|0;
 $agg$tmp15 = sp + 104|0;
 $agg$tmp18 = sp + 100|0;
 $agg$tmp19 = sp + 96|0;
 $agg$tmp24 = sp + 92|0;
 $agg$tmp25 = sp + 88|0;
 $agg$tmp29 = sp + 84|0;
 $agg$tmp32 = sp + 80|0;
 $agg$tmp34 = sp + 76|0;
 $agg$tmp37 = sp + 72|0;
 $agg$tmp39 = sp + 68|0;
 $agg$tmp41 = sp + 64|0;
 $agg$tmp44 = sp + 60|0;
 $agg$tmp47 = sp + 56|0;
 $agg$tmp48 = sp + 52|0;
 $agg$tmp53 = sp + 48|0;
 $agg$tmp54 = sp + 44|0;
 $agg$tmp58 = sp + 40|0;
 $agg$tmp61 = sp + 36|0;
 $agg$tmp62 = sp + 32|0;
 $agg$tmp67 = sp + 28|0;
 $agg$tmp71 = sp + 24|0;
 $agg$tmp72 = sp + 20|0;
 $agg$tmp82 = sp + 16|0;
 $agg$tmp83 = sp + 12|0;
 $agg$tmp91 = sp + 8|0;
 $agg$tmp94 = sp + 4|0;
 $agg$tmp96 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 $conv = $__fmt << 24 >> 24;
 do {
  switch ($conv|0) {
  case 65: case 97:  {
   $tm_wday = ((($__tm)) + 24|0);
   $1 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $1;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $tm_mon = ((($__tm)) + 16|0);
   $2 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $2;
   ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 99:  {
   $add$ptr = ((($this)) + 8|0);
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = ((($vtable)) + 12|0);
   $3 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$3 & 511]($add$ptr)|0);
   $4 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $4;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $5;
   $6 = ((($call5)) + 8|0);
   $__size_$i$i$i = ((($6)) + 3|0);
   $7 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($7<<24>>24)<(0);
   $8 = HEAP32[$call5>>2]|0;
   $__size_$i2$i = ((($call5)) + 4|0);
   $9 = HEAP32[$__size_$i2$i>>2]|0;
   $conv$i$i = $7&255;
   $cond$i$i87117 = $tobool$i$i$i ? $8 : $call5;
   $cond$i = $tobool$i$i$i ? $9 : $conv$i$i;
   $add$ptr12 = (($cond$i$i87117) + ($cond$i<<2)|0);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;
   $call13 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i87117,$add$ptr12)|0);
   HEAP32[$__b>>2] = $call13;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $tm_mday = ((($__tm)) + 12|0);
   $10 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp15>>2] = $10;
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mday,$__b,$agg$tmp15$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 68:  {
   $11 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp18>>2] = $11;
   $12 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp19>>2] = $12;
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;
   ;HEAP32[$agg$tmp19$byval_copy>>2]=HEAP32[$agg$tmp19>>2]|0;
   $call20 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp18$byval_copy,$agg$tmp19$byval_copy,$__iob,$__err,$__tm,5008,(5040))|0);
   HEAP32[$__b>>2] = $call20;
   label = 26;
   break;
  }
  case 70:  {
   $13 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp24>>2] = $13;
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp25>>2] = $14;
   ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;
   ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;
   $call26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp24$byval_copy,$agg$tmp25$byval_copy,$__iob,$__err,$__tm,5040,(5072))|0);
   HEAP32[$__b>>2] = $call26;
   label = 26;
   break;
  }
  case 72:  {
   $tm_hour = ((($__tm)) + 8|0);
   $15 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $15;
   ;HEAP32[$agg$tmp29$byval_copy>>2]=HEAP32[$agg$tmp29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour,$__b,$agg$tmp29$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 73:  {
   $tm_hour31 = ((($__tm)) + 8|0);
   $16 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $16;
   ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour31,$__b,$agg$tmp32$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 106:  {
   $tm_yday = ((($__tm)) + 28|0);
   $17 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $17;
   ;HEAP32[$agg$tmp34$byval_copy>>2]=HEAP32[$agg$tmp34>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_yday,$__b,$agg$tmp34$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 109:  {
   $tm_mon36 = ((($__tm)) + 16|0);
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp37>>2] = $18;
   ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon36,$__b,$agg$tmp37$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 77:  {
   $tm_min = ((($__tm)) + 4|0);
   $19 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $19;
   ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_min,$__b,$agg$tmp39$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $20 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp41>>2] = $20;
   ;HEAP32[$agg$tmp41$byval_copy>>2]=HEAP32[$agg$tmp41>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$agg$tmp41$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 112:  {
   $tm_hour43 = ((($__tm)) + 8|0);
   $21 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp44>>2] = $21;
   ;HEAP32[$agg$tmp44$byval_copy>>2]=HEAP32[$agg$tmp44>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour43,$__b,$agg$tmp44$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 114:  {
   $22 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp47>>2] = $22;
   $23 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp48>>2] = $23;
   ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;
   ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;
   $call49 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp47$byval_copy,$agg$tmp48$byval_copy,$__iob,$__err,$__tm,5072,(5116))|0);
   HEAP32[$__b>>2] = $call49;
   label = 26;
   break;
  }
  case 82:  {
   $24 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp53>>2] = $24;
   $25 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp54>>2] = $25;
   ;HEAP32[$agg$tmp53$byval_copy>>2]=HEAP32[$agg$tmp53>>2]|0;
   ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;
   $call55 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp53$byval_copy,$agg$tmp54$byval_copy,$__iob,$__err,$__tm,5120,(5140))|0);
   HEAP32[$__b>>2] = $call55;
   label = 26;
   break;
  }
  case 83:  {
   $26 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp58>>2] = $26;
   ;HEAP32[$agg$tmp58$byval_copy>>2]=HEAP32[$agg$tmp58>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$agg$tmp58$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 84:  {
   $27 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp61>>2] = $27;
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp62>>2] = $28;
   ;HEAP32[$agg$tmp61$byval_copy>>2]=HEAP32[$agg$tmp61>>2]|0;
   ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;
   $call63 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp61$byval_copy,$agg$tmp62$byval_copy,$__iob,$__err,$__tm,5152,(5184))|0);
   HEAP32[$__b>>2] = $call63;
   label = 26;
   break;
  }
  case 119:  {
   $tm_wday66 = ((($__tm)) + 24|0);
   $29 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp67>>2] = $29;
   ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday66,$__b,$agg$tmp67$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 120:  {
   $vtable69 = HEAP32[$this>>2]|0;
   $vfn70 = ((($vtable69)) + 20|0);
   $30 = HEAP32[$vfn70>>2]|0;
   $31 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp71>>2] = $31;
   $32 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp72>>2] = $32;
   ;HEAP32[$agg$tmp71$byval_copy>>2]=HEAP32[$agg$tmp71>>2]|0;
   ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;
   $call73 = (FUNCTION_TABLE_iiiiiii[$30 & 255]($this,$agg$tmp71$byval_copy,$agg$tmp72$byval_copy,$__iob,$__err,$__tm)|0);
   $retval$sroa$0$0 = $call73;
   break;
  }
  case 88:  {
   $add$ptr77 = ((($this)) + 8|0);
   $vtable78 = HEAP32[$add$ptr77>>2]|0;
   $vfn79 = ((($vtable78)) + 24|0);
   $33 = HEAP32[$vfn79>>2]|0;
   $call80 = (FUNCTION_TABLE_ii[$33 & 511]($add$ptr77)|0);
   $34 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp82>>2] = $34;
   $35 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp83>>2] = $35;
   $36 = ((($call80)) + 8|0);
   $__size_$i$i$i89 = ((($36)) + 3|0);
   $37 = HEAP8[$__size_$i$i$i89>>0]|0;
   $tobool$i$i$i90 = ($37<<24>>24)<(0);
   $38 = HEAP32[$call80>>2]|0;
   $__size_$i2$i107 = ((($call80)) + 4|0);
   $39 = HEAP32[$__size_$i2$i107>>2]|0;
   $conv$i$i109 = $37&255;
   $cond$i$i103123 = $tobool$i$i$i90 ? $38 : $call80;
   $cond$i111 = $tobool$i$i$i90 ? $39 : $conv$i$i109;
   $add$ptr87 = (($cond$i$i103123) + ($cond$i111<<2)|0);
   ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;
   ;HEAP32[$agg$tmp83$byval_copy>>2]=HEAP32[$agg$tmp83>>2]|0;
   $call88 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp82$byval_copy,$agg$tmp83$byval_copy,$__iob,$__err,$__tm,$cond$i$i103123,$add$ptr87)|0);
   HEAP32[$__b>>2] = $call88;
   label = 26;
   break;
  }
  case 121:  {
   $tm_year = ((($__tm)) + 20|0);
   $40 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp91>>2] = $40;
   ;HEAP32[$agg$tmp91$byval_copy>>2]=HEAP32[$agg$tmp91>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year,$__b,$agg$tmp91$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 89:  {
   $tm_year93 = ((($__tm)) + 20|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp94>>2] = $41;
   ;HEAP32[$agg$tmp94$byval_copy>>2]=HEAP32[$agg$tmp94>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year93,$__b,$agg$tmp94$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  case 37:  {
   $42 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp96>>2] = $42;
   ;HEAP32[$agg$tmp96$byval_copy>>2]=HEAP32[$agg$tmp96>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$agg$tmp96$byval_copy,$__err,$call$i);
   label = 26;
   break;
  }
  default: {
   $43 = HEAP32[$__err>>2]|0;
   $or = $43 | 4;
   HEAP32[$__err>>2] = $or;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18856]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18856)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L11init_wweeksEv();
   HEAP32[5306] = 18528;
  }
 }
 $2 = HEAP32[5306]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18840]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18840)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L12init_wmonthsEv();
   HEAP32[5305] = 18240;
  }
 }
 $2 = HEAP32[5305]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18824]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18824)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   __ZNSt3__2L11init_wam_pmEv();
   HEAP32[5304] = 17952;
  }
 }
 $2 = HEAP32[5304]|0;
 return ($2|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18816]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18816)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21204>>2]=0|0;HEAP32[21204+4>>2]=0|0;HEAP32[21204+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(8748)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(21204,8748,$call$i);
  }
 }
 return (21204|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18808]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18808)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21192>>2]=0|0;HEAP32[21192+4>>2]=0|0;HEAP32[21192+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(8700)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(21192,8700,$call$i);
  }
 }
 return (21192|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18800]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18800)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21180>>2]=0|0;HEAP32[21180+4>>2]=0|0;HEAP32[21180+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(8664)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(21180,8664,$call$i);
  }
 }
 return (21180|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call$i = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18792]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18792)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   ;HEAP32[21168>>2]=0|0;HEAP32[21168+4>>2]=0|0;HEAP32[21168+8>>2]=0|0;
   $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(8628)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(21168,8628,$call$i);
  }
 }
 return (21168|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_wcslen($__s)|0);
 return ($call|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18832]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18832)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 17952;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((18240)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(17952,8832)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((17964),8844)|0);
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18848]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18848)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 18240;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((18528)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18240,8856)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18252),8888)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18264),8924)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18276),8948)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18288),8972)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18300),8988)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18312),9008)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18324),9028)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18336),9056)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18348),9096)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18360),9128)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18372),9164)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18384),9200)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18396),9216)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18408),9232)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18420),9248)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18432),8972)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18444),9264)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18456),9280)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18468),9296)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18480),9312)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18492),9328)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18504),9344)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18516),9360)|0);
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18864]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18864)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 18528;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((18696)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18528,9376)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18540),9404)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18552),9432)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18564),9464)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18576),9504)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18588),9540)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18600),9568)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18612),9604)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18624),9620)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18636),9636)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18648),9652)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18660),9668)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18672),9684)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((18684),9700)|0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 7)&-1;
  HEAP32[$__w>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 12)&-1;
  HEAP32[$__m>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i138 = 0, $__einp_$i$i$i$i53 = 0, $__einp_$i$i107 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i159 = 0, $__einp_$i$i4$i$i74 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i137 = 0, $__ninp_$i$i$i$i52 = 0, $__ninp_$i$i106 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i158 = 0, $__ninp_$i$i3$i$i73 = 0, $__opt$0 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i143 = 0, $call$i$i$i$i58 = 0, $call$i$i111 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i164 = 0, $call$i$i9$i$i79 = 0, $call$i119 = 0, $call$i122 = 0, $call$i37 = 0, $call$i40 = 0, $call$i43 = 0, $call$i46 = 0, $call$i49 = 0;
 var $call$i94 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i145 = 0, $call3$i$i$i$i60 = 0, $call3$i$i$i148 = 0, $call3$i$i$i63 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i166 = 0, $call3$i$i11$i$i81 = 0, $call3$i$i113 = 0, $call3$i14$i$i = 0, $call3$i14$i$i169 = 0, $call3$i14$i$i84 = 0, $call4$i$i$i = 0, $call4$i$i$i149 = 0, $call4$i$i$i64 = 0, $call4$i15$i$i = 0;
 var $call4$i15$i$i170 = 0, $call4$i15$i$i85 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i139 = 0, $cmp$i$i$i$i54 = 0, $cmp$i$i108 = 0, $cmp$i$i126 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i160 = 0, $cmp$i$i5$i$i75 = 0, $cmp$i$i91 = 0, $cmp$i$i98 = 0, $cmp17 = 0, $cmp2 = 0, $cmp30 = 0, $cmp49 = 0, $cmp5 = 0, $cmp7 = 0, $incdec$ptr = 0;
 var $incdec$ptr$i$i = 0, $incdec$ptr$i$i131 = 0, $incdec$ptr16 = 0, $incdec$ptr25 = 0, $incdec$ptr52 = 0, $or = 0, $or$cond = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i147 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i115 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i168 = 0, $retval$0$i$i13$i$i83 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i = 0, $tobool$i$i$i136 = 0, $tobool$i$i$i51 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i156 = 0, $tobool$i2$i$i71 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i142 = 0, $vfn$i$i$i$i57 = 0, $vfn$i$i100 = 0, $vfn$i$i110 = 0, $vfn$i$i128 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i163 = 0, $vfn$i$i8$i$i78 = 0, $vfn$i118 = 0, $vfn$i121 = 0, $vfn$i39 = 0, $vfn$i42 = 0, $vfn$i45 = 0;
 var $vfn$i48 = 0, $vfn$i93 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i141 = 0, $vtable$i$i$i$i56 = 0, $vtable$i$i109 = 0, $vtable$i$i127 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i162 = 0, $vtable$i$i7$i$i77 = 0, $vtable$i$i99 = 0, $vtable$i117 = 0, $vtable$i120 = 0, $vtable$i38 = 0, $vtable$i41 = 0, $vtable$i44 = 0, $vtable$i47 = 0;
 var $vtable$i92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp23$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp,21060)|0);
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__err>>2] = 0;
 $0 = 0;$__fmtb$addr$0 = $__fmtb;
 L1: while(1) {
  $cmp = ($__fmtb$addr$0|0)!=($__fmte|0);
  $cmp2 = ($0|0)==(0);
  $or$cond = $cmp & $cmp2;
  $1 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   $59 = $1;
   break;
  }
  $tobool$i$i$i = ($1|0)==(0|0);
  $2 = $1;
  if ($tobool$i$i$i) {
   $20 = $2;$47 = 0;$70 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($1)) + 12|0);
   $3 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($1)) + 16|0);
   $4 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($3|0)==($4|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$1>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $5 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$5 & 511]($1)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $6 = HEAP32[$3>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($6)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $20 = 0;$47 = 0;$70 = 1;
   } else {
    $20 = $2;$47 = $1;$70 = 0;
   }
  }
  $7 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($7|0)==(0|0);
  $8 = $7;
  do {
   if ($tobool$i2$i$i) {
    $$ph = $8;
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($7)) + 12|0);
    $9 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($7)) + 16|0);
    $10 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($9|0)==($10|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$7>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $11 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$11 & 511]($7)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $12 = HEAP32[$9>>2]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($12)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     $$ph = 0;
     label = 15;
     break;
    } else {
     if ($70) {
      $21 = $8;$71 = $7;
      break;
     } else {
      label = 60;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($70) {
    label = 60;
    break;
   } else {
    $21 = $$ph;$71 = 0;
   }
  }
  $13 = HEAP32[$__fmtb$addr$0>>2]|0;
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 52|0);
  $14 = HEAP32[$vfn$i>>2]|0;
  $call$i37 = (FUNCTION_TABLE_iiii[$14 & 511]($call$i,$13,0)|0);
  $cmp5 = ($call$i37<<24>>24)==(37);
  L24: do {
   if ($cmp5) {
    $incdec$ptr = ((($__fmtb$addr$0)) + 4|0);
    $cmp7 = ($incdec$ptr|0)==($__fmte|0);
    if ($cmp7) {
     label = 60;
     break L1;
    }
    $15 = HEAP32[$incdec$ptr>>2]|0;
    $vtable$i38 = HEAP32[$call$i>>2]|0;
    $vfn$i39 = ((($vtable$i38)) + 52|0);
    $16 = HEAP32[$vfn$i39>>2]|0;
    $call$i40 = (FUNCTION_TABLE_iiii[$16 & 511]($call$i,$15,0)|0);
    switch ($call$i40<<24>>24) {
    case 48: case 69:  {
     $incdec$ptr16 = ((($__fmtb$addr$0)) + 8|0);
     $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
     if ($cmp17) {
      label = 60;
      break L1;
     }
     $17 = HEAP32[$incdec$ptr16>>2]|0;
     $vtable$i41 = HEAP32[$call$i>>2]|0;
     $vfn$i42 = ((($vtable$i41)) + 52|0);
     $18 = HEAP32[$vfn$i42>>2]|0;
     $call$i43 = (FUNCTION_TABLE_iiii[$18 & 511]($call$i,$17,0)|0);
     $22 = $incdec$ptr;$__cmd$0 = $call$i43;$__opt$0 = $call$i40;
     break;
    }
    default: {
     $22 = $__fmtb$addr$0;$__cmd$0 = $call$i40;$__opt$0 = 0;
    }
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 36|0);
    $19 = HEAP32[$vfn>>2]|0;
    HEAP32[$agg$tmp>>2] = $20;
    HEAP32[$agg$tmp23>>2] = $21;
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
    ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;
    $call24 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $call24;
    $incdec$ptr25 = ((($22)) + 8|0);
    $__fmtb$addr$4 = $incdec$ptr25;
   } else {
    $23 = HEAP32[$__fmtb$addr$0>>2]|0;
    $vtable$i44 = HEAP32[$call$i>>2]|0;
    $vfn$i45 = ((($vtable$i44)) + 12|0);
    $24 = HEAP32[$vfn$i45>>2]|0;
    $call$i46 = (FUNCTION_TABLE_iiii[$24 & 511]($call$i,8192,$23)|0);
    if (!($call$i46)) {
     $__ninp_$i$i106 = ((($47)) + 12|0);
     $48 = HEAP32[$__ninp_$i$i106>>2]|0;
     $__einp_$i$i107 = ((($47)) + 16|0);
     $49 = HEAP32[$__einp_$i$i107>>2]|0;
     $cmp$i$i108 = ($48|0)==($49|0);
     if ($cmp$i$i108) {
      $vtable$i$i109 = HEAP32[$47>>2]|0;
      $vfn$i$i110 = ((($vtable$i$i109)) + 36|0);
      $50 = HEAP32[$vfn$i$i110>>2]|0;
      $call$i$i111 = (FUNCTION_TABLE_ii[$50 & 511]($47)|0);
      $retval$0$i$i115 = $call$i$i111;
     } else {
      $51 = HEAP32[$48>>2]|0;
      $call3$i$i113 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($51)|0);
      $retval$0$i$i115 = $call3$i$i113;
     }
     $vtable$i117 = HEAP32[$call$i>>2]|0;
     $vfn$i118 = ((($vtable$i117)) + 28|0);
     $52 = HEAP32[$vfn$i118>>2]|0;
     $call$i119 = (FUNCTION_TABLE_iii[$52 & 511]($call$i,$retval$0$i$i115)|0);
     $53 = HEAP32[$__fmtb$addr$0>>2]|0;
     $vtable$i120 = HEAP32[$call$i>>2]|0;
     $vfn$i121 = ((($vtable$i120)) + 28|0);
     $54 = HEAP32[$vfn$i121>>2]|0;
     $call$i122 = (FUNCTION_TABLE_iii[$54 & 511]($call$i,$53)|0);
     $cmp49 = ($call$i119|0)==($call$i122|0);
     if (!($cmp49)) {
      HEAP32[$__err>>2] = 4;
      $__fmtb$addr$4 = $__fmtb$addr$0;
      break;
     }
     $55 = HEAP32[$__ninp_$i$i106>>2]|0;
     $56 = HEAP32[$__einp_$i$i107>>2]|0;
     $cmp$i$i126 = ($55|0)==($56|0);
     if ($cmp$i$i126) {
      $vtable$i$i127 = HEAP32[$47>>2]|0;
      $vfn$i$i128 = ((($vtable$i$i127)) + 40|0);
      $57 = HEAP32[$vfn$i$i128>>2]|0;
      (FUNCTION_TABLE_ii[$57 & 511]($47)|0);
     } else {
      $incdec$ptr$i$i131 = ((($55)) + 4|0);
      HEAP32[$__ninp_$i$i106>>2] = $incdec$ptr$i$i131;
      $58 = HEAP32[$55>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($58)|0);
     }
     $incdec$ptr52 = ((($__fmtb$addr$0)) + 4|0);
     $__fmtb$addr$4 = $incdec$ptr52;
     break;
    }
    $__fmtb$addr$0$pn = $__fmtb$addr$0;
    while(1) {
     $__fmtb$addr$3 = ((($__fmtb$addr$0$pn)) + 4|0);
     $cmp30 = ($__fmtb$addr$3|0)==($__fmte|0);
     if ($cmp30) {
      $__fmtb$addr$3$lcssa = $__fmte;
      break;
     }
     $25 = HEAP32[$__fmtb$addr$3>>2]|0;
     $vtable$i47 = HEAP32[$call$i>>2]|0;
     $vfn$i48 = ((($vtable$i47)) + 12|0);
     $26 = HEAP32[$vfn$i48>>2]|0;
     $call$i49 = (FUNCTION_TABLE_iiii[$26 & 511]($call$i,8192,$25)|0);
     if ($call$i49) {
      $__fmtb$addr$0$pn = $__fmtb$addr$3;
     } else {
      $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
      break;
     }
    }
    $27 = $47;$32 = $71;
    while(1) {
     $tobool$i$i$i51 = ($27|0)==(0|0);
     if ($tobool$i$i$i51) {
      $37 = 0;$72 = 1;
     } else {
      $__ninp_$i$i$i$i52 = ((($27)) + 12|0);
      $28 = HEAP32[$__ninp_$i$i$i$i52>>2]|0;
      $__einp_$i$i$i$i53 = ((($27)) + 16|0);
      $29 = HEAP32[$__einp_$i$i$i$i53>>2]|0;
      $cmp$i$i$i$i54 = ($28|0)==($29|0);
      if ($cmp$i$i$i$i54) {
       $vtable$i$i$i$i56 = HEAP32[$27>>2]|0;
       $vfn$i$i$i$i57 = ((($vtable$i$i$i$i56)) + 36|0);
       $30 = HEAP32[$vfn$i$i$i$i57>>2]|0;
       $call$i$i$i$i58 = (FUNCTION_TABLE_ii[$30 & 511]($27)|0);
       $retval$0$i$i$i$i62 = $call$i$i$i$i58;
      } else {
       $31 = HEAP32[$28>>2]|0;
       $call3$i$i$i$i60 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
       $retval$0$i$i$i$i62 = $call3$i$i$i$i60;
      }
      $call3$i$i$i63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i62,$call3$i$i$i63)|0);
      if ($call4$i$i$i64) {
       HEAP32[$__b>>2] = 0;
       $37 = 0;$72 = 1;
      } else {
       $37 = $27;$72 = 0;
      }
     }
     $tobool$i2$i$i71 = ($32|0)==(0|0);
     do {
      if ($tobool$i2$i$i71) {
       label = 40;
      } else {
       $__ninp_$i$i3$i$i73 = ((($32)) + 12|0);
       $33 = HEAP32[$__ninp_$i$i3$i$i73>>2]|0;
       $__einp_$i$i4$i$i74 = ((($32)) + 16|0);
       $34 = HEAP32[$__einp_$i$i4$i$i74>>2]|0;
       $cmp$i$i5$i$i75 = ($33|0)==($34|0);
       if ($cmp$i$i5$i$i75) {
        $vtable$i$i7$i$i77 = HEAP32[$32>>2]|0;
        $vfn$i$i8$i$i78 = ((($vtable$i$i7$i$i77)) + 36|0);
        $35 = HEAP32[$vfn$i$i8$i$i78>>2]|0;
        $call$i$i9$i$i79 = (FUNCTION_TABLE_ii[$35 & 511]($32)|0);
        $retval$0$i$i13$i$i83 = $call$i$i9$i$i79;
       } else {
        $36 = HEAP32[$33>>2]|0;
        $call3$i$i11$i$i81 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($36)|0);
        $retval$0$i$i13$i$i83 = $call3$i$i11$i$i81;
       }
       $call3$i14$i$i84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i83,$call3$i14$i$i84)|0);
       if ($call4$i15$i$i85) {
        HEAP32[$__e>>2] = 0;
        label = 40;
        break;
       } else {
        if ($72) {
         $73 = $32;
         break;
        } else {
         $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
         break L24;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      label = 0;
      if ($72) {
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L24;
      } else {
       $73 = 0;
      }
     }
     $__ninp_$i$i = ((($37)) + 12|0);
     $38 = HEAP32[$__ninp_$i$i>>2]|0;
     $__einp_$i$i = ((($37)) + 16|0);
     $39 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i91 = ($38|0)==($39|0);
     if ($cmp$i$i91) {
      $vtable$i$i = HEAP32[$37>>2]|0;
      $vfn$i$i = ((($vtable$i$i)) + 36|0);
      $40 = HEAP32[$vfn$i$i>>2]|0;
      $call$i$i = (FUNCTION_TABLE_ii[$40 & 511]($37)|0);
      $retval$0$i$i = $call$i$i;
     } else {
      $41 = HEAP32[$38>>2]|0;
      $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
      $retval$0$i$i = $call3$i$i;
     }
     $vtable$i92 = HEAP32[$call$i>>2]|0;
     $vfn$i93 = ((($vtable$i92)) + 12|0);
     $42 = HEAP32[$vfn$i93>>2]|0;
     $call$i94 = (FUNCTION_TABLE_iiii[$42 & 511]($call$i,8192,$retval$0$i$i)|0);
     if (!($call$i94)) {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     }
     $43 = HEAP32[$__ninp_$i$i>>2]|0;
     $44 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i98 = ($43|0)==($44|0);
     if ($cmp$i$i98) {
      $vtable$i$i99 = HEAP32[$37>>2]|0;
      $vfn$i$i100 = ((($vtable$i$i99)) + 40|0);
      $45 = HEAP32[$vfn$i$i100>>2]|0;
      (FUNCTION_TABLE_ii[$45 & 511]($37)|0);
     } else {
      $incdec$ptr$i$i = ((($43)) + 4|0);
      HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
      $46 = HEAP32[$43>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     }
     $27 = $37;$32 = $73;
    }
   }
  } while(0);
  $$pre = HEAP32[$__err>>2]|0;
  $0 = $$pre;$__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label|0) == 60) {
  HEAP32[$__err>>2] = 4;
  $59 = $47;
 }
 $tobool$i$i$i136 = ($59|0)==(0|0);
 if ($tobool$i$i$i136) {
  $74 = 1;$retval$sroa$0$0$copyload = 0;
 } else {
  $__ninp_$i$i$i$i137 = ((($59)) + 12|0);
  $60 = HEAP32[$__ninp_$i$i$i$i137>>2]|0;
  $__einp_$i$i$i$i138 = ((($59)) + 16|0);
  $61 = HEAP32[$__einp_$i$i$i$i138>>2]|0;
  $cmp$i$i$i$i139 = ($60|0)==($61|0);
  if ($cmp$i$i$i$i139) {
   $vtable$i$i$i$i141 = HEAP32[$59>>2]|0;
   $vfn$i$i$i$i142 = ((($vtable$i$i$i$i141)) + 36|0);
   $62 = HEAP32[$vfn$i$i$i$i142>>2]|0;
   $call$i$i$i$i143 = (FUNCTION_TABLE_ii[$62 & 511]($59)|0);
   $retval$0$i$i$i$i147 = $call$i$i$i$i143;
  } else {
   $63 = HEAP32[$60>>2]|0;
   $call3$i$i$i$i145 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
   $retval$0$i$i$i$i147 = $call3$i$i$i$i145;
  }
  $call3$i$i$i148 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i149 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i147,$call3$i$i$i148)|0);
  if ($call4$i$i$i149) {
   HEAP32[$__b>>2] = 0;
   $74 = 1;$retval$sroa$0$0$copyload = 0;
  } else {
   $74 = 0;$retval$sroa$0$0$copyload = $59;
  }
 }
 $64 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i156 = ($64|0)==(0|0);
 do {
  if ($tobool$i2$i$i156) {
   label = 73;
  } else {
   $__ninp_$i$i3$i$i158 = ((($64)) + 12|0);
   $65 = HEAP32[$__ninp_$i$i3$i$i158>>2]|0;
   $__einp_$i$i4$i$i159 = ((($64)) + 16|0);
   $66 = HEAP32[$__einp_$i$i4$i$i159>>2]|0;
   $cmp$i$i5$i$i160 = ($65|0)==($66|0);
   if ($cmp$i$i5$i$i160) {
    $vtable$i$i7$i$i162 = HEAP32[$64>>2]|0;
    $vfn$i$i8$i$i163 = ((($vtable$i$i7$i$i162)) + 36|0);
    $67 = HEAP32[$vfn$i$i8$i$i163>>2]|0;
    $call$i$i9$i$i164 = (FUNCTION_TABLE_ii[$67 & 511]($64)|0);
    $retval$0$i$i13$i$i168 = $call$i$i9$i$i164;
   } else {
    $68 = HEAP32[$65>>2]|0;
    $call3$i$i11$i$i166 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($68)|0);
    $retval$0$i$i13$i$i168 = $call3$i$i11$i$i166;
   }
   $call3$i14$i$i169 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i170 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i168,$call3$i14$i$i169)|0);
   if ($call4$i15$i$i170) {
    HEAP32[$__e>>2] = 0;
    label = 73;
    break;
   } else {
    if ($74) {
     break;
    } else {
     label = 75;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($74) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $69 = HEAP32[$__err>>2]|0;
  $or = $69 | 2;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(31);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(12);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i17 = 0;
 var $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__einp_$i$i6 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i16 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__ninp_$i$i5 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i22 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i43 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0;
 var $call3$i$i11$i$i = 0, $call3$i$i11$i$i45 = 0, $call3$i14$i$i = 0, $call3$i14$i$i48 = 0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i49 = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp$i$i7 = 0, $incdec$ptr$i$i = 0, $or = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i31 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0;
 var $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i47 = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i21 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vfn$i$i9 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i20 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i41 = 0;
 var $vtable$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $32 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($0)) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($0)) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $4 = HEAP32[$1>>2]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $32 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $32 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($5)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($5)) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $9 = HEAP32[$6>>2]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($32) {
      $33 = $5;
      break;
     } else {
      $26 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($32) {
    $26 = 0;
    break;
   } else {
    $33 = 0;
   }
  }
  $10 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = ((($10)) + 12|0);
  $11 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($10)) + 16|0);
  $12 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($11|0)==($12|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$10>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $13 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $14 = HEAP32[$11>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $vtable$i = HEAP32[$__ct>>2]|0;
  $vfn$i = ((($vtable$i)) + 12|0);
  $15 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiii[$15 & 511]($__ct,8192,$retval$0$i$i)|0);
  if (!($call$i)) {
   $26 = $33;
   break;
  }
  $16 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i5 = ((($16)) + 12|0);
  $17 = HEAP32[$__ninp_$i$i5>>2]|0;
  $__einp_$i$i6 = ((($16)) + 16|0);
  $18 = HEAP32[$__einp_$i$i6>>2]|0;
  $cmp$i$i7 = ($17|0)==($18|0);
  if ($cmp$i$i7) {
   $vtable$i$i8 = HEAP32[$16>>2]|0;
   $vfn$i$i9 = ((($vtable$i$i8)) + 40|0);
   $19 = HEAP32[$vfn$i$i9>>2]|0;
   (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
  } else {
   $incdec$ptr$i$i = ((($17)) + 4|0);
   HEAP32[$__ninp_$i$i5>>2] = $incdec$ptr$i$i;
   $20 = HEAP32[$17>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($20)|0);
  }
 }
 $21 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i15 = ($21|0)==(0|0);
 do {
  if ($tobool$i$i$i15) {
   $34 = 1;
  } else {
   $__ninp_$i$i$i$i16 = ((($21)) + 12|0);
   $22 = HEAP32[$__ninp_$i$i$i$i16>>2]|0;
   $__einp_$i$i$i$i17 = ((($21)) + 16|0);
   $23 = HEAP32[$__einp_$i$i$i$i17>>2]|0;
   $cmp$i$i$i$i18 = ($22|0)==($23|0);
   if ($cmp$i$i$i$i18) {
    $vtable$i$i$i$i20 = HEAP32[$21>>2]|0;
    $vfn$i$i$i$i21 = ((($vtable$i$i$i$i20)) + 36|0);
    $24 = HEAP32[$vfn$i$i$i$i21>>2]|0;
    $call$i$i$i$i22 = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
    $retval$0$i$i$i$i26 = $call$i$i$i$i22;
   } else {
    $25 = HEAP32[$22>>2]|0;
    $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
    $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
   }
   $call3$i$i$i27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i28 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
   if ($call4$i$i$i28) {
    HEAP32[$__b>>2] = 0;
    $34 = 1;
    break;
   } else {
    $$pre$i$i$i30 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i31 = ($$pre$i$i$i30|0)==(0|0);
    $34 = $phitmp$i$i$i31;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i35 = ($26|0)==(0|0);
 do {
  if ($tobool$i2$i$i35) {
   label = 38;
  } else {
   $__ninp_$i$i3$i$i37 = ((($26)) + 12|0);
   $27 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
   $__einp_$i$i4$i$i38 = ((($26)) + 16|0);
   $28 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
   $cmp$i$i5$i$i39 = ($27|0)==($28|0);
   if ($cmp$i$i5$i$i39) {
    $vtable$i$i7$i$i41 = HEAP32[$26>>2]|0;
    $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
    $29 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
    $call$i$i9$i$i43 = (FUNCTION_TABLE_ii[$29 & 511]($26)|0);
    $retval$0$i$i13$i$i47 = $call$i$i9$i$i43;
   } else {
    $30 = HEAP32[$27>>2]|0;
    $call3$i$i11$i$i45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($30)|0);
    $retval$0$i$i13$i$i47 = $call3$i$i11$i$i45;
   }
   $call3$i14$i$i48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i47,$call3$i14$i$i48)|0);
   if ($call4$i15$i$i49) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   } else {
    if ($34) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($34) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $31 = HEAP32[$__err>>2]|0;
  $or = $31 | 2;
  HEAP32[$__err>>2] = $or;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i12 = 0, $__size_$i2$i = 0, $__size_$i2$i14 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i18 = 0, $conv$i$i = 0, $conv$i$i16 = 0, $or = 0, $or$cond = 0, $or$cond20 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i13 = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 511]($add$ptr)|0);
 $1 = ((($call)) + 8|0);
 $__size_$i$i = ((($1)) + 3|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i2$i = ((($call)) + 4|0);
  $3 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $3;
 } else {
  $conv$i$i = $2&255;
  $cond$i = $conv$i$i;
 }
 $4 = ((($call)) + 20|0);
 $__size_$i$i12 = ((($4)) + 3|0);
 $5 = HEAP8[$__size_$i$i12>>0]|0;
 $tobool$i$i13 = ($5<<24>>24)<(0);
 if ($tobool$i$i13) {
  $__size_$i2$i14 = ((($call)) + 16|0);
  $6 = HEAP32[$__size_$i2$i14>>2]|0;
  $cond$i18 = $6;
 } else {
  $conv$i$i16 = $5&255;
  $cond$i18 = $conv$i$i16;
 }
 $add = (0 - ($cond$i18))|0;
 $cmp = ($cond$i|0)==($add|0);
 do {
  if ($cmp) {
   $7 = HEAP32[$__err>>2]|0;
   $or = $7 | 4;
   HEAP32[$__err>>2] = $or;
  } else {
   $8 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $8;
   $add$ptr5 = ((($call)) + 24|0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call6 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
   $sub$ptr$lhs$cast = $call6;
   $sub$ptr$rhs$cast = $call;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $9 = ($sub$ptr$sub|0)==(0);
   $10 = HEAP32[$__h>>2]|0;
   $cmp8 = ($10|0)==(12);
   $or$cond = $cmp8 & $9;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $11 = ($sub$ptr$sub|0)==(12);
   $cmp12 = ($10|0)<(12);
   $or$cond20 = $cmp12 & $11;
   if ($or$cond20) {
    $add14 = (($10) + 12)|0;
    HEAP32[$__h>>2] = $add14;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $cmp4 = 0, $spec$select = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $cmp = ($call|0)<(69);
  if ($cmp) {
   $add = (($call) + 2000)|0;
   $__t$0 = $add;
  } else {
   $cmp4 = ($call|0)<(100);
   $add6 = (($call) + 1900)|0;
   $spec$select = $cmp4 ? $add6 : $call;
   $__t$0 = $spec$select;
  }
  $sub = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $sub = (($call) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i19 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i40 = 0, $__einp_$i$i8 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i18 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i39 = 0, $__ninp_$i$i7 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i24 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i45 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i26 = 0;
 var $call3$i$i$i29 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i47 = 0, $call3$i14$i$i = 0, $call3$i14$i$i50 = 0, $call4$i$i$i = 0, $call4$i$i$i30 = 0, $call4$i15$i$i = 0, $call4$i15$i$i51 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i5 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i41 = 0, $cmp$i$i9 = 0, $incdec$ptr$i$i = 0, $or = 0, $or5 = 0, $or9 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i33 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $tobool$i$i$i = 0, $tobool$i$i$i17 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i37 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i23 = 0, $vfn$i$i11 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i44 = 0, $vtable$i = 0, $vtable$i$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i$i$i22 = 0, $vtable$i$i10 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $34 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $34 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $34 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($34) {
     $28 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($34) {
   label = 16;
  } else {
   $28 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i5 = ($12|0)==($13|0);
   if ($cmp$i$i5) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP32[$12>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 52|0);
   $16 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$16 & 511]($__ct,$retval$0$i$i,0)|0);
   $cmp = ($call$i<<24>>24)==(37);
   if (!($cmp)) {
    $17 = HEAP32[$__err>>2]|0;
    $or5 = $17 | 4;
    HEAP32[$__err>>2] = $or5;
    break;
   }
   $18 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i7 = ((($18)) + 12|0);
   $19 = HEAP32[$__ninp_$i$i7>>2]|0;
   $__einp_$i$i8 = ((($18)) + 16|0);
   $20 = HEAP32[$__einp_$i$i8>>2]|0;
   $cmp$i$i9 = ($19|0)==($20|0);
   if ($cmp$i$i9) {
    $vtable$i$i10 = HEAP32[$18>>2]|0;
    $vfn$i$i11 = ((($vtable$i$i10)) + 40|0);
    $21 = HEAP32[$vfn$i$i11>>2]|0;
    (FUNCTION_TABLE_ii[$21 & 511]($18)|0);
   } else {
    $incdec$ptr$i$i = ((($19)) + 4|0);
    HEAP32[$__ninp_$i$i7>>2] = $incdec$ptr$i$i;
    $22 = HEAP32[$19>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($22)|0);
   }
   $23 = HEAP32[$__b>>2]|0;
   $tobool$i$i$i17 = ($23|0)==(0|0);
   do {
    if ($tobool$i$i$i17) {
     $35 = 1;
    } else {
     $__ninp_$i$i$i$i18 = ((($23)) + 12|0);
     $24 = HEAP32[$__ninp_$i$i$i$i18>>2]|0;
     $__einp_$i$i$i$i19 = ((($23)) + 16|0);
     $25 = HEAP32[$__einp_$i$i$i$i19>>2]|0;
     $cmp$i$i$i$i20 = ($24|0)==($25|0);
     if ($cmp$i$i$i$i20) {
      $vtable$i$i$i$i22 = HEAP32[$23>>2]|0;
      $vfn$i$i$i$i23 = ((($vtable$i$i$i$i22)) + 36|0);
      $26 = HEAP32[$vfn$i$i$i$i23>>2]|0;
      $call$i$i$i$i24 = (FUNCTION_TABLE_ii[$26 & 511]($23)|0);
      $retval$0$i$i$i$i28 = $call$i$i$i$i24;
     } else {
      $27 = HEAP32[$24>>2]|0;
      $call3$i$i$i$i26 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($27)|0);
      $retval$0$i$i$i$i28 = $call3$i$i$i$i26;
     }
     $call3$i$i$i29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i$i$i30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28,$call3$i$i$i29)|0);
     if ($call4$i$i$i30) {
      HEAP32[$__b>>2] = 0;
      $35 = 1;
      break;
     } else {
      $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i33 = ($$pre$i$i$i32|0)==(0|0);
      $35 = $phitmp$i$i$i33;
      break;
     }
    }
   } while(0);
   $tobool$i2$i$i37 = ($28|0)==(0|0);
   do {
    if ($tobool$i2$i$i37) {
     label = 38;
    } else {
     $__ninp_$i$i3$i$i39 = ((($28)) + 12|0);
     $29 = HEAP32[$__ninp_$i$i3$i$i39>>2]|0;
     $__einp_$i$i4$i$i40 = ((($28)) + 16|0);
     $30 = HEAP32[$__einp_$i$i4$i$i40>>2]|0;
     $cmp$i$i5$i$i41 = ($29|0)==($30|0);
     if ($cmp$i$i5$i$i41) {
      $vtable$i$i7$i$i43 = HEAP32[$28>>2]|0;
      $vfn$i$i8$i$i44 = ((($vtable$i$i7$i$i43)) + 36|0);
      $31 = HEAP32[$vfn$i$i8$i$i44>>2]|0;
      $call$i$i9$i$i45 = (FUNCTION_TABLE_ii[$31 & 511]($28)|0);
      $retval$0$i$i13$i$i49 = $call$i$i9$i$i45;
     } else {
      $32 = HEAP32[$29>>2]|0;
      $call3$i$i11$i$i47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($32)|0);
      $retval$0$i$i13$i$i49 = $call3$i$i11$i$i47;
     }
     $call3$i14$i$i50 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i51 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49,$call3$i14$i$i50)|0);
     if ($call4$i15$i$i51) {
      HEAP32[$__e>>2] = 0;
      label = 38;
      break;
     } else {
      if ($35) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($35)) {
     break;
    }
   }
   $33 = HEAP32[$__err>>2]|0;
   $or9 = $33 | 2;
   HEAP32[$__err>>2] = $or9;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i120 = 0, $$pre$i$i$i49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i107 = 0, $__einp_$i$i$i$i36 = 0, $__einp_$i$i25 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i128 = 0, $__einp_$i$i4$i$i57 = 0, $__einp_$i$i76 = 0, $__einp_$i$i94 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0;
 var $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i106 = 0, $__ninp_$i$i$i$i35 = 0, $__ninp_$i$i24 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i127 = 0, $__ninp_$i$i3$i$i56 = 0, $__ninp_$i$i75 = 0, $__ninp_$i$i93 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i112 = 0, $call$i$i$i$i41 = 0, $call$i$i80 = 0, $call$i$i9$i$i = 0;
 var $call$i$i9$i$i133 = 0, $call$i$i9$i$i62 = 0, $call$i22 = 0, $call$i88 = 0, $call$i91 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i114 = 0, $call3$i$i$i$i43 = 0, $call3$i$i$i117 = 0, $call3$i$i$i46 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i135 = 0, $call3$i$i11$i$i64 = 0, $call3$i$i82 = 0, $call3$i14$i$i = 0, $call3$i14$i$i138 = 0, $call3$i14$i$i67 = 0, $call4$i$i$i = 0;
 var $call4$i$i$i118 = 0, $call4$i$i$i47 = 0, $call4$i15$i$i = 0, $call4$i15$i$i139 = 0, $call4$i15$i$i68 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i108 = 0, $cmp$i$i$i$i37 = 0, $cmp$i$i19 = 0, $cmp$i$i26 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i129 = 0, $cmp$i$i5$i$i58 = 0, $cmp$i$i77 = 0, $cmp$i$i95 = 0, $conv = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i100 = 0;
 var $mul = 0, $or = 0, $or20 = 0, $or4 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i121 = 0, $phitmp$i$i$i50 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i116 = 0, $retval$0$i$i$i$i45 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i137 = 0, $retval$0$i$i13$i$i66 = 0, $retval$0$i$i84 = 0, $retval$2 = 0, $tobool$i$i$i = 0, $tobool$i$i$i105 = 0, $tobool$i$i$i34 = 0, $tobool$i2$i$i = 0;
 var $tobool$i2$i$i125 = 0, $tobool$i2$i$i54 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i111 = 0, $vfn$i$i$i$i40 = 0, $vfn$i$i28 = 0, $vfn$i$i79 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i132 = 0, $vfn$i$i8$i$i61 = 0, $vfn$i$i97 = 0, $vfn$i21 = 0, $vfn$i87 = 0, $vfn$i90 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i110 = 0;
 var $vtable$i$i$i$i39 = 0, $vtable$i$i27 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i131 = 0, $vtable$i$i7$i$i60 = 0, $vtable$i$i78 = 0, $vtable$i$i96 = 0, $vtable$i20 = 0, $vtable$i86 = 0, $vtable$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $60 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $60 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $60 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($60) {
     $61 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($60) {
   label = 16;
  } else {
   $61 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
   $retval$2 = 0;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i19 = ($12|0)==($13|0);
   if ($cmp$i$i19) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP32[$12>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 12|0);
   $16 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$16 & 511]($__ct,2048,$retval$0$i$i)|0);
   if (!($call$i)) {
    $17 = HEAP32[$__err>>2]|0;
    $or4 = $17 | 4;
    HEAP32[$__err>>2] = $or4;
    $retval$2 = 0;
    break;
   }
   $vtable$i20 = HEAP32[$__ct>>2]|0;
   $vfn$i21 = ((($vtable$i20)) + 52|0);
   $18 = HEAP32[$vfn$i21>>2]|0;
   $call$i22 = (FUNCTION_TABLE_iiii[$18 & 511]($__ct,$retval$0$i$i,0)|0);
   $conv = $call$i22 << 24 >> 24;
   $19 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i24 = ((($19)) + 12|0);
   $20 = HEAP32[$__ninp_$i$i24>>2]|0;
   $__einp_$i$i25 = ((($19)) + 16|0);
   $21 = HEAP32[$__einp_$i$i25>>2]|0;
   $cmp$i$i26 = ($20|0)==($21|0);
   if ($cmp$i$i26) {
    $vtable$i$i27 = HEAP32[$19>>2]|0;
    $vfn$i$i28 = ((($vtable$i$i27)) + 40|0);
    $22 = HEAP32[$vfn$i$i28>>2]|0;
    (FUNCTION_TABLE_ii[$22 & 511]($19)|0);
   } else {
    $incdec$ptr$i$i = ((($20)) + 4|0);
    HEAP32[$__ninp_$i$i24>>2] = $incdec$ptr$i$i;
    $23 = HEAP32[$20>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($23)|0);
   }
   $29 = $61;$62 = $61;$__n$addr$0$in = $__n;$__r$0$in = $conv;
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
    $24 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i34 = ($24|0)==(0|0);
    do {
     if ($tobool$i$i$i34) {
      $35 = 1;
     } else {
      $__ninp_$i$i$i$i35 = ((($24)) + 12|0);
      $25 = HEAP32[$__ninp_$i$i$i$i35>>2]|0;
      $__einp_$i$i$i$i36 = ((($24)) + 16|0);
      $26 = HEAP32[$__einp_$i$i$i$i36>>2]|0;
      $cmp$i$i$i$i37 = ($25|0)==($26|0);
      if ($cmp$i$i$i$i37) {
       $vtable$i$i$i$i39 = HEAP32[$24>>2]|0;
       $vfn$i$i$i$i40 = ((($vtable$i$i$i$i39)) + 36|0);
       $27 = HEAP32[$vfn$i$i$i$i40>>2]|0;
       $call$i$i$i$i41 = (FUNCTION_TABLE_ii[$27 & 511]($24)|0);
       $retval$0$i$i$i$i45 = $call$i$i$i$i41;
      } else {
       $28 = HEAP32[$25>>2]|0;
       $call3$i$i$i$i43 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($28)|0);
       $retval$0$i$i$i$i45 = $call3$i$i$i$i43;
      }
      $call3$i$i$i46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i45,$call3$i$i$i46)|0);
      if ($call4$i$i$i47) {
       HEAP32[$__b>>2] = 0;
       $35 = 1;
       break;
      } else {
       $$pre$i$i$i49 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i50 = ($$pre$i$i$i49|0)==(0|0);
       $35 = $phitmp$i$i$i50;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i54 = ($29|0)==(0|0);
    if ($tobool$i2$i$i54) {
     $36 = 1;$54 = $62;$63 = 0;
    } else {
     $__ninp_$i$i3$i$i56 = ((($29)) + 12|0);
     $30 = HEAP32[$__ninp_$i$i3$i$i56>>2]|0;
     $__einp_$i$i4$i$i57 = ((($29)) + 16|0);
     $31 = HEAP32[$__einp_$i$i4$i$i57>>2]|0;
     $cmp$i$i5$i$i58 = ($30|0)==($31|0);
     if ($cmp$i$i5$i$i58) {
      $vtable$i$i7$i$i60 = HEAP32[$29>>2]|0;
      $vfn$i$i8$i$i61 = ((($vtable$i$i7$i$i60)) + 36|0);
      $32 = HEAP32[$vfn$i$i8$i$i61>>2]|0;
      $call$i$i9$i$i62 = (FUNCTION_TABLE_ii[$32 & 511]($29)|0);
      $retval$0$i$i13$i$i66 = $call$i$i9$i$i62;
     } else {
      $33 = HEAP32[$30>>2]|0;
      $call3$i$i11$i$i64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($33)|0);
      $retval$0$i$i13$i$i66 = $call3$i$i11$i$i64;
     }
     $call3$i14$i$i67 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i68 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i66,$call3$i14$i$i67)|0);
     if ($call4$i15$i$i68) {
      HEAP32[$__e>>2] = 0;
      $36 = 1;$54 = 0;$63 = 0;
     } else {
      $36 = 0;$54 = $62;$63 = $29;
     }
    }
    $34 = $35 ^ $36;
    $cmp = ($__n$addr$0$in|0)>(1);
    $37 = $cmp & $34;
    $38 = HEAP32[$__b>>2]|0;
    if (!($37)) {
     break;
    }
    $__ninp_$i$i75 = ((($38)) + 12|0);
    $39 = HEAP32[$__ninp_$i$i75>>2]|0;
    $__einp_$i$i76 = ((($38)) + 16|0);
    $40 = HEAP32[$__einp_$i$i76>>2]|0;
    $cmp$i$i77 = ($39|0)==($40|0);
    if ($cmp$i$i77) {
     $vtable$i$i78 = HEAP32[$38>>2]|0;
     $vfn$i$i79 = ((($vtable$i$i78)) + 36|0);
     $41 = HEAP32[$vfn$i$i79>>2]|0;
     $call$i$i80 = (FUNCTION_TABLE_ii[$41 & 511]($38)|0);
     $retval$0$i$i84 = $call$i$i80;
    } else {
     $42 = HEAP32[$39>>2]|0;
     $call3$i$i82 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
     $retval$0$i$i84 = $call3$i$i82;
    }
    $vtable$i86 = HEAP32[$__ct>>2]|0;
    $vfn$i87 = ((($vtable$i86)) + 12|0);
    $43 = HEAP32[$vfn$i87>>2]|0;
    $call$i88 = (FUNCTION_TABLE_iiii[$43 & 511]($__ct,2048,$retval$0$i$i84)|0);
    if (!($call$i88)) {
     $retval$2 = $__r$0;
     break L22;
    }
    $mul = ($__r$0*10)|0;
    $vtable$i89 = HEAP32[$__ct>>2]|0;
    $vfn$i90 = ((($vtable$i89)) + 52|0);
    $44 = HEAP32[$vfn$i90>>2]|0;
    $call$i91 = (FUNCTION_TABLE_iiii[$44 & 511]($__ct,$retval$0$i$i84,0)|0);
    $conv14 = $call$i91 << 24 >> 24;
    $add = (($mul) + ($conv14))|0;
    $45 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i93 = ((($45)) + 12|0);
    $46 = HEAP32[$__ninp_$i$i93>>2]|0;
    $__einp_$i$i94 = ((($45)) + 16|0);
    $47 = HEAP32[$__einp_$i$i94>>2]|0;
    $cmp$i$i95 = ($46|0)==($47|0);
    if ($cmp$i$i95) {
     $vtable$i$i96 = HEAP32[$45>>2]|0;
     $vfn$i$i97 = ((($vtable$i$i96)) + 40|0);
     $48 = HEAP32[$vfn$i$i97>>2]|0;
     (FUNCTION_TABLE_ii[$48 & 511]($45)|0);
    } else {
     $incdec$ptr$i$i100 = ((($46)) + 4|0);
     HEAP32[$__ninp_$i$i93>>2] = $incdec$ptr$i$i100;
     $49 = HEAP32[$46>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($49)|0);
    }
    $29 = $63;$62 = $54;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
   }
   $tobool$i$i$i105 = ($38|0)==(0|0);
   do {
    if ($tobool$i$i$i105) {
     $64 = 1;
    } else {
     $__ninp_$i$i$i$i106 = ((($38)) + 12|0);
     $50 = HEAP32[$__ninp_$i$i$i$i106>>2]|0;
     $__einp_$i$i$i$i107 = ((($38)) + 16|0);
     $51 = HEAP32[$__einp_$i$i$i$i107>>2]|0;
     $cmp$i$i$i$i108 = ($50|0)==($51|0);
     if ($cmp$i$i$i$i108) {
      $vtable$i$i$i$i110 = HEAP32[$38>>2]|0;
      $vfn$i$i$i$i111 = ((($vtable$i$i$i$i110)) + 36|0);
      $52 = HEAP32[$vfn$i$i$i$i111>>2]|0;
      $call$i$i$i$i112 = (FUNCTION_TABLE_ii[$52 & 511]($38)|0);
      $retval$0$i$i$i$i116 = $call$i$i$i$i112;
     } else {
      $53 = HEAP32[$50>>2]|0;
      $call3$i$i$i$i114 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($53)|0);
      $retval$0$i$i$i$i116 = $call3$i$i$i$i114;
     }
     $call3$i$i$i117 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i$i$i118 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i116,$call3$i$i$i117)|0);
     if ($call4$i$i$i118) {
      HEAP32[$__b>>2] = 0;
      $64 = 1;
      break;
     } else {
      $$pre$i$i$i120 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i121 = ($$pre$i$i$i120|0)==(0|0);
      $64 = $phitmp$i$i$i121;
      break;
     }
    }
   } while(0);
   $tobool$i2$i$i125 = ($54|0)==(0|0);
   do {
    if ($tobool$i2$i$i125) {
     label = 61;
    } else {
     $__ninp_$i$i3$i$i127 = ((($54)) + 12|0);
     $55 = HEAP32[$__ninp_$i$i3$i$i127>>2]|0;
     $__einp_$i$i4$i$i128 = ((($54)) + 16|0);
     $56 = HEAP32[$__einp_$i$i4$i$i128>>2]|0;
     $cmp$i$i5$i$i129 = ($55|0)==($56|0);
     if ($cmp$i$i5$i$i129) {
      $vtable$i$i7$i$i131 = HEAP32[$54>>2]|0;
      $vfn$i$i8$i$i132 = ((($vtable$i$i7$i$i131)) + 36|0);
      $57 = HEAP32[$vfn$i$i8$i$i132>>2]|0;
      $call$i$i9$i$i133 = (FUNCTION_TABLE_ii[$57 & 511]($54)|0);
      $retval$0$i$i13$i$i137 = $call$i$i9$i$i133;
     } else {
      $58 = HEAP32[$55>>2]|0;
      $call3$i$i11$i$i135 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($58)|0);
      $retval$0$i$i13$i$i137 = $call3$i$i11$i$i135;
     }
     $call3$i14$i$i138 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i139 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i137,$call3$i14$i$i138)|0);
     if ($call4$i15$i$i139) {
      HEAP32[$__e>>2] = 0;
      label = 61;
      break;
     } else {
      if ($64) {
       $retval$2 = $__r$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 61) {
    if (!($64)) {
     $retval$2 = $__r$0;
     break;
    }
   }
   $59 = HEAP32[$__err>>2]|0;
   $or20 = $59 | 2;
   HEAP32[$__err>>2] = $or20;
   $retval$2 = $__r$0;
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__eout_$i$i$i$i = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call2$i$i$i$i = 0, $call3$i$i$i = 0, $call4$i$i$i = 0, $call4$i$i$i$i = 0;
 var $cmp$i$i = 0, $cmp$i$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $retval$0$i$i$i$i = 0, $spec$select$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__nar = sp;
 $__ne = sp + 100|0;
 $add$ptr = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = ((($this)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $__first$addr$0$i$i = $__nar;$agg$tmp1$sroa$0$0$i = $3;
 while(1) {
  $cmp$i$i = ($__first$addr$0$i$i|0)==($2|0);
  if ($cmp$i$i) {
   break;
  }
  $4 = HEAP8[$__first$addr$0$i$i>>0]|0;
  $tobool$i$i$i = ($agg$tmp1$sroa$0$0$i|0)==(0|0);
  if ($tobool$i$i$i) {
   $agg$tmp1$sroa$0$1$i = 0;
  } else {
   $__nout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 24|0);
   $5 = HEAP32[$__nout_$i$i$i$i>>2]|0;
   $__eout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 28|0);
   $6 = HEAP32[$__eout_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($5|0)==($6|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$agg$tmp1$sroa$0$0$i>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 52|0);
    $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $call2$i$i$i$i = (FUNCTION_TABLE_iii[$7 & 511]($agg$tmp1$sroa$0$0$i,$call$i$i$i$i)|0);
    $retval$0$i$i$i$i = $call2$i$i$i$i;
   } else {
    $incdec$ptr$i$i$i$i = ((($5)) + 1|0);
    HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
    HEAP8[$5>>0] = $4;
    $call4$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call4$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   $spec$select$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
   $agg$tmp1$sroa$0$1$i = $spec$select$i;
  }
  $incdec$ptr$i$i = ((($__first$addr$0$i$i)) + 1|0);
  $__first$addr$0$i$i = $incdec$ptr$i$i;$agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;return ($agg$tmp1$sroa$0$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayinit$element = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $call = 0, $call5 = 0, $cmp = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $arrayinit$element = ((($fmt)) + 1|0);
 HEAP8[$arrayinit$element>>0] = $__fmt;
 $arrayinit$element2 = ((($fmt)) + 2|0);
 HEAP8[$arrayinit$element2>>0] = $__mod;
 $arrayinit$element3 = ((($fmt)) + 3|0);
 HEAP8[$arrayinit$element3>>0] = 0;
 $cmp = ($__mod<<24>>24)==(0);
 if (!($cmp)) {
  HEAP8[$arrayinit$element>>0] = $__mod;
  HEAP8[$arrayinit$element2>>0] = $__fmt;
 }
 $0 = HEAP32[$__ne>>2]|0;
 $call = (__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($__nb,$0)|0);
 $1 = HEAP32[$this>>2]|0;
 $call5 = (_strftime_l(($__nb|0),($call|0),($fmt|0),($__tm|0),($1|0))|0);
 $add$ptr = (($__nb) + ($call5)|0);
 HEAP32[$__ne>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 return ($sub$ptr$sub|0);
}
function __ZNSt3__210__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 $cmp = ($0|0)==($call|0);
 if (!($cmp)) {
  $1 = HEAP32[$this>>2]|0;
  _freelocale($1);
 }
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__eout_$i$i$i$i = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call2$i$i$i$i = 0, $call3$i$i$i = 0, $call4$i$i$i = 0, $call4$i$i$i$i = 0;
 var $cmp$i$i = 0, $cmp$i$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $retval$0$i$i$i$i = 0, $spec$select$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $__nar = sp;
 $__ne = sp + 400|0;
 $add$ptr = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = ((($this)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $__first$addr$0$i$i = $__nar;$agg$tmp1$sroa$0$0$i = $3;
 while(1) {
  $cmp$i$i = ($__first$addr$0$i$i|0)==($2|0);
  if ($cmp$i$i) {
   break;
  }
  $4 = HEAP32[$__first$addr$0$i$i>>2]|0;
  $tobool$i$i$i = ($agg$tmp1$sroa$0$0$i|0)==(0|0);
  if ($tobool$i$i$i) {
   $agg$tmp1$sroa$0$1$i = 0;
  } else {
   $__nout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 24|0);
   $5 = HEAP32[$__nout_$i$i$i$i>>2]|0;
   $__eout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 28|0);
   $6 = HEAP32[$__eout_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($5|0)==($6|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$agg$tmp1$sroa$0$0$i>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 52|0);
    $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $call2$i$i$i$i = (FUNCTION_TABLE_iii[$7 & 511]($agg$tmp1$sroa$0$0$i,$call$i$i$i$i)|0);
    $retval$0$i$i$i$i = $call2$i$i$i$i;
   } else {
    $incdec$ptr$i$i$i$i = ((($5)) + 4|0);
    HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
    HEAP32[$5>>2] = $4;
    $call4$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call4$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   $spec$select$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
   $agg$tmp1$sroa$0$1$i = $spec$select$i;
  }
  $incdec$ptr$i$i = ((($__first$addr$0$i$i)) + 4|0);
  $__first$addr$0$i$i = $incdec$ptr$i$i;$agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;return ($agg$tmp1$sroa$0$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $call$i = 0, $call$i$i = 0, $cmp = 0, $mb = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $__nar = sp;
 $__ne = sp + 116|0;
 $mb = sp + 104|0;
 $__nb = sp + 112|0;
 $add$ptr = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $0 = $mb;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $4 = HEAP32[$__we>>2]|0;
 $call = (__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($__wb,$4)|0);
 $5 = HEAP32[$this>>2]|0;
 $call$i$i = (___uselocale($5)|0);
 $call$i = (_mbsrtowcs($__wb,$__nb,$call,$mb)|0);
 $tobool$i$i = ($call$i$i|0)==(0|0);
 if (!($tobool$i$i)) {
  (___uselocale($call$i$i)|0);
 }
 $cmp = ($call$i|0)==(-1);
 if ($cmp) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 } else {
  $add$ptr5 = (($__wb) + ($call$i<<2)|0);
  HEAP32[$__we>>2] = $add$ptr5;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__fmtflags_$i = 0, $__h$sroa$0$0 = 0, $__loc = 0;
 var $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__value_$i$i4$i$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i = 0, $call$i$i$i$i = 0;
 var $call$i$i9$i$i = 0, $call15 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call36 = 0, $call4 = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp17 = 0, $cmp2$i = 0, $cmp25 = 0, $cmp37 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0;
 var $incdec$ptr33 = 0, $incdec$ptr34 = 0, $or = 0, $phitmp$i$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast30 = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $sub$ptr$sub32 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i21 = 0, $tobool$i2$i$i = 0, $tobool21 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0;
 var $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp$byval_copy = sp + 240|0;
 $vararg_buffer = sp + 216|0;
 $__wbuf = sp + 112|0;
 $__wb = sp + 232|0;
 $__wn = sp + 228|0;
 $__loc = sp + 224|0;
 $__neg = sp + 254|0;
 $agg$tmp = sp + 220|0;
 $__atoms = sp + 244|0;
 $__nbuf = sp;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $1 = ((($__wb)) + 4|0);
 HEAP32[$1>>2] = (335);
 $add$ptr = ((($__wbuf)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 HEAP8[$__neg>>0] = 0;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $2;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $3 = HEAP32[$__fmtflags_$i>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call4 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$agg$tmp$byval_copy,$__intl,$__loc,$3,$__err,$__neg,$call$i,$__wb,$__wn,$add$ptr)|0);
 if ($call4) {
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 32|0);
  $4 = HEAP32[$vfn$i>>2]|0;
  (FUNCTION_TABLE_iiiii[$4 & 511]($call$i,14024,(14034),$__atoms)|0);
  $5 = HEAP32[$__wn>>2]|0;
  $6 = HEAP32[$__wb>>2]|0;
  $sub$ptr$sub = (($5) - ($6))|0;
  $cmp = ($sub$ptr$sub|0)>(98);
  $7 = $6;
  $8 = $5;
  if ($cmp) {
   $add = (($sub$ptr$sub) + 2)|0;
   $call15 = (_malloc($add)|0);
   $9 = $call15;
   $cmp17 = ($call15|0)==(0|0);
   if ($cmp17) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $__h$sroa$0$0 = $9;$__nc$0 = $call15;
   }
  } else {
   $__h$sroa$0$0 = 0;$__nc$0 = $__nbuf;
  }
  $10 = HEAP8[$__neg>>0]|0;
  $tobool21 = ($10<<24>>24)==(0);
  if ($tobool21) {
   $__nc$1 = $__nc$0;
  } else {
   $incdec$ptr = ((($__nc$0)) + 1|0);
   HEAP8[$__nc$0>>0] = 45;
   $__nc$1 = $incdec$ptr;
  }
  $add$ptr$i = ((($__atoms)) + 10|0);
  $sub$ptr$rhs$cast31 = $__atoms;
  $11 = $8;$__nc$2 = $__nc$1;$__w$0 = $7;
  while(1) {
   $cmp25 = ($__w$0>>>0)<($11>>>0);
   if (!($cmp25)) {
    break;
   }
   $12 = HEAP8[$__w$0>>0]|0;
   $__first$addr$0$i = $__atoms;
   while(1) {
    $cmp$i = ($__first$addr$0$i|0)==($add$ptr$i|0);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    $13 = HEAP8[$__first$addr$0$i>>0]|0;
    $cmp2$i = ($13<<24>>24)==($12<<24>>24);
    if ($cmp2$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $incdec$ptr$i = ((($__first$addr$0$i)) + 1|0);
    $__first$addr$0$i = $incdec$ptr$i;
   }
   $sub$ptr$lhs$cast30 = $__first$addr$0$lcssa$i;
   $sub$ptr$sub32 = (($sub$ptr$lhs$cast30) - ($sub$ptr$rhs$cast31))|0;
   $arrayidx = (14024 + ($sub$ptr$sub32)|0);
   $14 = HEAP8[$arrayidx>>0]|0;
   HEAP8[$__nc$2>>0] = $14;
   $incdec$ptr33 = ((($__w$0)) + 1|0);
   $incdec$ptr34 = ((($__nc$2)) + 1|0);
   $$pre = HEAP32[$__wn>>2]|0;
   $11 = $$pre;$__nc$2 = $incdec$ptr34;$__w$0 = $incdec$ptr33;
  }
  HEAP8[$__nc$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $__v;
  $call36 = (_sscanf($__nbuf,14035,$vararg_buffer)|0);
  $cmp37 = ($call36|0)==(1);
  if (!($cmp37)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $tobool$i$i21 = ($__h$sroa$0$0|0)==(0);
  if (!($tobool$i$i21)) {
   $15 = $__h$sroa$0$0;
   _free($15);
  }
 }
 $16 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($16|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $29 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($16)) + 12|0);
   $17 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($16)) + 16|0);
   $18 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($17|0)==($18|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$16>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $19 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $20 = HEAP8[$17>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($20)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $29 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $29 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $21 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($21|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 32;
  } else {
   $__ninp_$i$i3$i$i = ((($21)) + 12|0);
   $22 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($21)) + 16|0);
   $23 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($22|0)==($23|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$21>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $24 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $25 = HEAP8[$22>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 32;
    break;
   } else {
    if ($29) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($29) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $26 = HEAP32[$__err>>2]|0;
  $or = $26 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $tobool$i$i = ($27|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__wb)) + 4|0);
  $28 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($27);
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__size_$i1$i = 0, $__size_$i2$i = 0, $__value_$i$i4$i$i = 0, $__w$0 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i$i$i = 0, $call$i$i9$i$i = 0, $call$i15 = 0, $call$i18 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4 = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $cmp = 0, $cmp$i$i$i$i = 0;
 var $cmp$i$i5$i$i = 0, $cmp12 = 0, $incdec$ptr = 0, $or = 0, $phitmp$i$i$i = 0, $ref$tmp$i = 0, $ref$tmp4$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i14 = 0, $tobool$i2$i$i = 0, $tobool5 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vfn$i17 = 0, $vtable$i = 0;
 var $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp$byval_copy = sp + 120|0;
 $ref$tmp$i = sp + 126|0;
 $ref$tmp4$i = sp + 125|0;
 $__wbuf = sp;
 $__wb = sp + 112|0;
 $__wn = sp + 108|0;
 $__loc = sp + 104|0;
 $__neg = sp + 124|0;
 $agg$tmp = sp + 100|0;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $1 = ((($__wb)) + 4|0);
 HEAP32[$1>>2] = (335);
 $add$ptr = ((($__wbuf)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 HEAP8[$__neg>>0] = 0;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $2;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $3 = HEAP32[$__fmtflags_$i>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call4 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$agg$tmp$byval_copy,$__intl,$__loc,$3,$__err,$__neg,$call$i,$__wb,$__wn,$add$ptr)|0);
 $4 = $2;
 if ($call4) {
  $__size_$i1$i = ((($__v)) + 11|0);
  $5 = HEAP8[$__size_$i1$i>>0]|0;
  $tobool$i$i14 = ($5<<24>>24)<(0);
  if ($tobool$i$i14) {
   $6 = HEAP32[$__v>>2]|0;
   HEAP8[$ref$tmp$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$ref$tmp$i);
   $__size_$i2$i = ((($__v)) + 4|0);
   HEAP32[$__size_$i2$i>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__v,$ref$tmp4$i);
   HEAP8[$__size_$i1$i>>0] = 0;
  }
  $7 = HEAP8[$__neg>>0]|0;
  $tobool5 = ($7<<24>>24)==(0);
  if (!($tobool5)) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 28|0);
   $8 = HEAP32[$vfn$i>>2]|0;
   $call$i15 = (FUNCTION_TABLE_iii[$8 & 511]($call$i,45)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$call$i15);
  }
  $vtable$i16 = HEAP32[$call$i>>2]|0;
  $vfn$i17 = ((($vtable$i16)) + 28|0);
  $9 = HEAP32[$vfn$i17>>2]|0;
  $call$i18 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,48)|0);
  $10 = HEAP32[$__wb>>2]|0;
  $11 = HEAP32[$__wn>>2]|0;
  $add$ptr10 = ((($11)) + -1|0);
  $__w$0 = $10;
  while(1) {
   $cmp = ($__w$0>>>0)<($add$ptr10>>>0);
   if (!($cmp)) {
    break;
   }
   $12 = HEAP8[$__w$0>>0]|0;
   $cmp12 = ($12<<24>>24)==($call$i18<<24>>24);
   if (!($cmp12)) {
    break;
   }
   $incdec$ptr = ((($__w$0)) + 1|0);
   $__w$0 = $incdec$ptr;
  }
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($__v,$__w$0,$11)|0);
 }
 $13 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($13|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $26 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($13)) + 12|0);
   $14 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($13)) + 16|0);
   $15 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($14|0)==($15|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$13>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $16 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$16 & 511]($13)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $17 = HEAP8[$14>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $26 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $26 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i = ($2|0)==(0);
 do {
  if ($tobool$i2$i$i) {
   label = 25;
  } else {
   $__ninp_$i$i3$i$i = ((($4)) + 12|0);
   $18 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($4)) + 16|0);
   $19 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($18|0)==($19|0);
   if ($cmp$i$i5$i$i) {
    $20 = $2;
    $vtable$i$i7$i$i = HEAP32[$20>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $21 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$21 & 511]($4)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $22 = HEAP8[$18>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($22)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 25;
    break;
   } else {
    if ($26) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($26) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $23 = HEAP32[$__err>>2]|0;
  $or = $23 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__26localeD2Ev($__loc);
 $24 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $tobool$i$i = ($24|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__wb)) + 4|0);
  $25 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$25 & 511]($24);
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i175 = 0, $$pre$i$i$i515 = 0, $$pre$i$i$i611 = 0, $$pre$i$i$i697 = 0, $$pre$i$i$i783 = 0, $$pre$i$i$i851 = 0, $$pre987 = 0, $$pre988 = 0, $$pre989 = 0, $$pre990 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i162 = 0, $__einp_$i$i$i$i502 = 0, $__einp_$i$i$i$i598 = 0, $__einp_$i$i$i$i684 = 0, $__einp_$i$i$i$i770 = 0, $__einp_$i$i$i$i838 = 0;
 var $__einp_$i$i137 = 0, $__einp_$i$i148 = 0, $__einp_$i$i203 = 0, $__einp_$i$i225 = 0, $__einp_$i$i281 = 0, $__einp_$i$i295 = 0, $__einp_$i$i325 = 0, $__einp_$i$i368 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i183 = 0, $__einp_$i$i4$i$i523 = 0, $__einp_$i$i4$i$i619 = 0, $__einp_$i$i4$i$i705 = 0, $__einp_$i$i4$i$i791 = 0, $__einp_$i$i4$i$i859 = 0, $__einp_$i$i411 = 0, $__einp_$i$i475 = 0, $__einp_$i$i639 = 0, $__einp_$i$i653 = 0, $__einp_$i$i725 = 0;
 var $__einp_$i$i756 = 0, $__einp_$i$i812 = 0, $__einp_$i$i825 = 0, $__einp_$i$i880 = 0, $__einp_$i$i902 = 0, $__einp_$i$i915 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i100 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0;
 var $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i161 = 0, $__ninp_$i$i$i$i501 = 0, $__ninp_$i$i$i$i597 = 0, $__ninp_$i$i$i$i683 = 0, $__ninp_$i$i$i$i769 = 0, $__ninp_$i$i$i$i837 = 0, $__ninp_$i$i136 = 0, $__ninp_$i$i147 = 0, $__ninp_$i$i202 = 0, $__ninp_$i$i224 = 0, $__ninp_$i$i280 = 0, $__ninp_$i$i294 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i182 = 0, $__ninp_$i$i3$i$i522 = 0, $__ninp_$i$i3$i$i618 = 0, $__ninp_$i$i3$i$i704 = 0;
 var $__ninp_$i$i3$i$i790 = 0, $__ninp_$i$i3$i$i858 = 0, $__ninp_$i$i324 = 0, $__ninp_$i$i367 = 0, $__ninp_$i$i410 = 0, $__ninp_$i$i474 = 0, $__ninp_$i$i638 = 0, $__ninp_$i$i652 = 0, $__ninp_$i$i724 = 0, $__ninp_$i$i755 = 0, $__ninp_$i$i811 = 0, $__ninp_$i$i824 = 0, $__ninp_$i$i879 = 0, $__ninp_$i$i901 = 0, $__ninp_$i$i914 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0;
 var $__size_$i$i$i431 = 0, $__size_$i$i244 = 0, $__size_$i$i464 = 0, $__size_$i$i746 = 0, $__size_$i$i927 = 0, $__size_$i3$i = 0, $__size_$i3$i$i583 = 0, $__size_$i3$i246 = 0, $__size_$i3$i466 = 0, $__size_$i3$i748 = 0, $__size_$i3$i929 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__sym_space_end$sroa$0$1$ptr = 0, $__tab_$i216 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0;
 var $__ts = 0, $__value_$i$i4$i$i = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i964 = 0, $add$ptr$i$i$i965 = 0, $add$ptr$i472 = 0, $add$ptr$i497 = 0, $add$ptr$i497962 = 0, $add$ptr$i552$pre$phiZZZ2D = 0, $add$ptr$i590 = 0, $add$ptr$i676 = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $and3$i = 0, $and3$i218 = 0, $and3$i448 = 0, $and3$i740 = 0;
 var $and3$i895 = 0, $and958 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i103 = 0, $arrayidx$i$i111 = 0, $arrayidx$i$i119 = 0, $arrayidx$i$i127 = 0, $arrayidx$i217 = 0, $arrayidx$i447 = 0, $arrayidx$i739 = 0, $arrayidx$i894 = 0, $arrayidx112 = 0, $arrayidx97 = 0, $brmerge = 0, $call$i$i$i$i = 0, $call$i$i$i$i167 = 0, $call$i$i$i$i507 = 0, $call$i$i$i$i603 = 0;
 var $call$i$i$i$i689 = 0, $call$i$i$i$i775 = 0, $call$i$i$i$i843 = 0, $call$i$i141 = 0, $call$i$i152 = 0, $call$i$i207 = 0, $call$i$i229 = 0, $call$i$i285 = 0, $call$i$i350 = 0, $call$i$i393 = 0, $call$i$i479 = 0, $call$i$i643 = 0, $call$i$i729 = 0, $call$i$i816 = 0, $call$i$i884 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i188 = 0, $call$i$i9$i$i528 = 0, $call$i$i9$i$i624 = 0, $call$i$i9$i$i710 = 0;
 var $call$i$i9$i$i796 = 0, $call$i$i9$i$i864 = 0, $call$i$i906 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i169 = 0, $call3$i$i$i$i509 = 0, $call3$i$i$i$i605 = 0, $call3$i$i$i$i691 = 0, $call3$i$i$i$i777 = 0, $call3$i$i$i$i845 = 0, $call3$i$i$i172 = 0, $call3$i$i$i512 = 0, $call3$i$i$i608 = 0, $call3$i$i$i694 = 0, $call3$i$i$i780 = 0, $call3$i$i$i848 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i190 = 0, $call3$i$i11$i$i530 = 0;
 var $call3$i$i11$i$i626 = 0, $call3$i$i11$i$i712 = 0, $call3$i$i11$i$i798 = 0, $call3$i$i11$i$i866 = 0, $call3$i$i143 = 0, $call3$i$i155 = 0, $call3$i$i209 = 0, $call3$i$i232 = 0, $call3$i$i287 = 0, $call3$i$i352 = 0, $call3$i$i395 = 0, $call3$i$i481 = 0, $call3$i$i645 = 0, $call3$i$i731 = 0, $call3$i$i818 = 0, $call3$i$i886 = 0, $call3$i$i908 = 0, $call3$i14$i$i = 0, $call3$i14$i$i193 = 0, $call3$i14$i$i533 = 0;
 var $call3$i14$i$i629 = 0, $call3$i14$i$i715 = 0, $call3$i14$i$i801 = 0, $call3$i14$i$i869 = 0, $call4$i$i$i = 0, $call4$i$i$i173 = 0, $call4$i$i$i513 = 0, $call4$i$i$i609 = 0, $call4$i$i$i695 = 0, $call4$i$i$i781 = 0, $call4$i$i$i849 = 0, $call4$i15$i$i = 0, $call4$i15$i$i194 = 0, $call4$i15$i$i534 = 0, $call4$i15$i$i630 = 0, $call4$i15$i$i716 = 0, $call4$i15$i$i802 = 0, $call4$i15$i$i870 = 0, $cmp = 0, $cmp$i$i = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i163 = 0, $cmp$i$i$i$i503 = 0, $cmp$i$i$i$i566 = 0, $cmp$i$i$i$i599 = 0, $cmp$i$i$i$i685 = 0, $cmp$i$i$i$i771 = 0, $cmp$i$i$i$i839 = 0, $cmp$i$i138 = 0, $cmp$i$i149 = 0, $cmp$i$i204 = 0, $cmp$i$i226 = 0, $cmp$i$i282 = 0, $cmp$i$i296 = 0, $cmp$i$i326 = 0, $cmp$i$i369 = 0, $cmp$i$i412 = 0, $cmp$i$i443 = 0, $cmp$i$i476 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i184 = 0, $cmp$i$i5$i$i524 = 0, $cmp$i$i5$i$i620 = 0, $cmp$i$i5$i$i706 = 0, $cmp$i$i5$i$i792 = 0, $cmp$i$i5$i$i860 = 0, $cmp$i$i594 = 0, $cmp$i$i640 = 0, $cmp$i$i654 = 0, $cmp$i$i680 = 0, $cmp$i$i726 = 0, $cmp$i$i757 = 0, $cmp$i$i813 = 0, $cmp$i$i826 = 0, $cmp$i$i881 = 0, $cmp$i$i903 = 0, $cmp$i$i916 = 0, $cmp10 = 0, $cmp102959 = 0;
 var $cmp110 = 0, $cmp139 = 0, $cmp172 = 0, $cmp2$i = 0, $cmp2$i214 = 0, $cmp2$i444 = 0, $cmp2$i736 = 0, $cmp2$i891 = 0, $cmp201 = 0, $cmp206 = 0, $cmp208 = 0, $cmp212 = 0, $cmp214 = 0, $cmp226 = 0, $cmp228 = 0, $cmp23 = 0, $cmp230 = 0, $cmp235 = 0, $cmp242 = 0, $cmp248 = 0;
 var $cmp257 = 0, $cmp26 = 0, $cmp267 = 0, $cmp28 = 0, $cmp283 = 0, $cmp292 = 0, $cmp304 = 0, $cmp37 = 0, $cmp41 = 0, $cmp51 = 0, $cmp55 = 0, $cmp6$i = 0, $cmp6$i219 = 0, $cmp6$i449 = 0, $cmp6$i741 = 0, $cmp6$i896 = 0, $cmp65 = 0, $cmp69 = 0, $cmp77 = 0, $cmp81 = 0;
 var $cmp93 = 0, $cmp94 = 0, $cmp99 = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i321 = 0, $cond$i$i364 = 0, $cond$i$i407 = 0, $cond$i$i437 = 0, $cond$i$i437992 = 0, $cond$i$i437995 = 0, $cond$i242 = 0, $cond$i250 = 0, $cond$i312 = 0, $cond$i342 = 0, $cond$i385 = 0, $cond$i428 = 0, $cond$i470 = 0, $cond$i6$i = 0, $cond$i6$i589 = 0;
 var $cond$i6$i675 = 0, $cond$i7$i588 = 0, $cond$i7$i674 = 0, $cond$i752 = 0, $cond$i933 = 0, $cond98 = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i586 = 0, $conv$i$i$i672 = 0, $conv$i$i248 = 0, $conv$i$i310 = 0, $conv$i$i340 = 0, $conv$i$i383 = 0, $conv$i$i426 = 0, $conv$i$i468 = 0, $conv$i$i750 = 0, $conv$i$i931 = 0;
 var $conv$i145 = 0, $conv$i158 = 0, $conv$i212 = 0, $conv$i215 = 0, $conv$i235 = 0, $conv$i290 = 0, $conv$i355 = 0, $conv$i398 = 0, $conv$i445 = 0, $conv$i484 = 0, $conv$i648 = 0, $conv$i734 = 0, $conv$i737 = 0, $conv$i821 = 0, $conv$i889 = 0, $conv$i892 = 0, $conv$i911 = 0, $dec = 0, $exitcond$i$i = 0, $exitcond$i$i101 = 0;
 var $exitcond$i$i109 = 0, $exitcond$i$i117 = 0, $exitcond$i$i125 = 0, $inc = 0, $inc$i$i = 0, $inc$i$i104 = 0, $inc$i$i112 = 0, $inc$i$i120 = 0, $inc$i$i128 = 0, $inc275 = 0, $inc297 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i154 = 0, $incdec$ptr$i$i231 = 0, $incdec$ptr$i$i301 = 0, $incdec$ptr$i$i331 = 0, $incdec$ptr$i$i374 = 0;
 var $incdec$ptr$i$i417 = 0, $incdec$ptr$i$i659 = 0, $incdec$ptr$i$i762 = 0, $incdec$ptr$i$i831 = 0, $incdec$ptr$i$i921 = 0, $incdec$ptr$i2$i$i = 0, $incdec$ptr$i664 = 0, $incdec$ptr217 = 0, $incdec$ptr233 = 0, $incdec$ptr261 = 0, $or = 0, $or$cond = 0, $or$cond1002 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond96 = 0, $or186 = 0, $or244 = 0, $or255 = 0, $or269 = 0;
 var $or294 = 0, $or309 = 0, $or85 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i176 = 0, $phitmp$i$i$i516 = 0, $phitmp$i$i$i612 = 0, $phitmp$i$i$i698 = 0, $phitmp$i$i$i784 = 0, $phitmp$i$i$i852 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i171 = 0, $retval$0$i$i$i$i511 = 0, $retval$0$i$i$i$i607 = 0, $retval$0$i$i$i$i693 = 0, $retval$0$i$i$i$i779 = 0, $retval$0$i$i$i$i847 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i192 = 0;
 var $retval$0$i$i13$i$i532 = 0, $retval$0$i$i13$i$i628 = 0, $retval$0$i$i13$i$i714 = 0, $retval$0$i$i13$i$i800 = 0, $retval$0$i$i13$i$i868 = 0, $retval$0$i$i157 = 0, $retval$0$i$i211 = 0, $retval$0$i$i234 = 0, $retval$0$i$i289 = 0, $retval$0$i$i354 = 0, $retval$0$i$i397 = 0, $retval$0$i$i483 = 0, $retval$0$i$i647 = 0, $retval$0$i$i733 = 0, $retval$0$i$i820 = 0, $retval$0$i$i888 = 0, $retval$0$i$i910 = 0, $retval$10 = 0, $sext = 0, $sext972 = 0;
 var $sext973 = 0, $sext974 = 0, $spec$select = 0, $spec$select93 = 0, $spec$select94 = 0, $spec$select95 = 0, $sub = 0, $sub$i = 0, $sub$i963 = 0, $sub$ptr$sub$i = 0, $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i160 = 0, $tobool$i$i$i292 = 0, $tobool$i$i$i316 = 0, $tobool$i$i$i359 = 0, $tobool$i$i$i402 = 0, $tobool$i$i$i432 = 0;
 var $tobool$i$i$i432991 = 0, $tobool$i$i$i432994 = 0, $tobool$i$i$i500 = 0, $tobool$i$i$i581 = 0, $tobool$i$i$i596 = 0, $tobool$i$i$i667 = 0, $tobool$i$i$i682 = 0, $tobool$i$i$i768 = 0, $tobool$i$i$i836 = 0, $tobool$i$i240 = 0, $tobool$i$i245 = 0, $tobool$i$i307 = 0, $tobool$i$i337 = 0, $tobool$i$i380 = 0, $tobool$i$i423 = 0, $tobool$i$i465 = 0, $tobool$i$i747 = 0, $tobool$i$i928 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i180 = 0;
 var $tobool$i2$i$i520 = 0, $tobool$i2$i$i616 = 0, $tobool$i2$i$i702 = 0, $tobool$i2$i$i788 = 0, $tobool$i2$i$i856 = 0, $tobool279 = 0, $tobool307 = 0, $tobool91 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i166 = 0, $vfn$i$i$i$i506 = 0, $vfn$i$i$i$i602 = 0, $vfn$i$i$i$i688 = 0, $vfn$i$i$i$i774 = 0, $vfn$i$i$i$i842 = 0, $vfn$i$i140 = 0, $vfn$i$i151 = 0, $vfn$i$i206 = 0, $vfn$i$i228 = 0;
 var $vfn$i$i284 = 0, $vfn$i$i298 = 0, $vfn$i$i328 = 0, $vfn$i$i349 = 0, $vfn$i$i371 = 0, $vfn$i$i392 = 0, $vfn$i$i414 = 0, $vfn$i$i478 = 0, $vfn$i$i642 = 0, $vfn$i$i656 = 0, $vfn$i$i728 = 0, $vfn$i$i759 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i187 = 0, $vfn$i$i8$i$i527 = 0, $vfn$i$i8$i$i623 = 0, $vfn$i$i8$i$i709 = 0, $vfn$i$i8$i$i795 = 0, $vfn$i$i8$i$i863 = 0, $vfn$i$i815 = 0;
 var $vfn$i$i828 = 0, $vfn$i$i883 = 0, $vfn$i$i905 = 0, $vfn$i$i918 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i165 = 0, $vtable$i$i$i$i505 = 0, $vtable$i$i$i$i601 = 0, $vtable$i$i$i$i687 = 0, $vtable$i$i$i$i773 = 0, $vtable$i$i$i$i841 = 0, $vtable$i$i139 = 0, $vtable$i$i150 = 0, $vtable$i$i205 = 0, $vtable$i$i227 = 0, $vtable$i$i283 = 0, $vtable$i$i297 = 0, $vtable$i$i327 = 0, $vtable$i$i348 = 0;
 var $vtable$i$i370 = 0, $vtable$i$i391 = 0, $vtable$i$i413 = 0, $vtable$i$i477 = 0, $vtable$i$i641 = 0, $vtable$i$i655 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i186 = 0, $vtable$i$i7$i$i526 = 0, $vtable$i$i7$i$i622 = 0, $vtable$i$i7$i$i708 = 0, $vtable$i$i7$i$i794 = 0, $vtable$i$i7$i$i862 = 0, $vtable$i$i727 = 0, $vtable$i$i758 = 0, $vtable$i$i814 = 0, $vtable$i$i827 = 0, $vtable$i$i882 = 0, $vtable$i$i904 = 0, $vtable$i$i917 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $__we$addr = sp + 488|0;
 $__gbuf = sp;
 $__gb = sp + 480|0;
 $__gn = sp + 472|0;
 $__ge = sp + 468|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 456|0;
 $__sym = sp + 444|0;
 $__psn = sp + 432|0;
 $__nsn = sp + 420|0;
 $__spaces = sp + 408|0;
 $__fd = sp + 404|0;
 $__et = sp + 400|0;
 HEAP32[$__we$addr>>2] = $__we;
 $0 = $__gbuf;
 HEAP32[$__gb>>2] = $0;
 $1 = ((($__gb)) + 4|0);
 HEAP32[$1>>2] = (335);
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i100 = 0;
 while(1) {
  $exitcond$i$i101 = ($__i$0$i$i100|0)==(3);
  if ($exitcond$i$i101) {
   break;
  }
  $arrayidx$i$i103 = (($__sym) + ($__i$0$i$i100<<2)|0);
  HEAP32[$arrayidx$i$i103>>2] = 0;
  $inc$i$i104 = (($__i$0$i$i100) + 1)|0;
  $__i$0$i$i100 = $inc$i$i104;
 }
 ;HEAP32[$__psn>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 $__i$0$i$i108 = 0;
 while(1) {
  $exitcond$i$i109 = ($__i$0$i$i108|0)==(3);
  if ($exitcond$i$i109) {
   break;
  }
  $arrayidx$i$i111 = (($__psn) + ($__i$0$i$i108<<2)|0);
  HEAP32[$arrayidx$i$i111>>2] = 0;
  $inc$i$i112 = (($__i$0$i$i108) + 1)|0;
  $__i$0$i$i108 = $inc$i$i112;
 }
 ;HEAP32[$__nsn>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 $__i$0$i$i116 = 0;
 while(1) {
  $exitcond$i$i117 = ($__i$0$i$i116|0)==(3);
  if ($exitcond$i$i117) {
   break;
  }
  $arrayidx$i$i119 = (($__nsn) + ($__i$0$i$i116<<2)|0);
  HEAP32[$arrayidx$i$i119>>2] = 0;
  $inc$i$i120 = (($__i$0$i$i116) + 1)|0;
  $__i$0$i$i116 = $inc$i$i120;
 }
 ;HEAP32[$__spaces>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 $__i$0$i$i124 = 0;
 while(1) {
  $exitcond$i$i125 = ($__i$0$i$i124|0)==(3);
  if ($exitcond$i$i125) {
   break;
  }
  $arrayidx$i$i127 = (($__spaces) + ($__i$0$i$i124<<2)|0);
  HEAP32[$arrayidx$i$i127>>2] = 0;
  $inc$i$i128 = (($__i$0$i$i124) + 1)|0;
  $__i$0$i$i124 = $inc$i$i128;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $2 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $2;
 $__tab_$i216 = ((($__ct)) + 8|0);
 $__size_$i$i = ((($__psn)) + 11|0);
 $__size_$i3$i = ((($__psn)) + 4|0);
 $__size_$i$i244 = ((($__nsn)) + 11|0);
 $__size_$i3$i246 = ((($__nsn)) + 4|0);
 $__size_$i$i746 = ((($__grp)) + 11|0);
 $__size_$i3$i748 = ((($__grp)) + 4|0);
 $and958 = $__flags & 512;
 $cmp102959 = ($and958|0)!=(0);
 $__size_$i$i$i431 = ((($__sym)) + 11|0);
 $arrayidx97 = ((($__pat)) + 3|0);
 $__size_$i3$i$i583 = ((($__sym)) + 4|0);
 $__size_$i$i464 = ((($__spaces)) + 11|0);
 $__size_$i3$i466 = ((($__spaces)) + 4|0);
 $__p$0 = 0;$__trailing_sign$0 = 0;
 L21: while(1) {
  $cmp = ($__p$0>>>0)<(4);
  if (!($cmp)) {
   label = 243;
   break;
  }
  $3 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($3|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $280 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($3)) + 12|0);
    $4 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($3)) + 16|0);
    $5 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($4|0)==($5|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$3>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $6 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $7 = HEAP8[$4>>0]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($7)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $280 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $280 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $8 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($8|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 31;
   } else {
    $__ninp_$i$i3$i$i = ((($8)) + 12|0);
    $9 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($8)) + 16|0);
    $10 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($9|0)==($10|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$8>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $11 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $12 = HEAP8[$9>>0]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($12)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    } else {
     if ($280) {
      $281 = $8;
      break;
     } else {
      label = 243;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($280) {
    label = 243;
    break;
   } else {
    $281 = 0;
   }
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $13 = HEAP8[$arrayidx>>0]|0;
  $conv = $13 << 24 >> 24;
  L46: do {
   switch ($conv|0) {
   case 1:  {
    $cond98 = ($__p$0|0)==(3);
    if ($cond98) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $14 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i136 = ((($14)) + 12|0);
     $15 = HEAP32[$__ninp_$i$i136>>2]|0;
     $__einp_$i$i137 = ((($14)) + 16|0);
     $16 = HEAP32[$__einp_$i$i137>>2]|0;
     $cmp$i$i138 = ($15|0)==($16|0);
     if ($cmp$i$i138) {
      $vtable$i$i139 = HEAP32[$14>>2]|0;
      $vfn$i$i140 = ((($vtable$i$i139)) + 36|0);
      $17 = HEAP32[$vfn$i$i140>>2]|0;
      $call$i$i141 = (FUNCTION_TABLE_ii[$17 & 511]($14)|0);
      $retval$0$i$i = $call$i$i141;
     } else {
      $18 = HEAP8[$15>>0]|0;
      $call3$i$i143 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i = $call3$i$i143;
     }
     $conv$i = $retval$0$i$i&255;
     $cmp2$i = ($conv$i<<24>>24)>(-1);
     if (!($cmp2$i)) {
      label = 45;
      break L21;
     }
     $sext974 = $retval$0$i$i << 24;
     $conv$i145 = $sext974 >> 24;
     $19 = HEAP32[$__tab_$i216>>2]|0;
     $arrayidx$i = (($19) + ($conv$i145<<1)|0);
     $20 = HEAP16[$arrayidx$i>>1]|0;
     $and3$i = $20 & 8192;
     $cmp6$i = ($and3$i<<16>>16)==(0);
     if ($cmp6$i) {
      label = 45;
      break L21;
     }
     $21 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i147 = ((($21)) + 12|0);
     $22 = HEAP32[$__ninp_$i$i147>>2]|0;
     $__einp_$i$i148 = ((($21)) + 16|0);
     $23 = HEAP32[$__einp_$i$i148>>2]|0;
     $cmp$i$i149 = ($22|0)==($23|0);
     if ($cmp$i$i149) {
      $vtable$i$i150 = HEAP32[$21>>2]|0;
      $vfn$i$i151 = ((($vtable$i$i150)) + 40|0);
      $24 = HEAP32[$vfn$i$i151>>2]|0;
      $call$i$i152 = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
      $retval$0$i$i157 = $call$i$i152;
     } else {
      $incdec$ptr$i$i154 = ((($22)) + 1|0);
      HEAP32[$__ninp_$i$i147>>2] = $incdec$ptr$i$i154;
      $25 = HEAP8[$22>>0]|0;
      $call3$i$i155 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
      $retval$0$i$i157 = $call3$i$i155;
     }
     $conv$i158 = $retval$0$i$i157&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$conv$i158);
     label = 47;
    }
    break;
   }
   case 0:  {
    $cmp10 = ($__p$0|0)==(3);
    if ($cmp10) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     label = 47;
    }
    break;
   }
   case 3:  {
    $49 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i240 = ($49<<24>>24)<(0);
    $50 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i = $49&255;
    $cond$i242 = $tobool$i$i240 ? $50 : $conv$i$i;
    $51 = HEAP8[$__size_$i$i244>>0]|0;
    $tobool$i$i245 = ($51<<24>>24)<(0);
    $52 = HEAP32[$__size_$i3$i246>>2]|0;
    $conv$i$i248 = $51&255;
    $cond$i250 = $tobool$i$i245 ? $52 : $conv$i$i248;
    $add = (0 - ($cond$i250))|0;
    $cmp23 = ($cond$i242|0)==($add|0);
    if ($cmp23) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $cmp26 = ($cond$i242|0)==(0);
     $cmp28 = ($cond$i250|0)==(0);
     $or$cond1002 = $cmp26 | $cmp28;
     $53 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i280 = ((($53)) + 12|0);
     $54 = HEAP32[$__ninp_$i$i280>>2]|0;
     $__einp_$i$i281 = ((($53)) + 16|0);
     $55 = HEAP32[$__einp_$i$i281>>2]|0;
     $cmp$i$i282 = ($54|0)==($55|0);
     if ($or$cond1002) {
      if ($cmp$i$i282) {
       $vtable$i$i283 = HEAP32[$53>>2]|0;
       $vfn$i$i284 = ((($vtable$i$i283)) + 36|0);
       $56 = HEAP32[$vfn$i$i284>>2]|0;
       $call$i$i285 = (FUNCTION_TABLE_ii[$56 & 511]($53)|0);
       $retval$0$i$i289 = $call$i$i285;
      } else {
       $57 = HEAP8[$54>>0]|0;
       $call3$i$i287 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
       $retval$0$i$i289 = $call3$i$i287;
      }
      $conv$i290 = $retval$0$i$i289&255;
      if ($cmp26) {
       $68 = HEAP8[$__size_$i$i244>>0]|0;
       $tobool$i$i$i316 = ($68<<24>>24)<(0);
       $69 = HEAP32[$__nsn>>2]|0;
       $cond$i$i321 = $tobool$i$i$i316 ? $69 : $__nsn;
       $70 = HEAP8[$cond$i$i321>>0]|0;
       $cmp51 = ($70<<24>>24)==($conv$i290<<24>>24);
       if (!($cmp51)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $71 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i324 = ((($71)) + 12|0);
       $72 = HEAP32[$__ninp_$i$i324>>2]|0;
       $__einp_$i$i325 = ((($71)) + 16|0);
       $73 = HEAP32[$__einp_$i$i325>>2]|0;
       $cmp$i$i326 = ($72|0)==($73|0);
       if ($cmp$i$i326) {
        $vtable$i$i327 = HEAP32[$71>>2]|0;
        $vfn$i$i328 = ((($vtable$i$i327)) + 40|0);
        $74 = HEAP32[$vfn$i$i328>>2]|0;
        (FUNCTION_TABLE_ii[$74 & 511]($71)|0);
       } else {
        $incdec$ptr$i$i331 = ((($72)) + 1|0);
        HEAP32[$__ninp_$i$i324>>2] = $incdec$ptr$i$i331;
        $75 = HEAP8[$72>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
       }
       HEAP8[$__neg>>0] = 1;
       $76 = HEAP8[$__size_$i$i244>>0]|0;
       $tobool$i$i337 = ($76<<24>>24)<(0);
       $77 = HEAP32[$__size_$i3$i246>>2]|0;
       $conv$i$i340 = $76&255;
       $cond$i342 = $tobool$i$i337 ? $77 : $conv$i$i340;
       $cmp55 = ($cond$i342>>>0)>(1);
       $spec$select93 = $cmp55 ? $__nsn : $__trailing_sign$0;
       $__trailing_sign$1 = $spec$select93;
       break L46;
      }
      $58 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i$i292 = ($58<<24>>24)<(0);
      $59 = HEAP32[$__psn>>2]|0;
      $cond$i$i = $tobool$i$i$i292 ? $59 : $__psn;
      $60 = HEAP8[$cond$i$i>>0]|0;
      $cmp37 = ($60<<24>>24)==($conv$i290<<24>>24);
      if (!($cmp37)) {
       HEAP8[$__neg>>0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $61 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i294 = ((($61)) + 12|0);
      $62 = HEAP32[$__ninp_$i$i294>>2]|0;
      $__einp_$i$i295 = ((($61)) + 16|0);
      $63 = HEAP32[$__einp_$i$i295>>2]|0;
      $cmp$i$i296 = ($62|0)==($63|0);
      if ($cmp$i$i296) {
       $vtable$i$i297 = HEAP32[$61>>2]|0;
       $vfn$i$i298 = ((($vtable$i$i297)) + 40|0);
       $64 = HEAP32[$vfn$i$i298>>2]|0;
       (FUNCTION_TABLE_ii[$64 & 511]($61)|0);
      } else {
       $incdec$ptr$i$i301 = ((($62)) + 1|0);
       HEAP32[$__ninp_$i$i294>>2] = $incdec$ptr$i$i301;
       $65 = HEAP8[$62>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($65)|0);
      }
      $66 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i307 = ($66<<24>>24)<(0);
      $67 = HEAP32[$__size_$i3$i>>2]|0;
      $conv$i$i310 = $66&255;
      $cond$i312 = $tobool$i$i307 ? $67 : $conv$i$i310;
      $cmp41 = ($cond$i312>>>0)>(1);
      $spec$select = $cmp41 ? $__psn : $__trailing_sign$0;
      $__trailing_sign$1 = $spec$select;
      break L46;
     }
     if ($cmp$i$i282) {
      $vtable$i$i348 = HEAP32[$53>>2]|0;
      $vfn$i$i349 = ((($vtable$i$i348)) + 36|0);
      $78 = HEAP32[$vfn$i$i349>>2]|0;
      $call$i$i350 = (FUNCTION_TABLE_ii[$78 & 511]($53)|0);
      $retval$0$i$i354 = $call$i$i350;
     } else {
      $79 = HEAP8[$54>>0]|0;
      $call3$i$i352 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($79)|0);
      $retval$0$i$i354 = $call3$i$i352;
     }
     $conv$i355 = $retval$0$i$i354&255;
     $80 = HEAP8[$__size_$i$i>>0]|0;
     $tobool$i$i$i359 = ($80<<24>>24)<(0);
     $81 = HEAP32[$__psn>>2]|0;
     $cond$i$i364 = $tobool$i$i$i359 ? $81 : $__psn;
     $82 = HEAP8[$cond$i$i364>>0]|0;
     $cmp65 = ($82<<24>>24)==($conv$i355<<24>>24);
     $83 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i367 = ((($83)) + 12|0);
     $84 = HEAP32[$__ninp_$i$i367>>2]|0;
     $__einp_$i$i368 = ((($83)) + 16|0);
     $85 = HEAP32[$__einp_$i$i368>>2]|0;
     $cmp$i$i369 = ($84|0)==($85|0);
     if ($cmp65) {
      if ($cmp$i$i369) {
       $vtable$i$i370 = HEAP32[$83>>2]|0;
       $vfn$i$i371 = ((($vtable$i$i370)) + 40|0);
       $86 = HEAP32[$vfn$i$i371>>2]|0;
       (FUNCTION_TABLE_ii[$86 & 511]($83)|0);
      } else {
       $incdec$ptr$i$i374 = ((($84)) + 1|0);
       HEAP32[$__ninp_$i$i367>>2] = $incdec$ptr$i$i374;
       $87 = HEAP8[$84>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
      }
      $88 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i380 = ($88<<24>>24)<(0);
      $89 = HEAP32[$__size_$i3$i>>2]|0;
      $conv$i$i383 = $88&255;
      $cond$i385 = $tobool$i$i380 ? $89 : $conv$i$i383;
      $cmp69 = ($cond$i385>>>0)>(1);
      $spec$select94 = $cmp69 ? $__psn : $__trailing_sign$0;
      $__trailing_sign$1 = $spec$select94;
      break L46;
     }
     if ($cmp$i$i369) {
      $vtable$i$i391 = HEAP32[$83>>2]|0;
      $vfn$i$i392 = ((($vtable$i$i391)) + 36|0);
      $90 = HEAP32[$vfn$i$i392>>2]|0;
      $call$i$i393 = (FUNCTION_TABLE_ii[$90 & 511]($83)|0);
      $retval$0$i$i397 = $call$i$i393;
     } else {
      $91 = HEAP8[$84>>0]|0;
      $call3$i$i395 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($91)|0);
      $retval$0$i$i397 = $call3$i$i395;
     }
     $conv$i398 = $retval$0$i$i397&255;
     $92 = HEAP8[$__size_$i$i244>>0]|0;
     $tobool$i$i$i402 = ($92<<24>>24)<(0);
     $93 = HEAP32[$__nsn>>2]|0;
     $cond$i$i407 = $tobool$i$i$i402 ? $93 : $__nsn;
     $94 = HEAP8[$cond$i$i407>>0]|0;
     $cmp77 = ($94<<24>>24)==($conv$i398<<24>>24);
     if (!($cmp77)) {
      label = 105;
      break L21;
     }
     $95 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i410 = ((($95)) + 12|0);
     $96 = HEAP32[$__ninp_$i$i410>>2]|0;
     $__einp_$i$i411 = ((($95)) + 16|0);
     $97 = HEAP32[$__einp_$i$i411>>2]|0;
     $cmp$i$i412 = ($96|0)==($97|0);
     if ($cmp$i$i412) {
      $vtable$i$i413 = HEAP32[$95>>2]|0;
      $vfn$i$i414 = ((($vtable$i$i413)) + 40|0);
      $98 = HEAP32[$vfn$i$i414>>2]|0;
      (FUNCTION_TABLE_ii[$98 & 511]($95)|0);
     } else {
      $incdec$ptr$i$i417 = ((($96)) + 1|0);
      HEAP32[$__ninp_$i$i410>>2] = $incdec$ptr$i$i417;
      $99 = HEAP8[$96>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
     }
     HEAP8[$__neg>>0] = 1;
     $100 = HEAP8[$__size_$i$i244>>0]|0;
     $tobool$i$i423 = ($100<<24>>24)<(0);
     $101 = HEAP32[$__size_$i3$i246>>2]|0;
     $conv$i$i426 = $100&255;
     $cond$i428 = $tobool$i$i423 ? $101 : $conv$i$i426;
     $cmp81 = ($cond$i428>>>0)>(1);
     $spec$select95 = $cmp81 ? $__nsn : $__trailing_sign$0;
     $__trailing_sign$1 = $spec$select95;
    }
    break;
   }
   case 2:  {
    $tobool91 = ($__trailing_sign$0|0)!=(0|0);
    $cmp93 = ($__p$0>>>0)<(2);
    $or$cond = $cmp93 | $tobool91;
    if ($or$cond) {
     $108 = HEAP8[$__size_$i$i$i431>>0]|0;
     $tobool$i$i$i432 = ($108<<24>>24)<(0);
     $109 = HEAP32[$__sym>>2]|0;
     $cond$i$i437 = $tobool$i$i$i432 ? $109 : $__sym;
     $110 = $cond$i$i437;
     $cmp110 = ($__p$0|0)==(0);
     if ($cmp110) {
      $286 = $109;$287 = $108;$__sym_space_end$sroa$0$1 = $110;
     } else {
      $113 = $108;$119 = $110;$285 = $109;$cond$i$i437995 = $cond$i$i437;$tobool$i$i$i432994 = $tobool$i$i$i432;
      label = 110;
     }
    } else {
     $cmp94 = ($__p$0|0)==(2);
     $103 = HEAP8[$arrayidx97>>0]|0;
     $cmp99 = ($103<<24>>24)!=(0);
     $104 = $cmp94 & $cmp99;
     $brmerge = $cmp102959 | $104;
     if (!($brmerge)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $105 = HEAP8[$__size_$i$i$i431>>0]|0;
     $tobool$i$i$i432991 = ($105<<24>>24)<(0);
     $106 = HEAP32[$__sym>>2]|0;
     $cond$i$i437992 = $tobool$i$i$i432991 ? $106 : $__sym;
     $107 = $cond$i$i437992;
     $113 = $105;$119 = $107;$285 = $106;$cond$i$i437995 = $cond$i$i437992;$tobool$i$i$i432994 = $tobool$i$i$i432991;
     label = 110;
    }
    L109: do {
     if ((label|0) == 110) {
      label = 0;
      $sub = (($__p$0) + -1)|0;
      $arrayidx112 = (($__pat) + ($sub)|0);
      $111 = HEAP8[$arrayidx112>>0]|0;
      $switch = ($111&255)<(2);
      if ($switch) {
       $112 = HEAP32[$__size_$i3$i$i583>>2]|0;
       $conv$i$i$i = $113&255;
       $cond$i6$i = $tobool$i$i$i432994 ? $112 : $conv$i$i$i;
       $add$ptr$i = (($cond$i$i437995) + ($cond$i6$i)|0);
       $__sym_space_end$sroa$0$0 = $119;
       while(1) {
        $114 = $__sym_space_end$sroa$0$0;
        $cmp$i$i443 = ($add$ptr$i|0)==($114|0);
        if ($cmp$i$i443) {
         break;
        }
        $115 = HEAP8[$114>>0]|0;
        $cmp2$i444 = ($115<<24>>24)>(-1);
        if (!($cmp2$i444)) {
         break;
        }
        $conv$i445 = $115 << 24 >> 24;
        $116 = HEAP32[$__tab_$i216>>2]|0;
        $arrayidx$i447 = (($116) + ($conv$i445<<1)|0);
        $117 = HEAP16[$arrayidx$i447>>1]|0;
        $and3$i448 = $117 & 8192;
        $cmp6$i449 = ($and3$i448<<16>>16)==(0);
        if ($cmp6$i449) {
         break;
        }
        $incdec$ptr$i = ((($114)) + 1|0);
        $118 = $incdec$ptr$i;
        $__sym_space_end$sroa$0$0 = $118;
       }
       $sub$ptr$sub$i = (($__sym_space_end$sroa$0$0) - ($119))|0;
       $120 = HEAP8[$__size_$i$i464>>0]|0;
       $tobool$i$i465 = ($120<<24>>24)<(0);
       $121 = HEAP32[$__size_$i3$i466>>2]|0;
       $conv$i$i468 = $120&255;
       $cond$i470 = $tobool$i$i465 ? $121 : $conv$i$i468;
       $cmp139 = ($sub$ptr$sub$i>>>0)>($cond$i470>>>0);
       if ($cmp139) {
        $286 = $285;$287 = $113;$__sym_space_end$sroa$0$1 = $119;
       } else {
        $122 = HEAP32[$__spaces>>2]|0;
        $add$ptr$i497962 = (($122) + ($121)|0);
        $sub$i963 = (0 - ($sub$ptr$sub$i))|0;
        $add$ptr$i$i$i964 = (($add$ptr$i497962) + ($sub$i963)|0);
        $add$ptr$i497 = (($__spaces) + ($conv$i$i468)|0);
        $sub$i = (0 - ($sub$ptr$sub$i))|0;
        $add$ptr$i$i$i = (($add$ptr$i497) + ($sub$i)|0);
        $add$ptr$i552$pre$phiZZZ2D = $tobool$i$i465 ? $add$ptr$i497962 : $add$ptr$i497;
        $add$ptr$i$i$i965 = $tobool$i$i465 ? $add$ptr$i$i$i964 : $add$ptr$i$i$i;
        $123 = $add$ptr$i$i$i965;$agg$tmp26$sroa$0$0$ptr$i = $cond$i$i437995;
        while(1) {
         $cmp$i$i$i$i566 = ($123|0)==($add$ptr$i552$pre$phiZZZ2D|0);
         if ($cmp$i$i$i$i566) {
          $286 = $285;$287 = $113;$__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
          break L109;
         }
         $124 = HEAP8[$123>>0]|0;
         $125 = HEAP8[$agg$tmp26$sroa$0$0$ptr$i>>0]|0;
         $cmp$i$i$i = ($124<<24>>24)==($125<<24>>24);
         if (!($cmp$i$i$i)) {
          $286 = $285;$287 = $113;$__sym_space_end$sroa$0$1 = $119;
          break L109;
         }
         $incdec$ptr$i2$i$i = ((($123)) + 1|0);
         $incdec$ptr$i$i$i = ((($agg$tmp26$sroa$0$0$ptr$i)) + 1|0);
         $123 = $incdec$ptr$i2$i$i;$agg$tmp26$sroa$0$0$ptr$i = $incdec$ptr$i$i$i;
        }
       }
      } else {
       $286 = $285;$287 = $113;$__sym_space_end$sroa$0$1 = $119;
      }
     }
    } while(0);
    $__sym_space_end$sroa$0$1$ptr = $__sym_space_end$sroa$0$1;
    $126 = $287;$128 = $286;$134 = $281;$__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1$ptr;
    L124: while(1) {
     $tobool$i$i$i581 = ($126<<24>>24)<(0);
     $127 = HEAP32[$__size_$i3$i$i583>>2]|0;
     $conv$i$i$i586 = $126&255;
     $cond$i7$i588 = $tobool$i$i$i581 ? $128 : $__sym;
     $cond$i6$i589 = $tobool$i$i$i581 ? $127 : $conv$i$i$i586;
     $add$ptr$i590 = (($cond$i7$i588) + ($cond$i6$i589)|0);
     $cmp$i$i594 = ($__sym_curr_char$sroa$0$0$ptr|0)==($add$ptr$i590|0);
     if ($cmp$i$i594) {
      break;
     }
     $129 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i596 = ($129|0)==(0|0);
     do {
      if ($tobool$i$i$i596) {
       $288 = 1;
      } else {
       $__ninp_$i$i$i$i597 = ((($129)) + 12|0);
       $130 = HEAP32[$__ninp_$i$i$i$i597>>2]|0;
       $__einp_$i$i$i$i598 = ((($129)) + 16|0);
       $131 = HEAP32[$__einp_$i$i$i$i598>>2]|0;
       $cmp$i$i$i$i599 = ($130|0)==($131|0);
       if ($cmp$i$i$i$i599) {
        $vtable$i$i$i$i601 = HEAP32[$129>>2]|0;
        $vfn$i$i$i$i602 = ((($vtable$i$i$i$i601)) + 36|0);
        $132 = HEAP32[$vfn$i$i$i$i602>>2]|0;
        $call$i$i$i$i603 = (FUNCTION_TABLE_ii[$132 & 511]($129)|0);
        $retval$0$i$i$i$i607 = $call$i$i$i$i603;
       } else {
        $133 = HEAP8[$130>>0]|0;
        $call3$i$i$i$i605 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($133)|0);
        $retval$0$i$i$i$i607 = $call3$i$i$i$i605;
       }
       $call3$i$i$i608 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i609 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i607,$call3$i$i$i608)|0);
       if ($call4$i$i$i609) {
        HEAP32[$__b>>2] = 0;
        $288 = 1;
        break;
       } else {
        $$pre$i$i$i611 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i612 = ($$pre$i$i$i611|0)==(0|0);
        $288 = $phitmp$i$i$i612;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i616 = ($134|0)==(0|0);
     do {
      if ($tobool$i2$i$i616) {
       label = 136;
      } else {
       $__ninp_$i$i3$i$i618 = ((($134)) + 12|0);
       $135 = HEAP32[$__ninp_$i$i3$i$i618>>2]|0;
       $__einp_$i$i4$i$i619 = ((($134)) + 16|0);
       $136 = HEAP32[$__einp_$i$i4$i$i619>>2]|0;
       $cmp$i$i5$i$i620 = ($135|0)==($136|0);
       if ($cmp$i$i5$i$i620) {
        $vtable$i$i7$i$i622 = HEAP32[$134>>2]|0;
        $vfn$i$i8$i$i623 = ((($vtable$i$i7$i$i622)) + 36|0);
        $137 = HEAP32[$vfn$i$i8$i$i623>>2]|0;
        $call$i$i9$i$i624 = (FUNCTION_TABLE_ii[$137 & 511]($134)|0);
        $retval$0$i$i13$i$i628 = $call$i$i9$i$i624;
       } else {
        $138 = HEAP8[$135>>0]|0;
        $call3$i$i11$i$i626 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($138)|0);
        $retval$0$i$i13$i$i628 = $call3$i$i11$i$i626;
       }
       $call3$i14$i$i629 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i630 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i628,$call3$i14$i$i629)|0);
       if ($call4$i15$i$i630) {
        HEAP32[$__e>>2] = 0;
        label = 136;
        break;
       } else {
        if ($288) {
         $289 = $134;
         break;
        } else {
         break L124;
        }
       }
      }
     } while(0);
     if ((label|0) == 136) {
      label = 0;
      if ($288) {
       break;
      } else {
       $289 = 0;
      }
     }
     $139 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i638 = ((($139)) + 12|0);
     $140 = HEAP32[$__ninp_$i$i638>>2]|0;
     $__einp_$i$i639 = ((($139)) + 16|0);
     $141 = HEAP32[$__einp_$i$i639>>2]|0;
     $cmp$i$i640 = ($140|0)==($141|0);
     if ($cmp$i$i640) {
      $vtable$i$i641 = HEAP32[$139>>2]|0;
      $vfn$i$i642 = ((($vtable$i$i641)) + 36|0);
      $142 = HEAP32[$vfn$i$i642>>2]|0;
      $call$i$i643 = (FUNCTION_TABLE_ii[$142 & 511]($139)|0);
      $retval$0$i$i647 = $call$i$i643;
     } else {
      $143 = HEAP8[$140>>0]|0;
      $call3$i$i645 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($143)|0);
      $retval$0$i$i647 = $call3$i$i645;
     }
     $conv$i648 = $retval$0$i$i647&255;
     $144 = HEAP8[$__sym_curr_char$sroa$0$0$ptr>>0]|0;
     $cmp172 = ($144<<24>>24)==($conv$i648<<24>>24);
     if (!($cmp172)) {
      break;
     }
     $145 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i652 = ((($145)) + 12|0);
     $146 = HEAP32[$__ninp_$i$i652>>2]|0;
     $__einp_$i$i653 = ((($145)) + 16|0);
     $147 = HEAP32[$__einp_$i$i653>>2]|0;
     $cmp$i$i654 = ($146|0)==($147|0);
     if ($cmp$i$i654) {
      $vtable$i$i655 = HEAP32[$145>>2]|0;
      $vfn$i$i656 = ((($vtable$i$i655)) + 40|0);
      $148 = HEAP32[$vfn$i$i656>>2]|0;
      (FUNCTION_TABLE_ii[$148 & 511]($145)|0);
     } else {
      $incdec$ptr$i$i659 = ((($146)) + 1|0);
      HEAP32[$__ninp_$i$i652>>2] = $incdec$ptr$i$i659;
      $149 = HEAP8[$146>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($149)|0);
     }
     $incdec$ptr$i664 = ((($__sym_curr_char$sroa$0$0$ptr)) + 1|0);
     $$pre989 = HEAP8[$__size_$i$i$i431>>0]|0;
     $$pre990 = HEAP32[$__sym>>2]|0;
     $126 = $$pre989;$128 = $$pre990;$134 = $289;$__sym_curr_char$sroa$0$0$ptr = $incdec$ptr$i664;
    }
    if ($cmp102959) {
     $150 = HEAP8[$__size_$i$i$i431>>0]|0;
     $tobool$i$i$i667 = ($150<<24>>24)<(0);
     $151 = HEAP32[$__sym>>2]|0;
     $152 = HEAP32[$__size_$i3$i$i583>>2]|0;
     $conv$i$i$i672 = $150&255;
     $cond$i7$i674 = $tobool$i$i$i667 ? $151 : $__sym;
     $cond$i6$i675 = $tobool$i$i$i667 ? $152 : $conv$i$i$i672;
     $add$ptr$i676 = (($cond$i7$i674) + ($cond$i6$i675)|0);
     $cmp$i$i680 = ($__sym_curr_char$sroa$0$0$ptr|0)==($add$ptr$i676|0);
     if ($cmp$i$i680) {
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 148;
      break L21;
     }
    } else {
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   case 4:  {
    $159 = $281;$282 = $281;$__ng$0 = 0;
    L161: while(1) {
     $154 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i682 = ($154|0)==(0|0);
     do {
      if ($tobool$i$i$i682) {
       $290 = 1;
      } else {
       $__ninp_$i$i$i$i683 = ((($154)) + 12|0);
       $155 = HEAP32[$__ninp_$i$i$i$i683>>2]|0;
       $__einp_$i$i$i$i684 = ((($154)) + 16|0);
       $156 = HEAP32[$__einp_$i$i$i$i684>>2]|0;
       $cmp$i$i$i$i685 = ($155|0)==($156|0);
       if ($cmp$i$i$i$i685) {
        $vtable$i$i$i$i687 = HEAP32[$154>>2]|0;
        $vfn$i$i$i$i688 = ((($vtable$i$i$i$i687)) + 36|0);
        $157 = HEAP32[$vfn$i$i$i$i688>>2]|0;
        $call$i$i$i$i689 = (FUNCTION_TABLE_ii[$157 & 511]($154)|0);
        $retval$0$i$i$i$i693 = $call$i$i$i$i689;
       } else {
        $158 = HEAP8[$155>>0]|0;
        $call3$i$i$i$i691 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($158)|0);
        $retval$0$i$i$i$i693 = $call3$i$i$i$i691;
       }
       $call3$i$i$i694 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i695 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i693,$call3$i$i$i694)|0);
       if ($call4$i$i$i695) {
        HEAP32[$__b>>2] = 0;
        $290 = 1;
        break;
       } else {
        $$pre$i$i$i697 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i698 = ($$pre$i$i$i697|0)==(0|0);
        $290 = $phitmp$i$i$i698;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i702 = ($159|0)==(0|0);
     do {
      if ($tobool$i2$i$i702) {
       $291 = $282;
       label = 162;
      } else {
       $__ninp_$i$i3$i$i704 = ((($159)) + 12|0);
       $160 = HEAP32[$__ninp_$i$i3$i$i704>>2]|0;
       $__einp_$i$i4$i$i705 = ((($159)) + 16|0);
       $161 = HEAP32[$__einp_$i$i4$i$i705>>2]|0;
       $cmp$i$i5$i$i706 = ($160|0)==($161|0);
       if ($cmp$i$i5$i$i706) {
        $vtable$i$i7$i$i708 = HEAP32[$159>>2]|0;
        $vfn$i$i8$i$i709 = ((($vtable$i$i7$i$i708)) + 36|0);
        $162 = HEAP32[$vfn$i$i8$i$i709>>2]|0;
        $call$i$i9$i$i710 = (FUNCTION_TABLE_ii[$162 & 511]($159)|0);
        $retval$0$i$i13$i$i714 = $call$i$i9$i$i710;
       } else {
        $163 = HEAP8[$160>>0]|0;
        $call3$i$i11$i$i712 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
        $retval$0$i$i13$i$i714 = $call3$i$i11$i$i712;
       }
       $call3$i14$i$i715 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i716 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i714,$call3$i14$i$i715)|0);
       if ($call4$i15$i$i716) {
        HEAP32[$__e>>2] = 0;
        $291 = 0;
        label = 162;
        break;
       } else {
        if ($290) {
         $292 = $282;$293 = $159;
         break;
        } else {
         $195 = $282;
         break L161;
        }
       }
      }
     } while(0);
     if ((label|0) == 162) {
      label = 0;
      if ($290) {
       $195 = $291;
       break;
      } else {
       $292 = $291;$293 = 0;
      }
     }
     $164 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i724 = ((($164)) + 12|0);
     $165 = HEAP32[$__ninp_$i$i724>>2]|0;
     $__einp_$i$i725 = ((($164)) + 16|0);
     $166 = HEAP32[$__einp_$i$i725>>2]|0;
     $cmp$i$i726 = ($165|0)==($166|0);
     if ($cmp$i$i726) {
      $vtable$i$i727 = HEAP32[$164>>2]|0;
      $vfn$i$i728 = ((($vtable$i$i727)) + 36|0);
      $167 = HEAP32[$vfn$i$i728>>2]|0;
      $call$i$i729 = (FUNCTION_TABLE_ii[$167 & 511]($164)|0);
      $retval$0$i$i733 = $call$i$i729;
     } else {
      $168 = HEAP8[$165>>0]|0;
      $call3$i$i731 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($168)|0);
      $retval$0$i$i733 = $call3$i$i731;
     }
     $conv$i734 = $retval$0$i$i733&255;
     $cmp2$i736 = ($conv$i734<<24>>24)>(-1);
     if ($cmp2$i736) {
      $sext972 = $retval$0$i$i733 << 24;
      $conv$i737 = $sext972 >> 24;
      $169 = HEAP32[$__tab_$i216>>2]|0;
      $arrayidx$i739 = (($169) + ($conv$i737<<1)|0);
      $170 = HEAP16[$arrayidx$i739>>1]|0;
      $and3$i740 = $170 & 2048;
      $cmp6$i741 = ($and3$i740<<16>>16)==(0);
      if ($cmp6$i741) {
       label = 172;
      } else {
       $171 = HEAP32[$__wn>>2]|0;
       $172 = HEAP32[$__we$addr>>2]|0;
       $cmp201 = ($171|0)==($172|0);
       if ($cmp201) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we$addr);
        $$pre = HEAP32[$__wn>>2]|0;
        $173 = $$pre;
       } else {
        $173 = $171;
       }
       $incdec$ptr = ((($173)) + 1|0);
       HEAP32[$__wn>>2] = $incdec$ptr;
       HEAP8[$173>>0] = $conv$i734;
       $inc = (($__ng$0) + 1)|0;
       $__ng$2$ph = $inc;
      }
     } else {
      label = 172;
     }
     if ((label|0) == 172) {
      label = 0;
      $174 = HEAP8[$__size_$i$i746>>0]|0;
      $tobool$i$i747 = ($174<<24>>24)<(0);
      $175 = HEAP32[$__size_$i3$i748>>2]|0;
      $conv$i$i750 = $174&255;
      $cond$i752 = $tobool$i$i747 ? $175 : $conv$i$i750;
      $cmp206 = ($cond$i752|0)!=(0);
      $cmp208 = ($__ng$0|0)!=(0);
      $or$cond7 = $cmp208 & $cmp206;
      $176 = HEAP8[$__ts>>0]|0;
      $cmp212 = ($176<<24>>24)==($conv$i734<<24>>24);
      $or$cond96 = $cmp212 & $or$cond7;
      if (!($or$cond96)) {
       $195 = $292;
       break;
      }
      $177 = HEAP32[$__gn>>2]|0;
      $178 = HEAP32[$__ge>>2]|0;
      $cmp214 = ($177|0)==($178|0);
      if ($cmp214) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre987 = HEAP32[$__gn>>2]|0;
       $179 = $$pre987;
      } else {
       $179 = $177;
      }
      $incdec$ptr217 = ((($179)) + 4|0);
      HEAP32[$__gn>>2] = $incdec$ptr217;
      HEAP32[$179>>2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $180 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i755 = ((($180)) + 12|0);
     $181 = HEAP32[$__ninp_$i$i755>>2]|0;
     $__einp_$i$i756 = ((($180)) + 16|0);
     $182 = HEAP32[$__einp_$i$i756>>2]|0;
     $cmp$i$i757 = ($181|0)==($182|0);
     if ($cmp$i$i757) {
      $vtable$i$i758 = HEAP32[$180>>2]|0;
      $vfn$i$i759 = ((($vtable$i$i758)) + 40|0);
      $183 = HEAP32[$vfn$i$i759>>2]|0;
      (FUNCTION_TABLE_ii[$183 & 511]($180)|0);
     } else {
      $incdec$ptr$i$i762 = ((($181)) + 1|0);
      HEAP32[$__ninp_$i$i755>>2] = $incdec$ptr$i$i762;
      $184 = HEAP8[$181>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($184)|0);
     }
     $159 = $293;$282 = $292;$__ng$0 = $__ng$2$ph;
    }
    $185 = HEAP32[$__gb>>2]|0;
    $186 = HEAP32[$__gn>>2]|0;
    $cmp226 = ($185|0)!=($186|0);
    $cmp228 = ($__ng$0|0)!=(0);
    $or$cond8 = $cmp228 & $cmp226;
    if ($or$cond8) {
     $187 = HEAP32[$__ge>>2]|0;
     $cmp230 = ($186|0)==($187|0);
     if ($cmp230) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre988 = HEAP32[$__gn>>2]|0;
      $188 = $$pre988;
     } else {
      $188 = $186;
     }
     $incdec$ptr233 = ((($188)) + 4|0);
     HEAP32[$__gn>>2] = $incdec$ptr233;
     HEAP32[$188>>2] = $__ng$0;
    }
    $189 = HEAP32[$__fd>>2]|0;
    $cmp235 = ($189|0)>(0);
    L213: do {
     if ($cmp235) {
      $190 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i768 = ($190|0)==(0|0);
      do {
       if ($tobool$i$i$i768) {
        $294 = 1;
       } else {
        $__ninp_$i$i$i$i769 = ((($190)) + 12|0);
        $191 = HEAP32[$__ninp_$i$i$i$i769>>2]|0;
        $__einp_$i$i$i$i770 = ((($190)) + 16|0);
        $192 = HEAP32[$__einp_$i$i$i$i770>>2]|0;
        $cmp$i$i$i$i771 = ($191|0)==($192|0);
        if ($cmp$i$i$i$i771) {
         $vtable$i$i$i$i773 = HEAP32[$190>>2]|0;
         $vfn$i$i$i$i774 = ((($vtable$i$i$i$i773)) + 36|0);
         $193 = HEAP32[$vfn$i$i$i$i774>>2]|0;
         $call$i$i$i$i775 = (FUNCTION_TABLE_ii[$193 & 511]($190)|0);
         $retval$0$i$i$i$i779 = $call$i$i$i$i775;
        } else {
         $194 = HEAP8[$191>>0]|0;
         $call3$i$i$i$i777 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($194)|0);
         $retval$0$i$i$i$i779 = $call3$i$i$i$i777;
        }
        $call3$i$i$i780 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i781 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i779,$call3$i$i$i780)|0);
        if ($call4$i$i$i781) {
         HEAP32[$__b>>2] = 0;
         $294 = 1;
         break;
        } else {
         $$pre$i$i$i783 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i784 = ($$pre$i$i$i783|0)==(0|0);
         $294 = $phitmp$i$i$i784;
         break;
        }
       }
      } while(0);
      $tobool$i2$i$i788 = ($195|0)==(0|0);
      do {
       if ($tobool$i2$i$i788) {
        label = 198;
       } else {
        $__ninp_$i$i3$i$i790 = ((($195)) + 12|0);
        $196 = HEAP32[$__ninp_$i$i3$i$i790>>2]|0;
        $__einp_$i$i4$i$i791 = ((($195)) + 16|0);
        $197 = HEAP32[$__einp_$i$i4$i$i791>>2]|0;
        $cmp$i$i5$i$i792 = ($196|0)==($197|0);
        if ($cmp$i$i5$i$i792) {
         $vtable$i$i7$i$i794 = HEAP32[$195>>2]|0;
         $vfn$i$i8$i$i795 = ((($vtable$i$i7$i$i794)) + 36|0);
         $198 = HEAP32[$vfn$i$i8$i$i795>>2]|0;
         $call$i$i9$i$i796 = (FUNCTION_TABLE_ii[$198 & 511]($195)|0);
         $retval$0$i$i13$i$i800 = $call$i$i9$i$i796;
        } else {
         $199 = HEAP8[$196>>0]|0;
         $call3$i$i11$i$i798 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($199)|0);
         $retval$0$i$i13$i$i800 = $call3$i$i11$i$i798;
        }
        $call3$i14$i$i801 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i802 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i800,$call3$i14$i$i801)|0);
        if ($call4$i15$i$i802) {
         HEAP32[$__e>>2] = 0;
         label = 198;
         break;
        } else {
         if ($294) {
          $295 = $195;
          break;
         } else {
          label = 204;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 198) {
       label = 0;
       if ($294) {
        label = 204;
        break L21;
       } else {
        $295 = 0;
       }
      }
      $200 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i811 = ((($200)) + 12|0);
      $201 = HEAP32[$__ninp_$i$i811>>2]|0;
      $__einp_$i$i812 = ((($200)) + 16|0);
      $202 = HEAP32[$__einp_$i$i812>>2]|0;
      $cmp$i$i813 = ($201|0)==($202|0);
      if ($cmp$i$i813) {
       $vtable$i$i814 = HEAP32[$200>>2]|0;
       $vfn$i$i815 = ((($vtable$i$i814)) + 36|0);
       $203 = HEAP32[$vfn$i$i815>>2]|0;
       $call$i$i816 = (FUNCTION_TABLE_ii[$203 & 511]($200)|0);
       $retval$0$i$i820 = $call$i$i816;
      } else {
       $204 = HEAP8[$201>>0]|0;
       $call3$i$i818 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($204)|0);
       $retval$0$i$i820 = $call3$i$i818;
      }
      $conv$i821 = $retval$0$i$i820&255;
      $205 = HEAP8[$__dp>>0]|0;
      $cmp242 = ($205<<24>>24)==($conv$i821<<24>>24);
      if (!($cmp242)) {
       label = 204;
       break L21;
      }
      $207 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i824 = ((($207)) + 12|0);
      $208 = HEAP32[$__ninp_$i$i824>>2]|0;
      $__einp_$i$i825 = ((($207)) + 16|0);
      $209 = HEAP32[$__einp_$i$i825>>2]|0;
      $cmp$i$i826 = ($208|0)==($209|0);
      if ($cmp$i$i826) {
       $vtable$i$i827 = HEAP32[$207>>2]|0;
       $vfn$i$i828 = ((($vtable$i$i827)) + 40|0);
       $210 = HEAP32[$vfn$i$i828>>2]|0;
       (FUNCTION_TABLE_ii[$210 & 511]($207)|0);
      } else {
       $incdec$ptr$i$i831 = ((($208)) + 1|0);
       HEAP32[$__ninp_$i$i824>>2] = $incdec$ptr$i$i831;
       $211 = HEAP8[$208>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($211)|0);
      }
      $218 = $295;
      while(1) {
       $212 = HEAP32[$__fd>>2]|0;
       $cmp248 = ($212|0)>(0);
       if (!($cmp248)) {
        break L213;
       }
       $213 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i836 = ($213|0)==(0|0);
       do {
        if ($tobool$i$i$i836) {
         $296 = 1;
        } else {
         $__ninp_$i$i$i$i837 = ((($213)) + 12|0);
         $214 = HEAP32[$__ninp_$i$i$i$i837>>2]|0;
         $__einp_$i$i$i$i838 = ((($213)) + 16|0);
         $215 = HEAP32[$__einp_$i$i$i$i838>>2]|0;
         $cmp$i$i$i$i839 = ($214|0)==($215|0);
         if ($cmp$i$i$i$i839) {
          $vtable$i$i$i$i841 = HEAP32[$213>>2]|0;
          $vfn$i$i$i$i842 = ((($vtable$i$i$i$i841)) + 36|0);
          $216 = HEAP32[$vfn$i$i$i$i842>>2]|0;
          $call$i$i$i$i843 = (FUNCTION_TABLE_ii[$216 & 511]($213)|0);
          $retval$0$i$i$i$i847 = $call$i$i$i$i843;
         } else {
          $217 = HEAP8[$214>>0]|0;
          $call3$i$i$i$i845 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($217)|0);
          $retval$0$i$i$i$i847 = $call3$i$i$i$i845;
         }
         $call3$i$i$i848 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i$i$i849 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i847,$call3$i$i$i848)|0);
         if ($call4$i$i$i849) {
          HEAP32[$__b>>2] = 0;
          $296 = 1;
          break;
         } else {
          $$pre$i$i$i851 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i852 = ($$pre$i$i$i851|0)==(0|0);
          $296 = $phitmp$i$i$i852;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i856 = ($218|0)==(0|0);
       do {
        if ($tobool$i2$i$i856) {
         label = 223;
        } else {
         $__ninp_$i$i3$i$i858 = ((($218)) + 12|0);
         $219 = HEAP32[$__ninp_$i$i3$i$i858>>2]|0;
         $__einp_$i$i4$i$i859 = ((($218)) + 16|0);
         $220 = HEAP32[$__einp_$i$i4$i$i859>>2]|0;
         $cmp$i$i5$i$i860 = ($219|0)==($220|0);
         if ($cmp$i$i5$i$i860) {
          $vtable$i$i7$i$i862 = HEAP32[$218>>2]|0;
          $vfn$i$i8$i$i863 = ((($vtable$i$i7$i$i862)) + 36|0);
          $221 = HEAP32[$vfn$i$i8$i$i863>>2]|0;
          $call$i$i9$i$i864 = (FUNCTION_TABLE_ii[$221 & 511]($218)|0);
          $retval$0$i$i13$i$i868 = $call$i$i9$i$i864;
         } else {
          $222 = HEAP8[$219>>0]|0;
          $call3$i$i11$i$i866 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($222)|0);
          $retval$0$i$i13$i$i868 = $call3$i$i11$i$i866;
         }
         $call3$i14$i$i869 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i870 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i868,$call3$i14$i$i869)|0);
         if ($call4$i15$i$i870) {
          HEAP32[$__e>>2] = 0;
          label = 223;
          break;
         } else {
          if ($296) {
           $297 = $218;
           break;
          } else {
           label = 230;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 223) {
        label = 0;
        if ($296) {
         label = 230;
         break L21;
        } else {
         $297 = 0;
        }
       }
       $223 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i879 = ((($223)) + 12|0);
       $224 = HEAP32[$__ninp_$i$i879>>2]|0;
       $__einp_$i$i880 = ((($223)) + 16|0);
       $225 = HEAP32[$__einp_$i$i880>>2]|0;
       $cmp$i$i881 = ($224|0)==($225|0);
       if ($cmp$i$i881) {
        $vtable$i$i882 = HEAP32[$223>>2]|0;
        $vfn$i$i883 = ((($vtable$i$i882)) + 36|0);
        $226 = HEAP32[$vfn$i$i883>>2]|0;
        $call$i$i884 = (FUNCTION_TABLE_ii[$226 & 511]($223)|0);
        $retval$0$i$i888 = $call$i$i884;
       } else {
        $227 = HEAP8[$224>>0]|0;
        $call3$i$i886 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($227)|0);
        $retval$0$i$i888 = $call3$i$i886;
       }
       $conv$i889 = $retval$0$i$i888&255;
       $cmp2$i891 = ($conv$i889<<24>>24)>(-1);
       if (!($cmp2$i891)) {
        label = 230;
        break L21;
       }
       $sext = $retval$0$i$i888 << 24;
       $conv$i892 = $sext >> 24;
       $228 = HEAP32[$__tab_$i216>>2]|0;
       $arrayidx$i894 = (($228) + ($conv$i892<<1)|0);
       $229 = HEAP16[$arrayidx$i894>>1]|0;
       $and3$i895 = $229 & 2048;
       $cmp6$i896 = ($and3$i895<<16>>16)==(0);
       if ($cmp6$i896) {
        label = 230;
        break L21;
       }
       $231 = HEAP32[$__wn>>2]|0;
       $232 = HEAP32[$__we$addr>>2]|0;
       $cmp257 = ($231|0)==($232|0);
       if ($cmp257) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we$addr);
       }
       $233 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i901 = ((($233)) + 12|0);
       $234 = HEAP32[$__ninp_$i$i901>>2]|0;
       $__einp_$i$i902 = ((($233)) + 16|0);
       $235 = HEAP32[$__einp_$i$i902>>2]|0;
       $cmp$i$i903 = ($234|0)==($235|0);
       if ($cmp$i$i903) {
        $vtable$i$i904 = HEAP32[$233>>2]|0;
        $vfn$i$i905 = ((($vtable$i$i904)) + 36|0);
        $236 = HEAP32[$vfn$i$i905>>2]|0;
        $call$i$i906 = (FUNCTION_TABLE_ii[$236 & 511]($233)|0);
        $retval$0$i$i910 = $call$i$i906;
       } else {
        $237 = HEAP8[$234>>0]|0;
        $call3$i$i908 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($237)|0);
        $retval$0$i$i910 = $call3$i$i908;
       }
       $conv$i911 = $retval$0$i$i910&255;
       $238 = HEAP32[$__wn>>2]|0;
       $incdec$ptr261 = ((($238)) + 1|0);
       HEAP32[$__wn>>2] = $incdec$ptr261;
       HEAP8[$238>>0] = $conv$i911;
       $239 = HEAP32[$__fd>>2]|0;
       $dec = (($239) + -1)|0;
       HEAP32[$__fd>>2] = $dec;
       $240 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i914 = ((($240)) + 12|0);
       $241 = HEAP32[$__ninp_$i$i914>>2]|0;
       $__einp_$i$i915 = ((($240)) + 16|0);
       $242 = HEAP32[$__einp_$i$i915>>2]|0;
       $cmp$i$i916 = ($241|0)==($242|0);
       if ($cmp$i$i916) {
        $vtable$i$i917 = HEAP32[$240>>2]|0;
        $vfn$i$i918 = ((($vtable$i$i917)) + 40|0);
        $243 = HEAP32[$vfn$i$i918>>2]|0;
        (FUNCTION_TABLE_ii[$243 & 511]($240)|0);
       } else {
        $incdec$ptr$i$i921 = ((($241)) + 1|0);
        HEAP32[$__ninp_$i$i914>>2] = $incdec$ptr$i$i921;
        $244 = HEAP8[$241>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($244)|0);
       }
       $218 = $297;
      }
     }
    } while(0);
    $245 = HEAP32[$__wn>>2]|0;
    $246 = HEAP32[$__wb>>2]|0;
    $cmp267 = ($245|0)==($246|0);
    if ($cmp267) {
     label = 241;
     break L21;
    } else {
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   default: {
    $__trailing_sign$1 = $__trailing_sign$0;
   }
   }
  } while(0);
  L289: do {
   if ((label|0) == 47) {
    label = 0;
    $32 = $281;
    while(1) {
     $27 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i160 = ($27|0)==(0|0);
     do {
      if ($tobool$i$i$i160) {
       $283 = 1;
      } else {
       $__ninp_$i$i$i$i161 = ((($27)) + 12|0);
       $28 = HEAP32[$__ninp_$i$i$i$i161>>2]|0;
       $__einp_$i$i$i$i162 = ((($27)) + 16|0);
       $29 = HEAP32[$__einp_$i$i$i$i162>>2]|0;
       $cmp$i$i$i$i163 = ($28|0)==($29|0);
       if ($cmp$i$i$i$i163) {
        $vtable$i$i$i$i165 = HEAP32[$27>>2]|0;
        $vfn$i$i$i$i166 = ((($vtable$i$i$i$i165)) + 36|0);
        $30 = HEAP32[$vfn$i$i$i$i166>>2]|0;
        $call$i$i$i$i167 = (FUNCTION_TABLE_ii[$30 & 511]($27)|0);
        $retval$0$i$i$i$i171 = $call$i$i$i$i167;
       } else {
        $31 = HEAP8[$28>>0]|0;
        $call3$i$i$i$i169 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
        $retval$0$i$i$i$i171 = $call3$i$i$i$i169;
       }
       $call3$i$i$i172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i171,$call3$i$i$i172)|0);
       if ($call4$i$i$i173) {
        HEAP32[$__b>>2] = 0;
        $283 = 1;
        break;
       } else {
        $$pre$i$i$i175 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i176 = ($$pre$i$i$i175|0)==(0|0);
        $283 = $phitmp$i$i$i176;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i180 = ($32|0)==(0|0);
     do {
      if ($tobool$i2$i$i180) {
       label = 61;
      } else {
       $__ninp_$i$i3$i$i182 = ((($32)) + 12|0);
       $33 = HEAP32[$__ninp_$i$i3$i$i182>>2]|0;
       $__einp_$i$i4$i$i183 = ((($32)) + 16|0);
       $34 = HEAP32[$__einp_$i$i4$i$i183>>2]|0;
       $cmp$i$i5$i$i184 = ($33|0)==($34|0);
       if ($cmp$i$i5$i$i184) {
        $vtable$i$i7$i$i186 = HEAP32[$32>>2]|0;
        $vfn$i$i8$i$i187 = ((($vtable$i$i7$i$i186)) + 36|0);
        $35 = HEAP32[$vfn$i$i8$i$i187>>2]|0;
        $call$i$i9$i$i188 = (FUNCTION_TABLE_ii[$35 & 511]($32)|0);
        $retval$0$i$i13$i$i192 = $call$i$i9$i$i188;
       } else {
        $36 = HEAP8[$33>>0]|0;
        $call3$i$i11$i$i190 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($36)|0);
        $retval$0$i$i13$i$i192 = $call3$i$i11$i$i190;
       }
       $call3$i14$i$i193 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i194 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i192,$call3$i14$i$i193)|0);
       if ($call4$i15$i$i194) {
        HEAP32[$__e>>2] = 0;
        label = 61;
        break;
       } else {
        if ($283) {
         $284 = $32;
         break;
        } else {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L289;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      label = 0;
      if ($283) {
       $__trailing_sign$1 = $__trailing_sign$0;
       break L289;
      } else {
       $284 = 0;
      }
     }
     $37 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i202 = ((($37)) + 12|0);
     $38 = HEAP32[$__ninp_$i$i202>>2]|0;
     $__einp_$i$i203 = ((($37)) + 16|0);
     $39 = HEAP32[$__einp_$i$i203>>2]|0;
     $cmp$i$i204 = ($38|0)==($39|0);
     if ($cmp$i$i204) {
      $vtable$i$i205 = HEAP32[$37>>2]|0;
      $vfn$i$i206 = ((($vtable$i$i205)) + 36|0);
      $40 = HEAP32[$vfn$i$i206>>2]|0;
      $call$i$i207 = (FUNCTION_TABLE_ii[$40 & 511]($37)|0);
      $retval$0$i$i211 = $call$i$i207;
     } else {
      $41 = HEAP8[$38>>0]|0;
      $call3$i$i209 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
      $retval$0$i$i211 = $call3$i$i209;
     }
     $conv$i212 = $retval$0$i$i211&255;
     $cmp2$i214 = ($conv$i212<<24>>24)>(-1);
     if (!($cmp2$i214)) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     }
     $sext973 = $retval$0$i$i211 << 24;
     $conv$i215 = $sext973 >> 24;
     $42 = HEAP32[$__tab_$i216>>2]|0;
     $arrayidx$i217 = (($42) + ($conv$i215<<1)|0);
     $43 = HEAP16[$arrayidx$i217>>1]|0;
     $and3$i218 = $43 & 8192;
     $cmp6$i219 = ($and3$i218<<16>>16)==(0);
     if ($cmp6$i219) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     }
     $44 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i224 = ((($44)) + 12|0);
     $45 = HEAP32[$__ninp_$i$i224>>2]|0;
     $__einp_$i$i225 = ((($44)) + 16|0);
     $46 = HEAP32[$__einp_$i$i225>>2]|0;
     $cmp$i$i226 = ($45|0)==($46|0);
     if ($cmp$i$i226) {
      $vtable$i$i227 = HEAP32[$44>>2]|0;
      $vfn$i$i228 = ((($vtable$i$i227)) + 40|0);
      $47 = HEAP32[$vfn$i$i228>>2]|0;
      $call$i$i229 = (FUNCTION_TABLE_ii[$47 & 511]($44)|0);
      $retval$0$i$i234 = $call$i$i229;
     } else {
      $incdec$ptr$i$i231 = ((($45)) + 1|0);
      HEAP32[$__ninp_$i$i224>>2] = $incdec$ptr$i$i231;
      $48 = HEAP8[$45>>0]|0;
      $call3$i$i232 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
      $retval$0$i$i234 = $call3$i$i232;
     }
     $conv$i235 = $retval$0$i$i234&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$conv$i235);
     $32 = $284;
    }
   }
  } while(0);
  $inc275 = (($__p$0) + 1)|0;
  $__p$0 = $inc275;$__trailing_sign$0 = $__trailing_sign$1;
 }
 L326: do {
  if ((label|0) == 45) {
   $26 = HEAP32[$__err>>2]|0;
   $or = $26 | 4;
   HEAP32[$__err>>2] = $or;
   $retval$10 = 0;
  }
  else if ((label|0) == 105) {
   $102 = HEAP32[$__err>>2]|0;
   $or85 = $102 | 4;
   HEAP32[$__err>>2] = $or85;
   $retval$10 = 0;
  }
  else if ((label|0) == 148) {
   $153 = HEAP32[$__err>>2]|0;
   $or186 = $153 | 4;
   HEAP32[$__err>>2] = $or186;
   $retval$10 = 0;
  }
  else if ((label|0) == 204) {
   $206 = HEAP32[$__err>>2]|0;
   $or244 = $206 | 4;
   HEAP32[$__err>>2] = $or244;
   $retval$10 = 0;
  }
  else if ((label|0) == 230) {
   $230 = HEAP32[$__err>>2]|0;
   $or255 = $230 | 4;
   HEAP32[$__err>>2] = $or255;
   $retval$10 = 0;
  }
  else if ((label|0) == 241) {
   $247 = HEAP32[$__err>>2]|0;
   $or269 = $247 | 4;
   HEAP32[$__err>>2] = $or269;
   $retval$10 = 0;
  }
  else if ((label|0) == 243) {
   $tobool279 = ($__trailing_sign$0|0)==(0|0);
   L328: do {
    if (!($tobool279)) {
     $__size_$i$i927 = ((($__trailing_sign$0)) + 11|0);
     $__size_$i3$i929 = ((($__trailing_sign$0)) + 4|0);
     $__i$0 = 1;
     L330: while(1) {
      $248 = HEAP8[$__size_$i$i927>>0]|0;
      $tobool$i$i928 = ($248<<24>>24)<(0);
      if ($tobool$i$i928) {
       $249 = HEAP32[$__size_$i3$i929>>2]|0;
       $cond$i933 = $249;
      } else {
       $conv$i$i931 = $248&255;
       $cond$i933 = $conv$i$i931;
      }
      $cmp283 = ($__i$0>>>0)<($cond$i933>>>0);
      if (!($cmp283)) {
       break L328;
      }
      $250 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i500 = ($250|0)==(0|0);
      do {
       if ($tobool$i$i$i500) {
        $298 = 1;
       } else {
        $__ninp_$i$i$i$i501 = ((($250)) + 12|0);
        $251 = HEAP32[$__ninp_$i$i$i$i501>>2]|0;
        $__einp_$i$i$i$i502 = ((($250)) + 16|0);
        $252 = HEAP32[$__einp_$i$i$i$i502>>2]|0;
        $cmp$i$i$i$i503 = ($251|0)==($252|0);
        if ($cmp$i$i$i$i503) {
         $vtable$i$i$i$i505 = HEAP32[$250>>2]|0;
         $vfn$i$i$i$i506 = ((($vtable$i$i$i$i505)) + 36|0);
         $253 = HEAP32[$vfn$i$i$i$i506>>2]|0;
         $call$i$i$i$i507 = (FUNCTION_TABLE_ii[$253 & 511]($250)|0);
         $retval$0$i$i$i$i511 = $call$i$i$i$i507;
        } else {
         $254 = HEAP8[$251>>0]|0;
         $call3$i$i$i$i509 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($254)|0);
         $retval$0$i$i$i$i511 = $call3$i$i$i$i509;
        }
        $call3$i$i$i512 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i513 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i511,$call3$i$i$i512)|0);
        if ($call4$i$i$i513) {
         HEAP32[$__b>>2] = 0;
         $298 = 1;
         break;
        } else {
         $$pre$i$i$i515 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i516 = ($$pre$i$i$i515|0)==(0|0);
         $298 = $phitmp$i$i$i516;
         break;
        }
       }
      } while(0);
      $255 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i520 = ($255|0)==(0|0);
      do {
       if ($tobool$i2$i$i520) {
        label = 262;
       } else {
        $__ninp_$i$i3$i$i522 = ((($255)) + 12|0);
        $256 = HEAP32[$__ninp_$i$i3$i$i522>>2]|0;
        $__einp_$i$i4$i$i523 = ((($255)) + 16|0);
        $257 = HEAP32[$__einp_$i$i4$i$i523>>2]|0;
        $cmp$i$i5$i$i524 = ($256|0)==($257|0);
        if ($cmp$i$i5$i$i524) {
         $vtable$i$i7$i$i526 = HEAP32[$255>>2]|0;
         $vfn$i$i8$i$i527 = ((($vtable$i$i7$i$i526)) + 36|0);
         $258 = HEAP32[$vfn$i$i8$i$i527>>2]|0;
         $call$i$i9$i$i528 = (FUNCTION_TABLE_ii[$258 & 511]($255)|0);
         $retval$0$i$i13$i$i532 = $call$i$i9$i$i528;
        } else {
         $259 = HEAP8[$256>>0]|0;
         $call3$i$i11$i$i530 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($259)|0);
         $retval$0$i$i13$i$i532 = $call3$i$i11$i$i530;
        }
        $call3$i14$i$i533 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i534 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i532,$call3$i14$i$i533)|0);
        if ($call4$i15$i$i534) {
         HEAP32[$__e>>2] = 0;
         label = 262;
         break;
        } else {
         if ($298) {
          break;
         } else {
          break L330;
         }
        }
       }
      } while(0);
      if ((label|0) == 262) {
       label = 0;
       if ($298) {
        break;
       }
      }
      $260 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i474 = ((($260)) + 12|0);
      $261 = HEAP32[$__ninp_$i$i474>>2]|0;
      $__einp_$i$i475 = ((($260)) + 16|0);
      $262 = HEAP32[$__einp_$i$i475>>2]|0;
      $cmp$i$i476 = ($261|0)==($262|0);
      if ($cmp$i$i476) {
       $vtable$i$i477 = HEAP32[$260>>2]|0;
       $vfn$i$i478 = ((($vtable$i$i477)) + 36|0);
       $263 = HEAP32[$vfn$i$i478>>2]|0;
       $call$i$i479 = (FUNCTION_TABLE_ii[$263 & 511]($260)|0);
       $retval$0$i$i483 = $call$i$i479;
      } else {
       $264 = HEAP8[$261>>0]|0;
       $call3$i$i481 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($264)|0);
       $retval$0$i$i483 = $call3$i$i481;
      }
      $conv$i484 = $retval$0$i$i483&255;
      $265 = HEAP8[$__size_$i$i927>>0]|0;
      $tobool$i$i$i$i = ($265<<24>>24)<(0);
      if ($tobool$i$i$i$i) {
       $266 = HEAP32[$__trailing_sign$0>>2]|0;
       $cond$i$i$i = $266;
      } else {
       $cond$i$i$i = $__trailing_sign$0;
      }
      $add$ptr$i472 = (($cond$i$i$i) + ($__i$0)|0);
      $267 = HEAP8[$add$ptr$i472>>0]|0;
      $cmp292 = ($267<<24>>24)==($conv$i484<<24>>24);
      if (!($cmp292)) {
       break;
      }
      $inc297 = (($__i$0) + 1)|0;
      $269 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i = ((($269)) + 12|0);
      $270 = HEAP32[$__ninp_$i$i>>2]|0;
      $__einp_$i$i = ((($269)) + 16|0);
      $271 = HEAP32[$__einp_$i$i>>2]|0;
      $cmp$i$i = ($270|0)==($271|0);
      if ($cmp$i$i) {
       $vtable$i$i = HEAP32[$269>>2]|0;
       $vfn$i$i = ((($vtable$i$i)) + 40|0);
       $272 = HEAP32[$vfn$i$i>>2]|0;
       (FUNCTION_TABLE_ii[$272 & 511]($269)|0);
      } else {
       $incdec$ptr$i$i = ((($270)) + 1|0);
       HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
       $273 = HEAP8[$270>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($273)|0);
      }
      $__i$0 = $inc297;
     }
     $268 = HEAP32[$__err>>2]|0;
     $or294 = $268 | 4;
     HEAP32[$__err>>2] = $or294;
     $retval$10 = 0;
     break L326;
    }
   } while(0);
   $274 = HEAP32[$__gb>>2]|0;
   $275 = HEAP32[$__gn>>2]|0;
   $cmp304 = ($274|0)==($275|0);
   if ($cmp304) {
    $retval$10 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$274,$275,$__et);
    $276 = HEAP32[$__et>>2]|0;
    $tobool307 = ($276|0)==(0);
    if ($tobool307) {
     $retval$10 = 1;
     break;
    } else {
     $277 = HEAP32[$__err>>2]|0;
     $or309 = $277 | 4;
     HEAP32[$__err>>2] = $or309;
     $retval$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $278 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i = ($278|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__gb)) + 4|0);
  $279 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$279 & 511]($278);
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $__size_$i3$i42 = 0;
 var $__size_$i3$i68 = 0, $__temp = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add20 = 0, $and$i$i = 0, $call8 = 0, $cmp = 0, $cmp18 = 0, $cond$i$i6380 = 0, $cond$i$i82 = 0, $cond$i32 = 0, $cond$i38 = 0, $cond$i46 = 0, $cond$i72 = 0, $cond$i74 = 0, $conv$i$i = 0, $conv$i$i27 = 0, $conv$i$i44 = 0;
 var $conv$i$i70 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $phitmp$i = 0, $ref$tmp = 0, $scevgep = 0, $scevgep84 = 0, $scevgep85 = 0, $sub = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub15 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i26 = 0, $tobool$i$i35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sub$ptr$rhs$cast$i$i = $__first;
 $__temp = sp;
 $ref$tmp = sp + 12|0;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($this)) + 4|0);
  $1 = HEAP32[$__size_$i3$i>>2]|0;
  $__cap_$i$i = ((($this)) + 8|0);
  $2 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i32 = $phitmp$i;$cond$i74 = $1;
 } else {
  $conv$i$i = $0&255;
  $cond$i32 = 10;$cond$i74 = $conv$i$i;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $tobool = ($sub$ptr$sub$i$i|0)==(0);
 do {
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $__size_$i3$i68 = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i68>>2]|0;
    $cond$i$i6380 = $3;$cond$i72 = $4;
   } else {
    $conv$i$i70 = $0&255;
    $cond$i$i6380 = $this;$cond$i72 = $conv$i$i70;
   }
   $add$ptr = (($cond$i$i6380) + ($cond$i72)|0);
   $call8 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first,$cond$i$i6380,$add$ptr)|0);
   if ($call8) {
    ;HEAP32[$__temp>>2]=0|0;HEAP32[$__temp+4>>2]=0|0;HEAP32[$__temp+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp,$__first,$__last);
    $__size_$i$i$i = ((($__temp)) + 11|0);
    $5 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i$i = ($5<<24>>24)<(0);
    $6 = HEAP32[$__temp>>2]|0;
    $__size_$i3$i42 = ((($__temp)) + 4|0);
    $7 = HEAP32[$__size_$i3$i42>>2]|0;
    $conv$i$i44 = $5&255;
    $cond$i$i82 = $tobool$i$i$i ? $6 : $__temp;
    $cond$i46 = $tobool$i$i$i ? $7 : $conv$i$i44;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this,$cond$i$i82,$cond$i46)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__temp);
    break;
   }
   $sub = (($cond$i32) - ($cond$i74))|0;
   $cmp = ($sub>>>0)<($sub$ptr$sub$i$i>>>0);
   if ($cmp) {
    $add = (($cond$i74) + ($sub$ptr$sub$i$i))|0;
    $sub15 = (($add) - ($cond$i32))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$cond$i32,$sub15,$cond$i74,$cond$i74,0,0);
   }
   $8 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i35 = ($8<<24>>24)<(0);
   if ($tobool$i$i35) {
    $9 = HEAP32[$this>>2]|0;
    $cond$i38 = $9;
   } else {
    $cond$i38 = $this;
   }
   $add$ptr17 = (($cond$i38) + ($cond$i74)|0);
   $10 = (($cond$i74) - ($sub$ptr$rhs$cast$i$i))|0;
   $scevgep = (($__last) + ($10)|0);
   $scevgep84 = $scevgep;
   $__first$addr$0 = $__first;$__p$0 = $add$ptr17;
   while(1) {
    $cmp18 = ($__first$addr$0|0)==($__last|0);
    if ($cmp18) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__first$addr$0);
    $incdec$ptr = ((($__p$0)) + 1|0);
    $incdec$ptr19 = ((($__first$addr$0)) + 1|0);
    $__first$addr$0 = $incdec$ptr19;$__p$0 = $incdec$ptr;
   }
   $scevgep85 = (($cond$i38) + ($scevgep84)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep85,$ref$tmp);
   $add20 = (($cond$i74) + ($sub$ptr$sub$i$i))|0;
   $11 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i26 = ($11<<24>>24)<(0);
   if ($tobool$i$i26) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add20;
    break;
   } else {
    $conv$i$i27 = $add20&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i27;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__p,$__first,$__last) {
 $__p = $__p|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $cmp = 0, $cmp1 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__first>>>0)<=($__p>>>0);
 $cmp1 = ($__p>>>0)<($__last>>>0);
 $spec$select = $cmp & $cmp1;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $or$i = 0, $ref$tmp = 0, $scevgep17 = 0;
 var $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $cmp = ($sub$ptr$sub$i$i>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$sub$i$i>>>0)<(11);
 if ($cmp3) {
  $conv$i = $sub$ptr$sub$i$i&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($sub$ptr$sub$i$i) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $0 = $__last;
 $1 = (($0) - ($sub$ptr$rhs$cast$i$i))|0;
 $__first$addr$0 = $__first;$__p$1 = $__p$0;
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 1|0);
  $incdec$ptr12 = ((($__p$1)) + 1|0);
  $__first$addr$0 = $incdec$ptr;$__p$1 = $incdec$ptr12;
 }
 $scevgep17 = (($__p$0) + ($1)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep17,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $$pre$phi$i$i123Z2D = 0, $$pre$phi$i$i146Z2D = 0, $$pre$phi$i$i175Z2D = 0, $$pre$phi$i$i198Z2D = 0, $$pre$phi$i$i42Z2D = 0, $$pre$phi$i$i71Z2D = 0, $$pre$phi$i$i94Z2D = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i126 = 0, $__i$0$i$i$i149 = 0, $__i$0$i$i$i178 = 0, $__i$0$i$i$i201 = 0, $__i$0$i$i$i45 = 0, $__i$0$i$i$i74 = 0, $__i$0$i$i$i97 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i115 = 0, $__size_$i1$i$i$i138 = 0, $__size_$i1$i$i$i167 = 0, $__size_$i1$i$i$i190 = 0, $__size_$i1$i$i$i34 = 0, $__size_$i1$i$i$i63 = 0, $__size_$i1$i$i$i86 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i118 = 0;
 var $__size_$i2$i$i$i141 = 0, $__size_$i2$i$i$i170 = 0, $__size_$i2$i$i$i193 = 0, $__size_$i2$i$i$i37 = 0, $__size_$i2$i$i$i66 = 0, $__size_$i2$i$i$i89 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100 = 0, $arrayidx$i$i$i129 = 0, $arrayidx$i$i$i152 = 0, $arrayidx$i$i$i181 = 0, $arrayidx$i$i$i204 = 0, $arrayidx$i$i$i48 = 0, $arrayidx$i$i$i77 = 0, $call$i = 0, $call$i106 = 0, $call$i107 = 0, $call$i158 = 0, $call$i161 = 0, $call$i210 = 0;
 var $call$i54 = 0, $call$i57 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i127 = 0, $exitcond$i$i$i150 = 0, $exitcond$i$i$i179 = 0, $exitcond$i$i$i202 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i75 = 0, $exitcond$i$i$i98 = 0, $inc$i$i$i = 0, $inc$i$i$i101 = 0, $inc$i$i$i130 = 0, $inc$i$i$i153 = 0, $inc$i$i$i182 = 0, $inc$i$i$i205 = 0, $inc$i$i$i49 = 0, $inc$i$i$i78 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0;
 var $ref$tmp$i$i$i112 = 0, $ref$tmp$i$i$i135 = 0, $ref$tmp$i$i$i164 = 0, $ref$tmp$i$i$i187 = 0, $ref$tmp$i$i$i31 = 0, $ref$tmp$i$i$i60 = 0, $ref$tmp$i$i$i83 = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i113 = 0, $ref$tmp4$i$i$i136 = 0, $ref$tmp4$i$i$i165 = 0, $ref$tmp4$i$i$i188 = 0, $ref$tmp4$i$i$i32 = 0;
 var $ref$tmp4$i$i$i61 = 0, $ref$tmp4$i$i$i84 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i116 = 0, $tobool$i$i$i$i139 = 0, $tobool$i$i$i$i168 = 0, $tobool$i$i$i$i191 = 0, $tobool$i$i$i$i35 = 0, $tobool$i$i$i$i64 = 0, $tobool$i$i$i$i87 = 0, $vfn$i = 0, $vfn$i105 = 0, $vfn$i109 = 0, $vfn$i111 = 0, $vfn$i134 = 0, $vfn$i157 = 0, $vfn$i160 = 0;
 var $vfn$i163 = 0, $vfn$i186 = 0, $vfn$i209 = 0, $vfn$i28 = 0, $vfn$i30 = 0, $vfn$i53 = 0, $vfn$i56 = 0, $vfn$i59 = 0, $vfn$i82 = 0, $vtable$i = 0, $vtable$i104 = 0, $vtable$i108 = 0, $vtable$i110 = 0, $vtable$i133 = 0, $vtable$i156 = 0, $vtable$i159 = 0, $vtable$i162 = 0, $vtable$i185 = 0, $vtable$i208 = 0, $vtable$i27 = 0;
 var $vtable$i29 = 0, $vtable$i52 = 0, $vtable$i55 = 0, $vtable$i58 = 0, $vtable$i81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $ref$tmp$i$i$i187 = sp + 119|0;
 $ref$tmp4$i$i$i188 = sp + 118|0;
 $ref$tmp$i$i$i164 = sp + 117|0;
 $ref$tmp4$i$i$i165 = sp + 116|0;
 $ref$tmp$i$i$i135 = sp + 115|0;
 $ref$tmp4$i$i$i136 = sp + 114|0;
 $ref$tmp$i$i$i112 = sp + 113|0;
 $ref$tmp4$i$i$i113 = sp + 112|0;
 $ref$tmp$i$i$i83 = sp + 111|0;
 $ref$tmp4$i$i$i84 = sp + 110|0;
 $ref$tmp$i$i$i60 = sp + 109|0;
 $ref$tmp4$i$i$i61 = sp + 108|0;
 $ref$tmp$i$i$i31 = sp + 107|0;
 $ref$tmp4$i$i$i32 = sp + 106|0;
 $ref$tmp$i$i$i = sp + 105|0;
 $ref$tmp4$i$i$i = sp + 104|0;
 $ref$tmp = sp + 100|0;
 $ref$tmp1 = sp + 88|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 64|0;
 $ref$tmp9 = sp + 52|0;
 $ref$tmp14 = sp + 48|0;
 $ref$tmp15 = sp + 36|0;
 $ref$tmp17 = sp + 24|0;
 $ref$tmp21 = sp + 12|0;
 $ref$tmp23 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21260)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i27 = HEAP32[$call$i>>2]|0;
  $vfn$i28 = ((($vtable$i27)) + 32|0);
  $2 = HEAP32[$vfn$i28>>2]|0;
  FUNCTION_TABLE_vii[$2 & 511]($ref$tmp1,$call$i);
  $__size_$i1$i$i$i = ((($__nsn)) + 11|0);
  $3 = HEAP8[$__size_$i1$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($3<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$__nsn>>2]|0;
   HEAP8[$ref$tmp$i$i$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($4,$ref$tmp$i$i$i);
   $__size_$i2$i$i$i = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i>>2] = 0;
   $$pre$phi$i$iZ2D = $__nsn;
  } else {
   HEAP8[$ref$tmp4$i$i$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn,$ref$tmp4$i$i$i);
   HEAP8[$__size_$i1$i$i$i>>0] = 0;
   $$pre$phi$i$iZ2D = $__nsn;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__nsn,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$ref$tmp1>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $arrayidx$i$i$i = (($ref$tmp1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$arrayidx$i$i$i>>2] = 0;
   $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $inc$i$i$i;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $vtable$i29 = HEAP32[$call$i>>2]|0;
  $vfn$i30 = ((($vtable$i29)) + 28|0);
  $5 = HEAP32[$vfn$i30>>2]|0;
  FUNCTION_TABLE_vii[$5 & 511]($ref$tmp3,$call$i);
  $__size_$i1$i$i$i34 = ((($__psn)) + 11|0);
  $6 = HEAP8[$__size_$i1$i$i$i34>>0]|0;
  $tobool$i$i$i$i35 = ($6<<24>>24)<(0);
  if ($tobool$i$i$i$i35) {
   $7 = HEAP32[$__psn>>2]|0;
   HEAP8[$ref$tmp$i$i$i31>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$ref$tmp$i$i$i31);
   $__size_$i2$i$i$i37 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i37>>2] = 0;
   $$pre$phi$i$i42Z2D = $__psn;
  } else {
   HEAP8[$ref$tmp4$i$i$i32>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn,$ref$tmp4$i$i$i32);
   HEAP8[$__size_$i1$i$i$i34>>0] = 0;
   $$pre$phi$i$i42Z2D = $__psn;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__psn,0);
  ;HEAP32[$$pre$phi$i$i42Z2D>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$$pre$phi$i$i42Z2D+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$$pre$phi$i$i42Z2D+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  $__i$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($__i$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $arrayidx$i$i$i48 = (($ref$tmp3) + ($__i$0$i$i$i45<<2)|0);
   HEAP32[$arrayidx$i$i$i48>>2] = 0;
   $inc$i$i$i49 = (($__i$0$i$i$i45) + 1)|0;
   $__i$0$i$i$i45 = $inc$i$i$i49;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
  $vtable$i52 = HEAP32[$call$i>>2]|0;
  $vfn$i53 = ((($vtable$i52)) + 12|0);
  $8 = HEAP32[$vfn$i53>>2]|0;
  $call$i54 = (FUNCTION_TABLE_ii[$8 & 511]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i54;
  $vtable$i55 = HEAP32[$call$i>>2]|0;
  $vfn$i56 = ((($vtable$i55)) + 16|0);
  $9 = HEAP32[$vfn$i56>>2]|0;
  $call$i57 = (FUNCTION_TABLE_ii[$9 & 511]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i57;
  $vtable$i58 = HEAP32[$call$i>>2]|0;
  $vfn$i59 = ((($vtable$i58)) + 20|0);
  $10 = HEAP32[$vfn$i59>>2]|0;
  FUNCTION_TABLE_vii[$10 & 511]($ref$tmp7,$call$i);
  $__size_$i1$i$i$i63 = ((($__grp)) + 11|0);
  $11 = HEAP8[$__size_$i1$i$i$i63>>0]|0;
  $tobool$i$i$i$i64 = ($11<<24>>24)<(0);
  if ($tobool$i$i$i$i64) {
   $12 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i60>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($12,$ref$tmp$i$i$i60);
   $__size_$i2$i$i$i66 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i66>>2] = 0;
   $$pre$phi$i$i71Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i61>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i61);
   HEAP8[$__size_$i1$i$i$i63>>0] = 0;
   $$pre$phi$i$i71Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i71Z2D>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  $__i$0$i$i$i74 = 0;
  while(1) {
   $exitcond$i$i$i75 = ($__i$0$i$i$i74|0)==(3);
   if ($exitcond$i$i$i75) {
    break;
   }
   $arrayidx$i$i$i77 = (($ref$tmp7) + ($__i$0$i$i$i74<<2)|0);
   HEAP32[$arrayidx$i$i$i77>>2] = 0;
   $inc$i$i$i78 = (($__i$0$i$i$i74) + 1)|0;
   $__i$0$i$i$i74 = $inc$i$i$i78;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
  $vtable$i81 = HEAP32[$call$i>>2]|0;
  $vfn$i82 = ((($vtable$i81)) + 24|0);
  $13 = HEAP32[$vfn$i82>>2]|0;
  FUNCTION_TABLE_vii[$13 & 511]($ref$tmp9,$call$i);
  $__size_$i1$i$i$i86 = ((($__sym)) + 11|0);
  $14 = HEAP8[$__size_$i1$i$i$i86>>0]|0;
  $tobool$i$i$i$i87 = ($14<<24>>24)<(0);
  if ($tobool$i$i$i$i87) {
   $15 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i83>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($15,$ref$tmp$i$i$i83);
   $__size_$i2$i$i$i89 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i89>>2] = 0;
   $$pre$phi$i$i94Z2D = $__sym;
  } else {
   HEAP8[$ref$tmp4$i$i$i84>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i84);
   HEAP8[$__size_$i1$i$i$i86>>0] = 0;
   $$pre$phi$i$i94Z2D = $__sym;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sym,0);
  ;HEAP32[$$pre$phi$i$i94Z2D>>2]=HEAP32[$ref$tmp9>>2]|0;HEAP32[$$pre$phi$i$i94Z2D+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$$pre$phi$i$i94Z2D+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  $__i$0$i$i$i97 = 0;
  while(1) {
   $exitcond$i$i$i98 = ($__i$0$i$i$i97|0)==(3);
   if ($exitcond$i$i$i98) {
    break;
   }
   $arrayidx$i$i$i100 = (($ref$tmp9) + ($__i$0$i$i$i97<<2)|0);
   HEAP32[$arrayidx$i$i$i100>>2] = 0;
   $inc$i$i$i101 = (($__i$0$i$i$i97) + 1)|0;
   $__i$0$i$i$i97 = $inc$i$i$i101;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp9);
  $vtable$i104 = HEAP32[$call$i>>2]|0;
  $vfn$i105 = ((($vtable$i104)) + 36|0);
  $16 = HEAP32[$vfn$i105>>2]|0;
  $call$i106 = (FUNCTION_TABLE_ii[$16 & 511]($call$i)|0);
  $storemerge = $call$i106;
 } else {
  $call$i107 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21252)|0);
  $vtable$i108 = HEAP32[$call$i107>>2]|0;
  $vfn$i109 = ((($vtable$i108)) + 44|0);
  $17 = HEAP32[$vfn$i109>>2]|0;
  FUNCTION_TABLE_vii[$17 & 511]($ref$tmp14,$call$i107);
  $18 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$18&255;HEAP8[$__pat+1>>0]=($18>>8)&255;HEAP8[$__pat+2>>0]=($18>>16)&255;HEAP8[$__pat+3>>0]=$18>>24;
  $vtable$i110 = HEAP32[$call$i107>>2]|0;
  $vfn$i111 = ((($vtable$i110)) + 32|0);
  $19 = HEAP32[$vfn$i111>>2]|0;
  FUNCTION_TABLE_vii[$19 & 511]($ref$tmp15,$call$i107);
  $__size_$i1$i$i$i115 = ((($__nsn)) + 11|0);
  $20 = HEAP8[$__size_$i1$i$i$i115>>0]|0;
  $tobool$i$i$i$i116 = ($20<<24>>24)<(0);
  if ($tobool$i$i$i$i116) {
   $21 = HEAP32[$__nsn>>2]|0;
   HEAP8[$ref$tmp$i$i$i112>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($21,$ref$tmp$i$i$i112);
   $__size_$i2$i$i$i118 = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i118>>2] = 0;
   $$pre$phi$i$i123Z2D = $__nsn;
  } else {
   HEAP8[$ref$tmp4$i$i$i113>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn,$ref$tmp4$i$i$i113);
   HEAP8[$__size_$i1$i$i$i115>>0] = 0;
   $$pre$phi$i$i123Z2D = $__nsn;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__nsn,0);
  ;HEAP32[$$pre$phi$i$i123Z2D>>2]=HEAP32[$ref$tmp15>>2]|0;HEAP32[$$pre$phi$i$i123Z2D+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$$pre$phi$i$i123Z2D+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  $__i$0$i$i$i126 = 0;
  while(1) {
   $exitcond$i$i$i127 = ($__i$0$i$i$i126|0)==(3);
   if ($exitcond$i$i$i127) {
    break;
   }
   $arrayidx$i$i$i129 = (($ref$tmp15) + ($__i$0$i$i$i126<<2)|0);
   HEAP32[$arrayidx$i$i$i129>>2] = 0;
   $inc$i$i$i130 = (($__i$0$i$i$i126) + 1)|0;
   $__i$0$i$i$i126 = $inc$i$i$i130;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp15);
  $vtable$i133 = HEAP32[$call$i107>>2]|0;
  $vfn$i134 = ((($vtable$i133)) + 28|0);
  $22 = HEAP32[$vfn$i134>>2]|0;
  FUNCTION_TABLE_vii[$22 & 511]($ref$tmp17,$call$i107);
  $__size_$i1$i$i$i138 = ((($__psn)) + 11|0);
  $23 = HEAP8[$__size_$i1$i$i$i138>>0]|0;
  $tobool$i$i$i$i139 = ($23<<24>>24)<(0);
  if ($tobool$i$i$i$i139) {
   $24 = HEAP32[$__psn>>2]|0;
   HEAP8[$ref$tmp$i$i$i135>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($24,$ref$tmp$i$i$i135);
   $__size_$i2$i$i$i141 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i141>>2] = 0;
   $$pre$phi$i$i146Z2D = $__psn;
  } else {
   HEAP8[$ref$tmp4$i$i$i136>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn,$ref$tmp4$i$i$i136);
   HEAP8[$__size_$i1$i$i$i138>>0] = 0;
   $$pre$phi$i$i146Z2D = $__psn;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__psn,0);
  ;HEAP32[$$pre$phi$i$i146Z2D>>2]=HEAP32[$ref$tmp17>>2]|0;HEAP32[$$pre$phi$i$i146Z2D+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$$pre$phi$i$i146Z2D+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  $__i$0$i$i$i149 = 0;
  while(1) {
   $exitcond$i$i$i150 = ($__i$0$i$i$i149|0)==(3);
   if ($exitcond$i$i$i150) {
    break;
   }
   $arrayidx$i$i$i152 = (($ref$tmp17) + ($__i$0$i$i$i149<<2)|0);
   HEAP32[$arrayidx$i$i$i152>>2] = 0;
   $inc$i$i$i153 = (($__i$0$i$i$i149) + 1)|0;
   $__i$0$i$i$i149 = $inc$i$i$i153;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp17);
  $vtable$i156 = HEAP32[$call$i107>>2]|0;
  $vfn$i157 = ((($vtable$i156)) + 12|0);
  $25 = HEAP32[$vfn$i157>>2]|0;
  $call$i158 = (FUNCTION_TABLE_ii[$25 & 511]($call$i107)|0);
  HEAP8[$__dp>>0] = $call$i158;
  $vtable$i159 = HEAP32[$call$i107>>2]|0;
  $vfn$i160 = ((($vtable$i159)) + 16|0);
  $26 = HEAP32[$vfn$i160>>2]|0;
  $call$i161 = (FUNCTION_TABLE_ii[$26 & 511]($call$i107)|0);
  HEAP8[$__ts>>0] = $call$i161;
  $vtable$i162 = HEAP32[$call$i107>>2]|0;
  $vfn$i163 = ((($vtable$i162)) + 20|0);
  $27 = HEAP32[$vfn$i163>>2]|0;
  FUNCTION_TABLE_vii[$27 & 511]($ref$tmp21,$call$i107);
  $__size_$i1$i$i$i167 = ((($__grp)) + 11|0);
  $28 = HEAP8[$__size_$i1$i$i$i167>>0]|0;
  $tobool$i$i$i$i168 = ($28<<24>>24)<(0);
  if ($tobool$i$i$i$i168) {
   $29 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i164>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($29,$ref$tmp$i$i$i164);
   $__size_$i2$i$i$i170 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i170>>2] = 0;
   $$pre$phi$i$i175Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i165>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i165);
   HEAP8[$__size_$i1$i$i$i167>>0] = 0;
   $$pre$phi$i$i175Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i175Z2D>>2]=HEAP32[$ref$tmp21>>2]|0;HEAP32[$$pre$phi$i$i175Z2D+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$$pre$phi$i$i175Z2D+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  $__i$0$i$i$i178 = 0;
  while(1) {
   $exitcond$i$i$i179 = ($__i$0$i$i$i178|0)==(3);
   if ($exitcond$i$i$i179) {
    break;
   }
   $arrayidx$i$i$i181 = (($ref$tmp21) + ($__i$0$i$i$i178<<2)|0);
   HEAP32[$arrayidx$i$i$i181>>2] = 0;
   $inc$i$i$i182 = (($__i$0$i$i$i178) + 1)|0;
   $__i$0$i$i$i178 = $inc$i$i$i182;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp21);
  $vtable$i185 = HEAP32[$call$i107>>2]|0;
  $vfn$i186 = ((($vtable$i185)) + 24|0);
  $30 = HEAP32[$vfn$i186>>2]|0;
  FUNCTION_TABLE_vii[$30 & 511]($ref$tmp23,$call$i107);
  $__size_$i1$i$i$i190 = ((($__sym)) + 11|0);
  $31 = HEAP8[$__size_$i1$i$i$i190>>0]|0;
  $tobool$i$i$i$i191 = ($31<<24>>24)<(0);
  if ($tobool$i$i$i$i191) {
   $32 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i187>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($32,$ref$tmp$i$i$i187);
   $__size_$i2$i$i$i193 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i193>>2] = 0;
   $$pre$phi$i$i198Z2D = $__sym;
  } else {
   HEAP8[$ref$tmp4$i$i$i188>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i188);
   HEAP8[$__size_$i1$i$i$i190>>0] = 0;
   $$pre$phi$i$i198Z2D = $__sym;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sym,0);
  ;HEAP32[$$pre$phi$i$i198Z2D>>2]=HEAP32[$ref$tmp23>>2]|0;HEAP32[$$pre$phi$i$i198Z2D+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$$pre$phi$i$i198Z2D+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  $__i$0$i$i$i201 = 0;
  while(1) {
   $exitcond$i$i$i202 = ($__i$0$i$i$i201|0)==(3);
   if ($exitcond$i$i$i202) {
    break;
   }
   $arrayidx$i$i$i204 = (($ref$tmp23) + ($__i$0$i$i$i201<<2)|0);
   HEAP32[$arrayidx$i$i$i204>>2] = 0;
   $inc$i$i$i205 = (($__i$0$i$i$i201) + 1)|0;
   $__i$0$i$i$i201 = $inc$i$i$i205;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp23);
  $vtable$i208 = HEAP32[$call$i107>>2]|0;
  $vfn$i209 = ((($vtable$i208)) + 36|0);
  $33 = HEAP32[$vfn$i209>>2]|0;
  $call$i210 = (FUNCTION_TABLE_ii[$33 & 511]($call$i107)|0);
  $storemerge = $call$i210;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__value_$i$i$i = 0, $add$ptr = 0, $add$ptr29 = 0, $call16 = 0, $cmp = 0, $cmp17 = 0, $cmp3 = 0, $cmp6 = 0;
 var $mul4 = 0, $spec$select = 0, $spec$select35 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(335|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($1) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $cmp6 = ($mul4|0)==(0);
 $spec$select = $cmp6 ? 1 : $mul4;
 $3 = $cmp3 ? $spec$select : -1;
 $4 = HEAP32[$__n>>2]|0;
 $sub$ptr$sub10 = (($4) - ($sub$ptr$rhs$cast))|0;
 $spec$select35 = $cmp ? $2 : 0;
 $call16 = (_realloc($spec$select35,$3)|0);
 $cmp17 = ($call16|0)==(0|0);
 if ($cmp17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($cmp) {
  $5 = $call16;
  HEAP32[$__b>>2] = $5;
  $8 = $call16;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  $6 = $call16;
  HEAP32[$__b>>2] = $6;
  $tobool$i$i24 = ($$pr|0)==(0|0);
  if ($tobool$i$i24) {
   $8 = $call16;
  } else {
   $7 = HEAP32[$__value_$i$i$i>>2]|0;
   FUNCTION_TABLE_vi[$7 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $8 = $$pre;
  }
 }
 HEAP32[$__value_$i$i$i>>2] = (336);
 $add$ptr = (($8) + ($sub$ptr$sub10)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $9 = HEAP32[$__b>>2]|0;
 $add$ptr29 = (($9) + ($3)|0);
 HEAP32[$__e>>2] = $add$ptr29;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__value_$i$i$i = 0, $add$ptr = 0, $add$ptr30 = 0, $call17 = 0, $cmp = 0, $cmp18 = 0, $cmp3 = 0, $cmp6 = 0;
 var $div27 = 0, $mul4 = 0, $spec$select = 0, $spec$select35 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(335|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($1) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $cmp6 = ($mul4|0)==(0);
 $spec$select = $cmp6 ? 4 : $mul4;
 $3 = $cmp3 ? $spec$select : -1;
 $4 = HEAP32[$__n>>2]|0;
 $sub$ptr$sub10 = (($4) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div11 = $sub$ptr$sub10 >> 2;
 $spec$select35 = $cmp ? $2 : 0;
 $call17 = (_realloc($spec$select35,$3)|0);
 $cmp18 = ($call17|0)==(0|0);
 if ($cmp18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($cmp) {
  $5 = $call17;
  HEAP32[$__b>>2] = $5;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  $6 = $call17;
  HEAP32[$__b>>2] = $6;
  $tobool$i$i24 = ($$pr|0)==(0|0);
  if ($tobool$i$i24) {
   $8 = $call17;
  } else {
   $7 = HEAP32[$__value_$i$i$i>>2]|0;
   FUNCTION_TABLE_vi[$7 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $8 = $$pre;
  }
 }
 HEAP32[$__value_$i$i$i>>2] = (336);
 $div27 = $3 >>> 2;
 $add$ptr = (($8) + ($sub$ptr$div11<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $9 = HEAP32[$__b>>2]|0;
 $add$ptr30 = (($9) + ($div27<<2)|0);
 HEAP32[$__e>>2] = $add$ptr30;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__fmtflags_$i = 0, $__h$sroa$0$0 = 0, $__loc = 0;
 var $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__value_$i$i4$i$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i = 0, $call$i$i$i$i = 0;
 var $call$i$i9$i$i = 0, $call16 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call38 = 0, $call4 = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp1$i = 0, $cmp18 = 0, $cmp26 = 0, $cmp39 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0;
 var $incdec$ptr35 = 0, $incdec$ptr36 = 0, $or = 0, $phitmp$i$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$div1532 = 0, $sub$ptr$div34 = 0, $sub$ptr$lhs$cast31 = 0, $sub$ptr$rhs$cast32 = 0, $sub$ptr$sub = 0, $sub$ptr$sub33 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i21 = 0, $tobool$i2$i$i = 0, $tobool22 = 0, $vararg_buffer = 0, $vfn$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $agg$tmp$byval_copy = sp + 584|0;
 $vararg_buffer = sp + 560|0;
 $__wbuf = sp + 160|0;
 $__wb = sp + 576|0;
 $__wn = sp + 572|0;
 $__loc = sp + 568|0;
 $__neg = sp + 588|0;
 $agg$tmp = sp + 564|0;
 $__atoms = sp + 112|0;
 $__nbuf = sp;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $1 = ((($__wb)) + 4|0);
 HEAP32[$1>>2] = (335);
 $add$ptr = ((($__wbuf)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 HEAP8[$__neg>>0] = 0;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $2;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $3 = HEAP32[$__fmtflags_$i>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call4 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$agg$tmp$byval_copy,$__intl,$__loc,$3,$__err,$__neg,$call$i,$__wb,$__wn,$add$ptr)|0);
 if ($call4) {
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 48|0);
  $4 = HEAP32[$vfn$i>>2]|0;
  (FUNCTION_TABLE_iiiii[$4 & 511]($call$i,14134,(14144),$__atoms)|0);
  $5 = HEAP32[$__wn>>2]|0;
  $6 = HEAP32[$__wb>>2]|0;
  $sub$ptr$sub = (($5) - ($6))|0;
  $cmp = ($sub$ptr$sub|0)>(392);
  $7 = $6;
  $8 = $5;
  if ($cmp) {
   $sub$ptr$div1532 = $sub$ptr$sub >>> 2;
   $add = (($sub$ptr$div1532) + 2)|0;
   $call16 = (_malloc($add)|0);
   $9 = $call16;
   $cmp18 = ($call16|0)==(0|0);
   if ($cmp18) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $__h$sroa$0$0 = $9;$__nc$0 = $call16;
   }
  } else {
   $__h$sroa$0$0 = 0;$__nc$0 = $__nbuf;
  }
  $10 = HEAP8[$__neg>>0]|0;
  $tobool22 = ($10<<24>>24)==(0);
  if ($tobool22) {
   $__nc$1 = $__nc$0;
  } else {
   $incdec$ptr = ((($__nc$0)) + 1|0);
   HEAP8[$__nc$0>>0] = 45;
   $__nc$1 = $incdec$ptr;
  }
  $add$ptr$i = ((($__atoms)) + 40|0);
  $sub$ptr$rhs$cast32 = $__atoms;
  $11 = $8;$__nc$2 = $__nc$1;$__w$0 = $7;
  while(1) {
   $cmp26 = ($__w$0>>>0)<($11>>>0);
   if (!($cmp26)) {
    break;
   }
   $12 = HEAP32[$__w$0>>2]|0;
   $__first$addr$0$i = $__atoms;
   while(1) {
    $cmp$i = ($__first$addr$0$i|0)==($add$ptr$i|0);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    $13 = HEAP32[$__first$addr$0$i>>2]|0;
    $cmp1$i = ($13|0)==($12|0);
    if ($cmp1$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $incdec$ptr$i = ((($__first$addr$0$i)) + 4|0);
    $__first$addr$0$i = $incdec$ptr$i;
   }
   $sub$ptr$lhs$cast31 = $__first$addr$0$lcssa$i;
   $sub$ptr$sub33 = (($sub$ptr$lhs$cast31) - ($sub$ptr$rhs$cast32))|0;
   $sub$ptr$div34 = $sub$ptr$sub33 >> 2;
   $arrayidx = (14134 + ($sub$ptr$div34)|0);
   $14 = HEAP8[$arrayidx>>0]|0;
   HEAP8[$__nc$2>>0] = $14;
   $incdec$ptr35 = ((($__w$0)) + 4|0);
   $incdec$ptr36 = ((($__nc$2)) + 1|0);
   $$pre = HEAP32[$__wn>>2]|0;
   $11 = $$pre;$__nc$2 = $incdec$ptr36;$__w$0 = $incdec$ptr35;
  }
  HEAP8[$__nc$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $__v;
  $call38 = (_sscanf($__nbuf,14035,$vararg_buffer)|0);
  $cmp39 = ($call38|0)==(1);
  if (!($cmp39)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $tobool$i$i21 = ($__h$sroa$0$0|0)==(0);
  if (!($tobool$i$i21)) {
   $15 = $__h$sroa$0$0;
   _free($15);
  }
 }
 $16 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($16|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $29 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($16)) + 12|0);
   $17 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($16)) + 16|0);
   $18 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($17|0)==($18|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$16>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $19 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $20 = HEAP32[$17>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($20)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $29 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $29 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $21 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($21|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 32;
  } else {
   $__ninp_$i$i3$i$i = ((($21)) + 12|0);
   $22 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($21)) + 16|0);
   $23 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($22|0)==($23|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$21>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $24 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $25 = HEAP32[$22>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 32;
    break;
   } else {
    if ($29) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($29) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $26 = HEAP32[$__err>>2]|0;
  $or = $26 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $tobool$i$i = ($27|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__wb)) + 4|0);
  $28 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($27);
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__size_$i1$i = 0, $__size_$i2$i = 0, $__value_$i$i4$i$i = 0, $__w$0 = 0;
 var $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i$i$i = 0, $call$i$i9$i$i = 0, $call$i16 = 0, $call$i19 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4 = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp11 = 0, $incdec$ptr = 0, $or = 0, $phitmp$i$i$i = 0, $ref$tmp$i = 0, $ref$tmp4$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i15 = 0, $tobool$i2$i$i = 0, $tobool5 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vfn$i18 = 0;
 var $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $agg$tmp$byval_copy = sp + 432|0;
 $ref$tmp$i = sp + 428|0;
 $ref$tmp4$i = sp + 424|0;
 $__wbuf = sp;
 $__wb = sp + 416|0;
 $__wn = sp + 408|0;
 $__loc = sp + 404|0;
 $__neg = sp + 436|0;
 $agg$tmp = sp + 400|0;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $1 = ((($__wb)) + 4|0);
 HEAP32[$1>>2] = (335);
 $add$ptr = ((($__wbuf)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 HEAP8[$__neg>>0] = 0;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $2;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $3 = HEAP32[$__fmtflags_$i>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call4 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$agg$tmp$byval_copy,$__intl,$__loc,$3,$__err,$__neg,$call$i,$__wb,$__wn,$add$ptr)|0);
 $4 = $2;
 if ($call4) {
  $5 = ((($__v)) + 8|0);
  $__size_$i1$i = ((($5)) + 3|0);
  $6 = HEAP8[$__size_$i1$i>>0]|0;
  $tobool$i$i15 = ($6<<24>>24)<(0);
  if ($tobool$i$i15) {
   $7 = HEAP32[$__v>>2]|0;
   HEAP32[$ref$tmp$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$ref$tmp$i);
   $__size_$i2$i = ((($__v)) + 4|0);
   HEAP32[$__size_$i2$i>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__v,$ref$tmp4$i);
   HEAP8[$__size_$i1$i>>0] = 0;
  }
  $8 = HEAP8[$__neg>>0]|0;
  $tobool5 = ($8<<24>>24)==(0);
  if (!($tobool5)) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 44|0);
   $9 = HEAP32[$vfn$i>>2]|0;
   $call$i16 = (FUNCTION_TABLE_iii[$9 & 511]($call$i,45)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$call$i16);
  }
  $vtable$i17 = HEAP32[$call$i>>2]|0;
  $vfn$i18 = ((($vtable$i17)) + 44|0);
  $10 = HEAP32[$vfn$i18>>2]|0;
  $call$i19 = (FUNCTION_TABLE_iii[$10 & 511]($call$i,48)|0);
  $11 = HEAP32[$__wb>>2]|0;
  $12 = HEAP32[$__wn>>2]|0;
  $add$ptr10 = ((($12)) + -4|0);
  $__w$0 = $11;
  while(1) {
   $cmp = ($__w$0>>>0)<($add$ptr10>>>0);
   if (!($cmp)) {
    break;
   }
   $13 = HEAP32[$__w$0>>2]|0;
   $cmp11 = ($13|0)==($call$i19|0);
   if (!($cmp11)) {
    break;
   }
   $incdec$ptr = ((($__w$0)) + 4|0);
   $__w$0 = $incdec$ptr;
  }
  (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($__v,$__w$0,$12)|0);
 }
 $14 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($14|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $27 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($14)) + 12|0);
   $15 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($14)) + 16|0);
   $16 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($15|0)==($16|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$14>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $17 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$17 & 511]($14)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $18 = HEAP32[$15>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $27 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $27 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i = ($2|0)==(0);
 do {
  if ($tobool$i2$i$i) {
   label = 25;
  } else {
   $__ninp_$i$i3$i$i = ((($4)) + 12|0);
   $19 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($4)) + 16|0);
   $20 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($19|0)==($20|0);
   if ($cmp$i$i5$i$i) {
    $21 = $2;
    $vtable$i$i7$i$i = HEAP32[$21>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $22 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$22 & 511]($4)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $23 = HEAP32[$19>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($23)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 25;
    break;
   } else {
    if ($27) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($27) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $24 = HEAP32[$__err>>2]|0;
  $or = $24 | 2;
  HEAP32[$__err>>2] = $or;
 }
 $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
 __ZNSt3__26localeD2Ev($__loc);
 $25 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $tobool$i$i = ($25|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__wb)) + 4|0);
  $26 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$26 & 511]($25);
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i173 = 0, $$pre$i$i$i504 = 0, $$pre$i$i$i569 = 0, $$pre$i$i$i653 = 0, $$pre$i$i$i729 = 0, $$pre$i$i$i796 = 0, $$pre920 = 0, $$pre921 = 0, $$pre922 = 0, $$pre923 = 0, $$pre924 = 0, $$pre925 = 0, $$pre926 = 0, $$pre927 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i160 = 0, $__einp_$i$i$i$i491 = 0, $__einp_$i$i$i$i556 = 0, $__einp_$i$i$i$i640 = 0, $__einp_$i$i$i$i716 = 0, $__einp_$i$i$i$i783 = 0, $__einp_$i$i137 = 0, $__einp_$i$i147 = 0, $__einp_$i$i201 = 0, $__einp_$i$i216 = 0, $__einp_$i$i265 = 0, $__einp_$i$i278 = 0, $__einp_$i$i306 = 0, $__einp_$i$i346 = 0, $__einp_$i$i386 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i181 = 0;
 var $__einp_$i$i4$i$i512 = 0, $__einp_$i$i4$i$i577 = 0, $__einp_$i$i4$i$i661 = 0, $__einp_$i$i4$i$i737 = 0, $__einp_$i$i4$i$i804 = 0, $__einp_$i$i463 = 0, $__einp_$i$i597 = 0, $__einp_$i$i610 = 0, $__einp_$i$i681 = 0, $__einp_$i$i702 = 0, $__einp_$i$i758 = 0, $__einp_$i$i770 = 0, $__einp_$i$i825 = 0, $__einp_$i$i840 = 0, $__einp_$i$i852 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0;
 var $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i101 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i159 = 0, $__ninp_$i$i$i$i490 = 0, $__ninp_$i$i$i$i555 = 0, $__ninp_$i$i$i$i639 = 0, $__ninp_$i$i$i$i715 = 0, $__ninp_$i$i$i$i782 = 0, $__ninp_$i$i136 = 0, $__ninp_$i$i146 = 0;
 var $__ninp_$i$i200 = 0, $__ninp_$i$i215 = 0, $__ninp_$i$i264 = 0, $__ninp_$i$i277 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i180 = 0, $__ninp_$i$i3$i$i511 = 0, $__ninp_$i$i3$i$i576 = 0, $__ninp_$i$i3$i$i660 = 0, $__ninp_$i$i3$i$i736 = 0, $__ninp_$i$i3$i$i803 = 0, $__ninp_$i$i305 = 0, $__ninp_$i$i345 = 0, $__ninp_$i$i385 = 0, $__ninp_$i$i462 = 0, $__ninp_$i$i596 = 0, $__ninp_$i$i609 = 0, $__ninp_$i$i680 = 0, $__ninp_$i$i701 = 0, $__ninp_$i$i757 = 0;
 var $__ninp_$i$i769 = 0, $__ninp_$i$i824 = 0, $__ninp_$i$i839 = 0, $__ninp_$i$i851 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i404 = 0, $__size_$i$i231 = 0, $__size_$i$i428 = 0, $__size_$i$i694 = 0, $__size_$i$i863 = 0, $__size_$i2$i = 0, $__size_$i2$i$i541 = 0, $__size_$i2$i233 = 0, $__size_$i2$i430 = 0, $__size_$i2$i865 = 0, $__size_$i3$i = 0;
 var $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__sym_space_end$sroa$0$1$ptr = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__value_$i$i4$i$i = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i900 = 0, $add$ptr$i446 = 0, $add$ptr$i446898 = 0, $add$ptr$i446898$sink = 0, $add$ptr$i458$pre$phiZZZ2D = 0, $add$ptr$i460 = 0;
 var $add$ptr$i548 = 0, $add$ptr$i632 = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $and894 = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i$i104 = 0, $arrayidx$i$i111 = 0, $arrayidx$i$i119 = 0, $arrayidx$i$i127 = 0, $arrayidx104 = 0, $arrayidx89 = 0, $brmerge = 0, $call$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i165 = 0, $call$i$i$i$i496 = 0, $call$i$i$i$i561 = 0, $call$i$i$i$i645 = 0, $call$i$i$i$i721 = 0;
 var $call$i$i$i$i788 = 0, $call$i$i141 = 0, $call$i$i151 = 0, $call$i$i205 = 0, $call$i$i220 = 0, $call$i$i269 = 0, $call$i$i330 = 0, $call$i$i370 = 0, $call$i$i467 = 0, $call$i$i601 = 0, $call$i$i685 = 0, $call$i$i762 = 0, $call$i$i829 = 0, $call$i$i844 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i186 = 0, $call$i$i9$i$i517 = 0, $call$i$i9$i$i582 = 0, $call$i$i9$i$i666 = 0, $call$i$i9$i$i742 = 0;
 var $call$i$i9$i$i809 = 0, $call$i213 = 0, $call$i418 = 0, $call$i693 = 0, $call$i837 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i167 = 0, $call3$i$i$i$i498 = 0, $call3$i$i$i$i563 = 0, $call3$i$i$i$i647 = 0, $call3$i$i$i$i723 = 0, $call3$i$i$i$i790 = 0, $call3$i$i$i170 = 0, $call3$i$i$i501 = 0, $call3$i$i$i566 = 0, $call3$i$i$i650 = 0, $call3$i$i$i726 = 0, $call3$i$i$i793 = 0, $call3$i$i11$i$i = 0;
 var $call3$i$i11$i$i188 = 0, $call3$i$i11$i$i519 = 0, $call3$i$i11$i$i584 = 0, $call3$i$i11$i$i668 = 0, $call3$i$i11$i$i744 = 0, $call3$i$i11$i$i811 = 0, $call3$i$i143 = 0, $call3$i$i154 = 0, $call3$i$i207 = 0, $call3$i$i223 = 0, $call3$i$i271 = 0, $call3$i$i332 = 0, $call3$i$i372 = 0, $call3$i$i469 = 0, $call3$i$i603 = 0, $call3$i$i687 = 0, $call3$i$i764 = 0, $call3$i$i831 = 0, $call3$i$i846 = 0, $call3$i14$i$i = 0;
 var $call3$i14$i$i191 = 0, $call3$i14$i$i522 = 0, $call3$i14$i$i587 = 0, $call3$i14$i$i671 = 0, $call3$i14$i$i747 = 0, $call3$i14$i$i814 = 0, $call4$i$i$i = 0, $call4$i$i$i171 = 0, $call4$i$i$i502 = 0, $call4$i$i$i567 = 0, $call4$i$i$i651 = 0, $call4$i$i$i727 = 0, $call4$i$i$i794 = 0, $call4$i15$i$i = 0, $call4$i15$i$i192 = 0, $call4$i15$i$i523 = 0, $call4$i15$i$i588 = 0, $call4$i15$i$i672 = 0, $call4$i15$i$i748 = 0, $call4$i15$i$i815 = 0;
 var $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i161 = 0, $cmp$i$i$i$i484 = 0, $cmp$i$i$i$i492 = 0, $cmp$i$i$i$i557 = 0, $cmp$i$i$i$i641 = 0, $cmp$i$i$i$i717 = 0, $cmp$i$i$i$i784 = 0, $cmp$i$i138 = 0, $cmp$i$i148 = 0, $cmp$i$i202 = 0, $cmp$i$i217 = 0, $cmp$i$i266 = 0, $cmp$i$i279 = 0, $cmp$i$i307 = 0, $cmp$i$i347 = 0, $cmp$i$i387 = 0;
 var $cmp$i$i415 = 0, $cmp$i$i464 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i182 = 0, $cmp$i$i5$i$i513 = 0, $cmp$i$i5$i$i578 = 0, $cmp$i$i5$i$i662 = 0, $cmp$i$i5$i$i738 = 0, $cmp$i$i5$i$i805 = 0, $cmp$i$i552 = 0, $cmp$i$i598 = 0, $cmp$i$i611 = 0, $cmp$i$i636 = 0, $cmp$i$i682 = 0, $cmp$i$i703 = 0, $cmp$i$i759 = 0, $cmp$i$i771 = 0, $cmp$i$i826 = 0, $cmp$i$i841 = 0, $cmp$i$i853 = 0;
 var $cmp10 = 0, $cmp102 = 0, $cmp131 = 0, $cmp162 = 0, $cmp191 = 0, $cmp196 = 0, $cmp198 = 0, $cmp200 = 0, $cmp202 = 0, $cmp214 = 0, $cmp216 = 0, $cmp218 = 0, $cmp223 = 0, $cmp228 = 0, $cmp23 = 0, $cmp234 = 0, $cmp243 = 0, $cmp253 = 0, $cmp26 = 0, $cmp269 = 0;
 var $cmp276 = 0, $cmp28 = 0, $cmp288 = 0, $cmp35 = 0, $cmp39 = 0, $cmp47 = 0, $cmp51 = 0, $cmp59 = 0, $cmp63 = 0, $cmp69 = 0, $cmp73 = 0, $cmp85 = 0, $cmp86 = 0, $cmp91 = 0, $cmp94895 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i302 = 0, $cond$i$i342 = 0;
 var $cond$i$i382 = 0, $cond$i$i410 = 0, $cond$i$i410929 = 0, $cond$i$i426 = 0, $cond$i237 = 0, $cond$i294 = 0, $cond$i322 = 0, $cond$i362 = 0, $cond$i402 = 0, $cond$i434 = 0, $cond$i5$i = 0, $cond$i5$i547 = 0, $cond$i5$i631 = 0, $cond$i6$i = 0, $cond$i6$i546 = 0, $cond$i6$i630 = 0, $cond$i699 = 0, $cond$i869 = 0, $cond99 = 0, $conv = 0;
 var $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i544 = 0, $conv$i$i$i628 = 0, $conv$i$i235 = 0, $conv$i$i292 = 0, $conv$i$i320 = 0, $conv$i$i360 = 0, $conv$i$i400 = 0, $conv$i$i432 = 0, $conv$i$i697 = 0, $conv$i$i867 = 0, $dec = 0, $exitcond$i$i = 0, $exitcond$i$i102 = 0, $exitcond$i$i109 = 0, $exitcond$i$i117 = 0, $exitcond$i$i125 = 0, $inc = 0, $inc$i$i = 0;
 var $inc$i$i105 = 0, $inc$i$i112 = 0, $inc$i$i120 = 0, $inc$i$i128 = 0, $inc261 = 0, $inc281 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i153 = 0, $incdec$ptr$i$i222 = 0, $incdec$ptr$i$i284 = 0, $incdec$ptr$i$i312 = 0, $incdec$ptr$i$i352 = 0, $incdec$ptr$i$i392 = 0, $incdec$ptr$i$i616 = 0, $incdec$ptr$i$i708 = 0, $incdec$ptr$i$i776 = 0, $incdec$ptr$i$i858 = 0;
 var $incdec$ptr$i2$i$i = 0, $incdec$ptr$i621 = 0, $incdec$ptr205 = 0, $incdec$ptr221 = 0, $incdec$ptr247 = 0, $or = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond942 = 0, $or$cond97 = 0, $or176 = 0, $or230 = 0, $or241 = 0, $or255 = 0, $or278 = 0, $or293 = 0, $or77 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i174 = 0;
 var $phitmp$i$i$i505 = 0, $phitmp$i$i$i570 = 0, $phitmp$i$i$i654 = 0, $phitmp$i$i$i730 = 0, $phitmp$i$i$i797 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i169 = 0, $retval$0$i$i$i$i500 = 0, $retval$0$i$i$i$i565 = 0, $retval$0$i$i$i$i649 = 0, $retval$0$i$i$i$i725 = 0, $retval$0$i$i$i$i792 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i190 = 0, $retval$0$i$i13$i$i521 = 0, $retval$0$i$i13$i$i586 = 0, $retval$0$i$i13$i$i670 = 0, $retval$0$i$i13$i$i746 = 0, $retval$0$i$i13$i$i813 = 0;
 var $retval$0$i$i156 = 0, $retval$0$i$i209 = 0, $retval$0$i$i225 = 0, $retval$0$i$i273 = 0, $retval$0$i$i334 = 0, $retval$0$i$i374 = 0, $retval$0$i$i471 = 0, $retval$0$i$i605 = 0, $retval$0$i$i689 = 0, $retval$0$i$i766 = 0, $retval$0$i$i833 = 0, $retval$0$i$i848 = 0, $retval$10 = 0, $spec$select = 0, $spec$select94 = 0, $spec$select95 = 0, $spec$select96 = 0, $sub = 0, $sub$i899 = 0, $sub$ptr$div$i = 0;
 var $sub$ptr$sub$i = 0, $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i158 = 0, $tobool$i$i$i275 = 0, $tobool$i$i$i297 = 0, $tobool$i$i$i337 = 0, $tobool$i$i$i377 = 0, $tobool$i$i$i405 = 0, $tobool$i$i$i405928 = 0, $tobool$i$i$i412 = 0, $tobool$i$i$i421 = 0, $tobool$i$i$i489 = 0, $tobool$i$i$i539 = 0, $tobool$i$i$i554 = 0, $tobool$i$i$i623 = 0, $tobool$i$i$i638 = 0, $tobool$i$i$i714 = 0;
 var $tobool$i$i$i781 = 0, $tobool$i$i230 = 0, $tobool$i$i232 = 0, $tobool$i$i289 = 0, $tobool$i$i317 = 0, $tobool$i$i357 = 0, $tobool$i$i397 = 0, $tobool$i$i429 = 0, $tobool$i$i695 = 0, $tobool$i$i864 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i178 = 0, $tobool$i2$i$i509 = 0, $tobool$i2$i$i574 = 0, $tobool$i2$i$i658 = 0, $tobool$i2$i$i734 = 0, $tobool$i2$i$i801 = 0, $tobool265 = 0, $tobool291 = 0, $tobool83 = 0;
 var $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i164 = 0, $vfn$i$i$i$i495 = 0, $vfn$i$i$i$i560 = 0, $vfn$i$i$i$i644 = 0, $vfn$i$i$i$i720 = 0, $vfn$i$i$i$i787 = 0, $vfn$i$i140 = 0, $vfn$i$i150 = 0, $vfn$i$i204 = 0, $vfn$i$i219 = 0, $vfn$i$i268 = 0, $vfn$i$i281 = 0, $vfn$i$i309 = 0, $vfn$i$i329 = 0, $vfn$i$i349 = 0, $vfn$i$i369 = 0, $vfn$i$i389 = 0;
 var $vfn$i$i466 = 0, $vfn$i$i600 = 0, $vfn$i$i613 = 0, $vfn$i$i684 = 0, $vfn$i$i705 = 0, $vfn$i$i761 = 0, $vfn$i$i773 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i185 = 0, $vfn$i$i8$i$i516 = 0, $vfn$i$i8$i$i581 = 0, $vfn$i$i8$i$i665 = 0, $vfn$i$i8$i$i741 = 0, $vfn$i$i8$i$i808 = 0, $vfn$i$i828 = 0, $vfn$i$i843 = 0, $vfn$i$i855 = 0, $vfn$i212 = 0, $vfn$i417 = 0, $vfn$i692 = 0;
 var $vfn$i836 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i163 = 0, $vtable$i$i$i$i494 = 0, $vtable$i$i$i$i559 = 0, $vtable$i$i$i$i643 = 0, $vtable$i$i$i$i719 = 0, $vtable$i$i$i$i786 = 0, $vtable$i$i139 = 0, $vtable$i$i149 = 0, $vtable$i$i203 = 0, $vtable$i$i218 = 0, $vtable$i$i267 = 0, $vtable$i$i280 = 0, $vtable$i$i308 = 0, $vtable$i$i328 = 0, $vtable$i$i348 = 0, $vtable$i$i368 = 0;
 var $vtable$i$i388 = 0, $vtable$i$i465 = 0, $vtable$i$i599 = 0, $vtable$i$i612 = 0, $vtable$i$i683 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i184 = 0, $vtable$i$i7$i$i515 = 0, $vtable$i$i7$i$i580 = 0, $vtable$i$i7$i$i664 = 0, $vtable$i$i7$i$i740 = 0, $vtable$i$i7$i$i807 = 0, $vtable$i$i704 = 0, $vtable$i$i760 = 0, $vtable$i$i772 = 0, $vtable$i$i827 = 0, $vtable$i$i842 = 0, $vtable$i$i854 = 0, $vtable$i211 = 0, $vtable$i416 = 0;
 var $vtable$i691 = 0, $vtable$i835 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $__we$addr = sp + 496|0;
 $__gbuf = sp;
 $__gb = sp + 488|0;
 $__gn = sp + 480|0;
 $__ge = sp + 476|0;
 $__pat = sp + 500|0;
 $__dp = sp + 472|0;
 $__ts = sp + 468|0;
 $__grp = sp + 456|0;
 $__sym = sp + 444|0;
 $__psn = sp + 432|0;
 $__nsn = sp + 420|0;
 $__spaces = sp + 408|0;
 $__fd = sp + 404|0;
 $__et = sp + 400|0;
 HEAP32[$__we$addr>>2] = $__we;
 $0 = $__gbuf;
 HEAP32[$__gb>>2] = $0;
 $1 = ((($__gb)) + 4|0);
 HEAP32[$1>>2] = (335);
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i101 = 0;
 while(1) {
  $exitcond$i$i102 = ($__i$0$i$i101|0)==(3);
  if ($exitcond$i$i102) {
   break;
  }
  $arrayidx$i$i104 = (($__sym) + ($__i$0$i$i101<<2)|0);
  HEAP32[$arrayidx$i$i104>>2] = 0;
  $inc$i$i105 = (($__i$0$i$i101) + 1)|0;
  $__i$0$i$i101 = $inc$i$i105;
 }
 ;HEAP32[$__psn>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 $__i$0$i$i108 = 0;
 while(1) {
  $exitcond$i$i109 = ($__i$0$i$i108|0)==(3);
  if ($exitcond$i$i109) {
   break;
  }
  $arrayidx$i$i111 = (($__psn) + ($__i$0$i$i108<<2)|0);
  HEAP32[$arrayidx$i$i111>>2] = 0;
  $inc$i$i112 = (($__i$0$i$i108) + 1)|0;
  $__i$0$i$i108 = $inc$i$i112;
 }
 ;HEAP32[$__nsn>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 $__i$0$i$i116 = 0;
 while(1) {
  $exitcond$i$i117 = ($__i$0$i$i116|0)==(3);
  if ($exitcond$i$i117) {
   break;
  }
  $arrayidx$i$i119 = (($__nsn) + ($__i$0$i$i116<<2)|0);
  HEAP32[$arrayidx$i$i119>>2] = 0;
  $inc$i$i120 = (($__i$0$i$i116) + 1)|0;
  $__i$0$i$i116 = $inc$i$i120;
 }
 ;HEAP32[$__spaces>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 $__i$0$i$i124 = 0;
 while(1) {
  $exitcond$i$i125 = ($__i$0$i$i124|0)==(3);
  if ($exitcond$i$i125) {
   break;
  }
  $arrayidx$i$i127 = (($__spaces) + ($__i$0$i$i124<<2)|0);
  HEAP32[$arrayidx$i$i127>>2] = 0;
  $inc$i$i128 = (($__i$0$i$i124) + 1)|0;
  $__i$0$i$i124 = $inc$i$i128;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $2 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $2;
 $3 = ((($__psn)) + 8|0);
 $__size_$i$i = ((($3)) + 3|0);
 $__size_$i2$i = ((($__psn)) + 4|0);
 $4 = ((($__nsn)) + 8|0);
 $__size_$i$i231 = ((($4)) + 3|0);
 $__size_$i2$i233 = ((($__nsn)) + 4|0);
 $__size_$i$i694 = ((($__grp)) + 11|0);
 $__size_$i3$i = ((($__grp)) + 4|0);
 $and894 = $__flags & 512;
 $cmp94895 = ($and894|0)!=(0);
 $5 = ((($__sym)) + 8|0);
 $__size_$i$i$i404 = ((($5)) + 3|0);
 $arrayidx89 = ((($__pat)) + 3|0);
 $__size_$i2$i$i541 = ((($__sym)) + 4|0);
 $6 = ((($__spaces)) + 8|0);
 $__size_$i$i428 = ((($6)) + 3|0);
 $__size_$i2$i430 = ((($__spaces)) + 4|0);
 $__p$0 = 0;$__trailing_sign$0 = 0;
 L21: while(1) {
  $cmp = ($__p$0>>>0)<(4);
  if (!($cmp)) {
   label = 239;
   break;
  }
  $7 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($7|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $283 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($7)) + 12|0);
    $8 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($7)) + 16|0);
    $9 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($8|0)==($9|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$7>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $10 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $11 = HEAP32[$8>>2]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $283 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $283 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $12 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($12|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 31;
   } else {
    $__ninp_$i$i3$i$i = ((($12)) + 12|0);
    $13 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($12)) + 16|0);
    $14 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($13|0)==($14|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$12>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $15 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$15 & 511]($12)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $16 = HEAP32[$13>>2]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    } else {
     if ($283) {
      $284 = $12;
      break;
     } else {
      label = 239;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($283) {
    label = 239;
    break;
   } else {
    $284 = 0;
   }
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $17 = HEAP8[$arrayidx>>0]|0;
  $conv = $17 << 24 >> 24;
  L46: do {
   switch ($conv|0) {
   case 1:  {
    $cond99 = ($__p$0|0)==(3);
    if ($cond99) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $18 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i136 = ((($18)) + 12|0);
     $19 = HEAP32[$__ninp_$i$i136>>2]|0;
     $__einp_$i$i137 = ((($18)) + 16|0);
     $20 = HEAP32[$__einp_$i$i137>>2]|0;
     $cmp$i$i138 = ($19|0)==($20|0);
     if ($cmp$i$i138) {
      $vtable$i$i139 = HEAP32[$18>>2]|0;
      $vfn$i$i140 = ((($vtable$i$i139)) + 36|0);
      $21 = HEAP32[$vfn$i$i140>>2]|0;
      $call$i$i141 = (FUNCTION_TABLE_ii[$21 & 511]($18)|0);
      $retval$0$i$i = $call$i$i141;
     } else {
      $22 = HEAP32[$19>>2]|0;
      $call3$i$i143 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($22)|0);
      $retval$0$i$i = $call3$i$i143;
     }
     $vtable$i = HEAP32[$__ct>>2]|0;
     $vfn$i = ((($vtable$i)) + 12|0);
     $23 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_iiii[$23 & 511]($__ct,8192,$retval$0$i$i)|0);
     if (!($call$i)) {
      label = 44;
      break L21;
     }
     $24 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i146 = ((($24)) + 12|0);
     $25 = HEAP32[$__ninp_$i$i146>>2]|0;
     $__einp_$i$i147 = ((($24)) + 16|0);
     $26 = HEAP32[$__einp_$i$i147>>2]|0;
     $cmp$i$i148 = ($25|0)==($26|0);
     if ($cmp$i$i148) {
      $vtable$i$i149 = HEAP32[$24>>2]|0;
      $vfn$i$i150 = ((($vtable$i$i149)) + 40|0);
      $27 = HEAP32[$vfn$i$i150>>2]|0;
      $call$i$i151 = (FUNCTION_TABLE_ii[$27 & 511]($24)|0);
      $retval$0$i$i156 = $call$i$i151;
     } else {
      $incdec$ptr$i$i153 = ((($25)) + 4|0);
      HEAP32[$__ninp_$i$i146>>2] = $incdec$ptr$i$i153;
      $28 = HEAP32[$25>>2]|0;
      $call3$i$i154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($28)|0);
      $retval$0$i$i156 = $call3$i$i154;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$retval$0$i$i156);
     label = 46;
    }
    break;
   }
   case 0:  {
    $cmp10 = ($__p$0|0)==(3);
    if ($cmp10) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     label = 46;
    }
    break;
   }
   case 3:  {
    $51 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i230 = ($51<<24>>24)<(0);
    $52 = HEAP32[$__size_$i2$i>>2]|0;
    $conv$i$i = $51&255;
    $cond$i = $tobool$i$i230 ? $52 : $conv$i$i;
    $53 = HEAP8[$__size_$i$i231>>0]|0;
    $tobool$i$i232 = ($53<<24>>24)<(0);
    $54 = HEAP32[$__size_$i2$i233>>2]|0;
    $conv$i$i235 = $53&255;
    $cond$i237 = $tobool$i$i232 ? $54 : $conv$i$i235;
    $add = (0 - ($cond$i237))|0;
    $cmp23 = ($cond$i|0)==($add|0);
    if ($cmp23) {
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $cmp26 = ($cond$i|0)==(0);
     $cmp28 = ($cond$i237|0)==(0);
     $or$cond942 = $cmp26 | $cmp28;
     $55 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i264 = ((($55)) + 12|0);
     $56 = HEAP32[$__ninp_$i$i264>>2]|0;
     $__einp_$i$i265 = ((($55)) + 16|0);
     $57 = HEAP32[$__einp_$i$i265>>2]|0;
     $cmp$i$i266 = ($56|0)==($57|0);
     if ($or$cond942) {
      if ($cmp$i$i266) {
       $vtable$i$i267 = HEAP32[$55>>2]|0;
       $vfn$i$i268 = ((($vtable$i$i267)) + 36|0);
       $58 = HEAP32[$vfn$i$i268>>2]|0;
       $call$i$i269 = (FUNCTION_TABLE_ii[$58 & 511]($55)|0);
       $retval$0$i$i273 = $call$i$i269;
      } else {
       $59 = HEAP32[$56>>2]|0;
       $call3$i$i271 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($59)|0);
       $retval$0$i$i273 = $call3$i$i271;
      }
      if ($cmp26) {
       $70 = HEAP8[$__size_$i$i231>>0]|0;
       $tobool$i$i$i297 = ($70<<24>>24)<(0);
       $71 = HEAP32[$__nsn>>2]|0;
       $cond$i$i302 = $tobool$i$i$i297 ? $71 : $__nsn;
       $72 = HEAP32[$cond$i$i302>>2]|0;
       $cmp47 = ($retval$0$i$i273|0)==($72|0);
       if (!($cmp47)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $73 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i305 = ((($73)) + 12|0);
       $74 = HEAP32[$__ninp_$i$i305>>2]|0;
       $__einp_$i$i306 = ((($73)) + 16|0);
       $75 = HEAP32[$__einp_$i$i306>>2]|0;
       $cmp$i$i307 = ($74|0)==($75|0);
       if ($cmp$i$i307) {
        $vtable$i$i308 = HEAP32[$73>>2]|0;
        $vfn$i$i309 = ((($vtable$i$i308)) + 40|0);
        $76 = HEAP32[$vfn$i$i309>>2]|0;
        (FUNCTION_TABLE_ii[$76 & 511]($73)|0);
       } else {
        $incdec$ptr$i$i312 = ((($74)) + 4|0);
        HEAP32[$__ninp_$i$i305>>2] = $incdec$ptr$i$i312;
        $77 = HEAP32[$74>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($77)|0);
       }
       HEAP8[$__neg>>0] = 1;
       $78 = HEAP8[$__size_$i$i231>>0]|0;
       $tobool$i$i317 = ($78<<24>>24)<(0);
       $79 = HEAP32[$__size_$i2$i233>>2]|0;
       $conv$i$i320 = $78&255;
       $cond$i322 = $tobool$i$i317 ? $79 : $conv$i$i320;
       $cmp51 = ($cond$i322>>>0)>(1);
       $spec$select94 = $cmp51 ? $__nsn : $__trailing_sign$0;
       $__trailing_sign$1 = $spec$select94;
       break L46;
      }
      $60 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i$i275 = ($60<<24>>24)<(0);
      $61 = HEAP32[$__psn>>2]|0;
      $cond$i$i = $tobool$i$i$i275 ? $61 : $__psn;
      $62 = HEAP32[$cond$i$i>>2]|0;
      $cmp35 = ($retval$0$i$i273|0)==($62|0);
      if (!($cmp35)) {
       HEAP8[$__neg>>0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $63 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i277 = ((($63)) + 12|0);
      $64 = HEAP32[$__ninp_$i$i277>>2]|0;
      $__einp_$i$i278 = ((($63)) + 16|0);
      $65 = HEAP32[$__einp_$i$i278>>2]|0;
      $cmp$i$i279 = ($64|0)==($65|0);
      if ($cmp$i$i279) {
       $vtable$i$i280 = HEAP32[$63>>2]|0;
       $vfn$i$i281 = ((($vtable$i$i280)) + 40|0);
       $66 = HEAP32[$vfn$i$i281>>2]|0;
       (FUNCTION_TABLE_ii[$66 & 511]($63)|0);
      } else {
       $incdec$ptr$i$i284 = ((($64)) + 4|0);
       HEAP32[$__ninp_$i$i277>>2] = $incdec$ptr$i$i284;
       $67 = HEAP32[$64>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($67)|0);
      }
      $68 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i289 = ($68<<24>>24)<(0);
      $69 = HEAP32[$__size_$i2$i>>2]|0;
      $conv$i$i292 = $68&255;
      $cond$i294 = $tobool$i$i289 ? $69 : $conv$i$i292;
      $cmp39 = ($cond$i294>>>0)>(1);
      $spec$select = $cmp39 ? $__psn : $__trailing_sign$0;
      $__trailing_sign$1 = $spec$select;
      break L46;
     }
     if ($cmp$i$i266) {
      $vtable$i$i328 = HEAP32[$55>>2]|0;
      $vfn$i$i329 = ((($vtable$i$i328)) + 36|0);
      $80 = HEAP32[$vfn$i$i329>>2]|0;
      $call$i$i330 = (FUNCTION_TABLE_ii[$80 & 511]($55)|0);
      $retval$0$i$i334 = $call$i$i330;
     } else {
      $81 = HEAP32[$56>>2]|0;
      $call3$i$i332 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($81)|0);
      $retval$0$i$i334 = $call3$i$i332;
     }
     $82 = HEAP8[$__size_$i$i>>0]|0;
     $tobool$i$i$i337 = ($82<<24>>24)<(0);
     $83 = HEAP32[$__psn>>2]|0;
     $cond$i$i342 = $tobool$i$i$i337 ? $83 : $__psn;
     $84 = HEAP32[$cond$i$i342>>2]|0;
     $cmp59 = ($retval$0$i$i334|0)==($84|0);
     $85 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i345 = ((($85)) + 12|0);
     $86 = HEAP32[$__ninp_$i$i345>>2]|0;
     $__einp_$i$i346 = ((($85)) + 16|0);
     $87 = HEAP32[$__einp_$i$i346>>2]|0;
     $cmp$i$i347 = ($86|0)==($87|0);
     if ($cmp59) {
      if ($cmp$i$i347) {
       $vtable$i$i348 = HEAP32[$85>>2]|0;
       $vfn$i$i349 = ((($vtable$i$i348)) + 40|0);
       $88 = HEAP32[$vfn$i$i349>>2]|0;
       (FUNCTION_TABLE_ii[$88 & 511]($85)|0);
      } else {
       $incdec$ptr$i$i352 = ((($86)) + 4|0);
       HEAP32[$__ninp_$i$i345>>2] = $incdec$ptr$i$i352;
       $89 = HEAP32[$86>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
      }
      $90 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i357 = ($90<<24>>24)<(0);
      $91 = HEAP32[$__size_$i2$i>>2]|0;
      $conv$i$i360 = $90&255;
      $cond$i362 = $tobool$i$i357 ? $91 : $conv$i$i360;
      $cmp63 = ($cond$i362>>>0)>(1);
      $spec$select95 = $cmp63 ? $__psn : $__trailing_sign$0;
      $__trailing_sign$1 = $spec$select95;
      break L46;
     }
     if ($cmp$i$i347) {
      $vtable$i$i368 = HEAP32[$85>>2]|0;
      $vfn$i$i369 = ((($vtable$i$i368)) + 36|0);
      $92 = HEAP32[$vfn$i$i369>>2]|0;
      $call$i$i370 = (FUNCTION_TABLE_ii[$92 & 511]($85)|0);
      $retval$0$i$i374 = $call$i$i370;
     } else {
      $93 = HEAP32[$86>>2]|0;
      $call3$i$i372 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($93)|0);
      $retval$0$i$i374 = $call3$i$i372;
     }
     $94 = HEAP8[$__size_$i$i231>>0]|0;
     $tobool$i$i$i377 = ($94<<24>>24)<(0);
     $95 = HEAP32[$__nsn>>2]|0;
     $cond$i$i382 = $tobool$i$i$i377 ? $95 : $__nsn;
     $96 = HEAP32[$cond$i$i382>>2]|0;
     $cmp69 = ($retval$0$i$i374|0)==($96|0);
     if (!($cmp69)) {
      label = 103;
      break L21;
     }
     $97 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i385 = ((($97)) + 12|0);
     $98 = HEAP32[$__ninp_$i$i385>>2]|0;
     $__einp_$i$i386 = ((($97)) + 16|0);
     $99 = HEAP32[$__einp_$i$i386>>2]|0;
     $cmp$i$i387 = ($98|0)==($99|0);
     if ($cmp$i$i387) {
      $vtable$i$i388 = HEAP32[$97>>2]|0;
      $vfn$i$i389 = ((($vtable$i$i388)) + 40|0);
      $100 = HEAP32[$vfn$i$i389>>2]|0;
      (FUNCTION_TABLE_ii[$100 & 511]($97)|0);
     } else {
      $incdec$ptr$i$i392 = ((($98)) + 4|0);
      HEAP32[$__ninp_$i$i385>>2] = $incdec$ptr$i$i392;
      $101 = HEAP32[$98>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
     }
     HEAP8[$__neg>>0] = 1;
     $102 = HEAP8[$__size_$i$i231>>0]|0;
     $tobool$i$i397 = ($102<<24>>24)<(0);
     $103 = HEAP32[$__size_$i2$i233>>2]|0;
     $conv$i$i400 = $102&255;
     $cond$i402 = $tobool$i$i397 ? $103 : $conv$i$i400;
     $cmp73 = ($cond$i402>>>0)>(1);
     $spec$select96 = $cmp73 ? $__nsn : $__trailing_sign$0;
     $__trailing_sign$1 = $spec$select96;
    }
    break;
   }
   case 2:  {
    $tobool83 = ($__trailing_sign$0|0)!=(0|0);
    $cmp85 = ($__p$0>>>0)<(2);
    $or$cond = $cmp85 | $tobool83;
    if ($or$cond) {
     $110 = HEAP8[$__size_$i$i$i404>>0]|0;
     $tobool$i$i$i405 = ($110<<24>>24)<(0);
     $111 = HEAP32[$__sym>>2]|0;
     $cond$i$i410 = $tobool$i$i$i405 ? $111 : $__sym;
     $112 = $cond$i$i410;
     $cmp102 = ($__p$0|0)==(0);
     if ($cmp102) {
      $291 = $111;$292 = $110;$__sym_space_end$sroa$0$1 = $112;
     } else {
      $288 = $112;$289 = $111;$290 = $110;
      label = 108;
     }
    } else {
     $cmp86 = ($__p$0|0)==(2);
     $105 = HEAP8[$arrayidx89>>0]|0;
     $cmp91 = ($105<<24>>24)!=(0);
     $106 = $cmp86 & $cmp91;
     $brmerge = $cmp94895 | $106;
     if (!($brmerge)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $107 = HEAP8[$__size_$i$i$i404>>0]|0;
     $tobool$i$i$i405928 = ($107<<24>>24)<(0);
     $108 = HEAP32[$__sym>>2]|0;
     $cond$i$i410929 = $tobool$i$i$i405928 ? $108 : $__sym;
     $109 = $cond$i$i410929;
     $288 = $109;$289 = $108;$290 = $107;
     label = 108;
    }
    L108: do {
     if ((label|0) == 108) {
      label = 0;
      $sub = (($__p$0) + -1)|0;
      $arrayidx104 = (($__pat) + ($sub)|0);
      $113 = HEAP8[$arrayidx104>>0]|0;
      $switch = ($113&255)<(2);
      if ($switch) {
       $114 = $290;$116 = $289;$__sym_space_end$sroa$0$0 = $288;
       while(1) {
        $tobool$i$i$i412 = ($114<<24>>24)<(0);
        $115 = HEAP32[$__size_$i2$i$i541>>2]|0;
        $conv$i$i$i = $114&255;
        $cond$i6$i = $tobool$i$i$i412 ? $116 : $__sym;
        $cond$i5$i = $tobool$i$i$i412 ? $115 : $conv$i$i$i;
        $add$ptr$i = (($cond$i6$i) + ($cond$i5$i<<2)|0);
        $117 = $__sym_space_end$sroa$0$0;
        $cmp$i$i415 = ($add$ptr$i|0)==($117|0);
        if ($cmp$i$i415) {
         $121 = $114;$122 = $116;
         break;
        }
        $118 = HEAP32[$117>>2]|0;
        $vtable$i416 = HEAP32[$__ct>>2]|0;
        $vfn$i417 = ((($vtable$i416)) + 12|0);
        $119 = HEAP32[$vfn$i417>>2]|0;
        $call$i418 = (FUNCTION_TABLE_iiii[$119 & 511]($__ct,8192,$118)|0);
        if (!($call$i418)) {
         label = 112;
         break;
        }
        $incdec$ptr$i = ((($117)) + 4|0);
        $120 = $incdec$ptr$i;
        $$pre922 = HEAP8[$__size_$i$i$i404>>0]|0;
        $$pre923 = HEAP32[$__sym>>2]|0;
        $114 = $$pre922;$116 = $$pre923;$__sym_space_end$sroa$0$0 = $120;
       }
       if ((label|0) == 112) {
        label = 0;
        $$pre924 = HEAP8[$__size_$i$i$i404>>0]|0;
        $$pre925 = HEAP32[$__sym>>2]|0;
        $121 = $$pre924;$122 = $$pre925;
       }
       $tobool$i$i$i421 = ($121<<24>>24)<(0);
       $cond$i$i426 = $tobool$i$i$i421 ? $122 : $__sym;
       $123 = $cond$i$i426;
       $sub$ptr$sub$i = (($__sym_space_end$sroa$0$0) - ($123))|0;
       $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
       $124 = HEAP8[$__size_$i$i428>>0]|0;
       $tobool$i$i429 = ($124<<24>>24)<(0);
       $125 = HEAP32[$__size_$i2$i430>>2]|0;
       $conv$i$i432 = $124&255;
       $cond$i434 = $tobool$i$i429 ? $125 : $conv$i$i432;
       $cmp131 = ($sub$ptr$div$i>>>0)>($cond$i434>>>0);
       if ($cmp131) {
        $291 = $122;$292 = $121;$__sym_space_end$sroa$0$1 = $123;
       } else {
        $126 = HEAP32[$__spaces>>2]|0;
        $add$ptr$i446898 = (($126) + ($125<<2)|0);
        $add$ptr$i446 = (($__spaces) + ($conv$i$i432<<2)|0);
        $add$ptr$i446898$sink = $tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446;
        $add$ptr$i458$pre$phiZZZ2D = $tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446;
        $sub$i899 = (0 - ($sub$ptr$div$i))|0;
        $add$ptr$i$i$i900 = (($add$ptr$i446898$sink) + ($sub$i899<<2)|0);
        $127 = $add$ptr$i$i$i900;$agg$tmp26$sroa$0$0$ptr$i = $cond$i$i426;
        while(1) {
         $cmp$i$i$i$i484 = ($127|0)==($add$ptr$i458$pre$phiZZZ2D|0);
         if ($cmp$i$i$i$i484) {
          $291 = $122;$292 = $121;$__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
          break L108;
         }
         $128 = HEAP32[$127>>2]|0;
         $129 = HEAP32[$agg$tmp26$sroa$0$0$ptr$i>>2]|0;
         $cmp$i$i$i = ($128|0)==($129|0);
         if (!($cmp$i$i$i)) {
          $291 = $122;$292 = $121;$__sym_space_end$sroa$0$1 = $123;
          break L108;
         }
         $incdec$ptr$i2$i$i = ((($127)) + 4|0);
         $incdec$ptr$i$i$i = ((($agg$tmp26$sroa$0$0$ptr$i)) + 4|0);
         $127 = $incdec$ptr$i2$i$i;$agg$tmp26$sroa$0$0$ptr$i = $incdec$ptr$i$i$i;
        }
       }
      } else {
       $291 = $289;$292 = $290;$__sym_space_end$sroa$0$1 = $288;
      }
     }
    } while(0);
    $__sym_space_end$sroa$0$1$ptr = $__sym_space_end$sroa$0$1;
    $130 = $292;$132 = $291;$138 = $284;$__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1$ptr;
    L124: while(1) {
     $tobool$i$i$i539 = ($130<<24>>24)<(0);
     $131 = HEAP32[$__size_$i2$i$i541>>2]|0;
     $conv$i$i$i544 = $130&255;
     $cond$i6$i546 = $tobool$i$i$i539 ? $132 : $__sym;
     $cond$i5$i547 = $tobool$i$i$i539 ? $131 : $conv$i$i$i544;
     $add$ptr$i548 = (($cond$i6$i546) + ($cond$i5$i547<<2)|0);
     $cmp$i$i552 = ($__sym_curr_char$sroa$0$0$ptr|0)==($add$ptr$i548|0);
     if ($cmp$i$i552) {
      break;
     }
     $133 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i554 = ($133|0)==(0|0);
     do {
      if ($tobool$i$i$i554) {
       $293 = 1;
      } else {
       $__ninp_$i$i$i$i555 = ((($133)) + 12|0);
       $134 = HEAP32[$__ninp_$i$i$i$i555>>2]|0;
       $__einp_$i$i$i$i556 = ((($133)) + 16|0);
       $135 = HEAP32[$__einp_$i$i$i$i556>>2]|0;
       $cmp$i$i$i$i557 = ($134|0)==($135|0);
       if ($cmp$i$i$i$i557) {
        $vtable$i$i$i$i559 = HEAP32[$133>>2]|0;
        $vfn$i$i$i$i560 = ((($vtable$i$i$i$i559)) + 36|0);
        $136 = HEAP32[$vfn$i$i$i$i560>>2]|0;
        $call$i$i$i$i561 = (FUNCTION_TABLE_ii[$136 & 511]($133)|0);
        $retval$0$i$i$i$i565 = $call$i$i$i$i561;
       } else {
        $137 = HEAP32[$134>>2]|0;
        $call3$i$i$i$i563 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($137)|0);
        $retval$0$i$i$i$i565 = $call3$i$i$i$i563;
       }
       $call3$i$i$i566 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i567 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i565,$call3$i$i$i566)|0);
       if ($call4$i$i$i567) {
        HEAP32[$__b>>2] = 0;
        $293 = 1;
        break;
       } else {
        $$pre$i$i$i569 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i570 = ($$pre$i$i$i569|0)==(0|0);
        $293 = $phitmp$i$i$i570;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i574 = ($138|0)==(0|0);
     do {
      if ($tobool$i2$i$i574) {
       label = 134;
      } else {
       $__ninp_$i$i3$i$i576 = ((($138)) + 12|0);
       $139 = HEAP32[$__ninp_$i$i3$i$i576>>2]|0;
       $__einp_$i$i4$i$i577 = ((($138)) + 16|0);
       $140 = HEAP32[$__einp_$i$i4$i$i577>>2]|0;
       $cmp$i$i5$i$i578 = ($139|0)==($140|0);
       if ($cmp$i$i5$i$i578) {
        $vtable$i$i7$i$i580 = HEAP32[$138>>2]|0;
        $vfn$i$i8$i$i581 = ((($vtable$i$i7$i$i580)) + 36|0);
        $141 = HEAP32[$vfn$i$i8$i$i581>>2]|0;
        $call$i$i9$i$i582 = (FUNCTION_TABLE_ii[$141 & 511]($138)|0);
        $retval$0$i$i13$i$i586 = $call$i$i9$i$i582;
       } else {
        $142 = HEAP32[$139>>2]|0;
        $call3$i$i11$i$i584 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
        $retval$0$i$i13$i$i586 = $call3$i$i11$i$i584;
       }
       $call3$i14$i$i587 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i588 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i586,$call3$i14$i$i587)|0);
       if ($call4$i15$i$i588) {
        HEAP32[$__e>>2] = 0;
        label = 134;
        break;
       } else {
        if ($293) {
         $294 = $138;
         break;
        } else {
         break L124;
        }
       }
      }
     } while(0);
     if ((label|0) == 134) {
      label = 0;
      if ($293) {
       break;
      } else {
       $294 = 0;
      }
     }
     $143 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i596 = ((($143)) + 12|0);
     $144 = HEAP32[$__ninp_$i$i596>>2]|0;
     $__einp_$i$i597 = ((($143)) + 16|0);
     $145 = HEAP32[$__einp_$i$i597>>2]|0;
     $cmp$i$i598 = ($144|0)==($145|0);
     if ($cmp$i$i598) {
      $vtable$i$i599 = HEAP32[$143>>2]|0;
      $vfn$i$i600 = ((($vtable$i$i599)) + 36|0);
      $146 = HEAP32[$vfn$i$i600>>2]|0;
      $call$i$i601 = (FUNCTION_TABLE_ii[$146 & 511]($143)|0);
      $retval$0$i$i605 = $call$i$i601;
     } else {
      $147 = HEAP32[$144>>2]|0;
      $call3$i$i603 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
      $retval$0$i$i605 = $call3$i$i603;
     }
     $148 = HEAP32[$__sym_curr_char$sroa$0$0$ptr>>2]|0;
     $cmp162 = ($retval$0$i$i605|0)==($148|0);
     if (!($cmp162)) {
      break;
     }
     $149 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i609 = ((($149)) + 12|0);
     $150 = HEAP32[$__ninp_$i$i609>>2]|0;
     $__einp_$i$i610 = ((($149)) + 16|0);
     $151 = HEAP32[$__einp_$i$i610>>2]|0;
     $cmp$i$i611 = ($150|0)==($151|0);
     if ($cmp$i$i611) {
      $vtable$i$i612 = HEAP32[$149>>2]|0;
      $vfn$i$i613 = ((($vtable$i$i612)) + 40|0);
      $152 = HEAP32[$vfn$i$i613>>2]|0;
      (FUNCTION_TABLE_ii[$152 & 511]($149)|0);
     } else {
      $incdec$ptr$i$i616 = ((($150)) + 4|0);
      HEAP32[$__ninp_$i$i609>>2] = $incdec$ptr$i$i616;
      $153 = HEAP32[$150>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
     }
     $incdec$ptr$i621 = ((($__sym_curr_char$sroa$0$0$ptr)) + 4|0);
     $$pre926 = HEAP8[$__size_$i$i$i404>>0]|0;
     $$pre927 = HEAP32[$__sym>>2]|0;
     $130 = $$pre926;$132 = $$pre927;$138 = $294;$__sym_curr_char$sroa$0$0$ptr = $incdec$ptr$i621;
    }
    if ($cmp94895) {
     $154 = HEAP8[$__size_$i$i$i404>>0]|0;
     $tobool$i$i$i623 = ($154<<24>>24)<(0);
     $155 = HEAP32[$__sym>>2]|0;
     $156 = HEAP32[$__size_$i2$i$i541>>2]|0;
     $conv$i$i$i628 = $154&255;
     $cond$i6$i630 = $tobool$i$i$i623 ? $155 : $__sym;
     $cond$i5$i631 = $tobool$i$i$i623 ? $156 : $conv$i$i$i628;
     $add$ptr$i632 = (($cond$i6$i630) + ($cond$i5$i631<<2)|0);
     $cmp$i$i636 = ($__sym_curr_char$sroa$0$0$ptr|0)==($add$ptr$i632|0);
     if ($cmp$i$i636) {
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 146;
      break L21;
     }
    } else {
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   case 4:  {
    $163 = $284;$285 = $284;$__ng$0 = 0;
    L161: while(1) {
     $158 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i638 = ($158|0)==(0|0);
     do {
      if ($tobool$i$i$i638) {
       $295 = 1;
      } else {
       $__ninp_$i$i$i$i639 = ((($158)) + 12|0);
       $159 = HEAP32[$__ninp_$i$i$i$i639>>2]|0;
       $__einp_$i$i$i$i640 = ((($158)) + 16|0);
       $160 = HEAP32[$__einp_$i$i$i$i640>>2]|0;
       $cmp$i$i$i$i641 = ($159|0)==($160|0);
       if ($cmp$i$i$i$i641) {
        $vtable$i$i$i$i643 = HEAP32[$158>>2]|0;
        $vfn$i$i$i$i644 = ((($vtable$i$i$i$i643)) + 36|0);
        $161 = HEAP32[$vfn$i$i$i$i644>>2]|0;
        $call$i$i$i$i645 = (FUNCTION_TABLE_ii[$161 & 511]($158)|0);
        $retval$0$i$i$i$i649 = $call$i$i$i$i645;
       } else {
        $162 = HEAP32[$159>>2]|0;
        $call3$i$i$i$i647 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($162)|0);
        $retval$0$i$i$i$i649 = $call3$i$i$i$i647;
       }
       $call3$i$i$i650 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i651 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i649,$call3$i$i$i650)|0);
       if ($call4$i$i$i651) {
        HEAP32[$__b>>2] = 0;
        $295 = 1;
        break;
       } else {
        $$pre$i$i$i653 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i654 = ($$pre$i$i$i653|0)==(0|0);
        $295 = $phitmp$i$i$i654;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i658 = ($163|0)==(0|0);
     do {
      if ($tobool$i2$i$i658) {
       $296 = $285;
       label = 160;
      } else {
       $__ninp_$i$i3$i$i660 = ((($163)) + 12|0);
       $164 = HEAP32[$__ninp_$i$i3$i$i660>>2]|0;
       $__einp_$i$i4$i$i661 = ((($163)) + 16|0);
       $165 = HEAP32[$__einp_$i$i4$i$i661>>2]|0;
       $cmp$i$i5$i$i662 = ($164|0)==($165|0);
       if ($cmp$i$i5$i$i662) {
        $vtable$i$i7$i$i664 = HEAP32[$163>>2]|0;
        $vfn$i$i8$i$i665 = ((($vtable$i$i7$i$i664)) + 36|0);
        $166 = HEAP32[$vfn$i$i8$i$i665>>2]|0;
        $call$i$i9$i$i666 = (FUNCTION_TABLE_ii[$166 & 511]($163)|0);
        $retval$0$i$i13$i$i670 = $call$i$i9$i$i666;
       } else {
        $167 = HEAP32[$164>>2]|0;
        $call3$i$i11$i$i668 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($167)|0);
        $retval$0$i$i13$i$i670 = $call3$i$i11$i$i668;
       }
       $call3$i14$i$i671 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i672 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i670,$call3$i14$i$i671)|0);
       if ($call4$i15$i$i672) {
        HEAP32[$__e>>2] = 0;
        $296 = 0;
        label = 160;
        break;
       } else {
        if ($295) {
         $297 = $285;$298 = $163;
         break;
        } else {
         $198 = $285;
         break L161;
        }
       }
      }
     } while(0);
     if ((label|0) == 160) {
      label = 0;
      if ($295) {
       $198 = $296;
       break;
      } else {
       $297 = $296;$298 = 0;
      }
     }
     $168 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i680 = ((($168)) + 12|0);
     $169 = HEAP32[$__ninp_$i$i680>>2]|0;
     $__einp_$i$i681 = ((($168)) + 16|0);
     $170 = HEAP32[$__einp_$i$i681>>2]|0;
     $cmp$i$i682 = ($169|0)==($170|0);
     if ($cmp$i$i682) {
      $vtable$i$i683 = HEAP32[$168>>2]|0;
      $vfn$i$i684 = ((($vtable$i$i683)) + 36|0);
      $171 = HEAP32[$vfn$i$i684>>2]|0;
      $call$i$i685 = (FUNCTION_TABLE_ii[$171 & 511]($168)|0);
      $retval$0$i$i689 = $call$i$i685;
     } else {
      $172 = HEAP32[$169>>2]|0;
      $call3$i$i687 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($172)|0);
      $retval$0$i$i689 = $call3$i$i687;
     }
     $vtable$i691 = HEAP32[$__ct>>2]|0;
     $vfn$i692 = ((($vtable$i691)) + 12|0);
     $173 = HEAP32[$vfn$i692>>2]|0;
     $call$i693 = (FUNCTION_TABLE_iiii[$173 & 511]($__ct,2048,$retval$0$i$i689)|0);
     if ($call$i693) {
      $174 = HEAP32[$__wn>>2]|0;
      $175 = HEAP32[$__we$addr>>2]|0;
      $cmp191 = ($174|0)==($175|0);
      if ($cmp191) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we$addr);
       $$pre920 = HEAP32[$__wn>>2]|0;
       $176 = $$pre920;
      } else {
       $176 = $174;
      }
      $incdec$ptr = ((($176)) + 4|0);
      HEAP32[$__wn>>2] = $incdec$ptr;
      HEAP32[$176>>2] = $retval$0$i$i689;
      $inc = (($__ng$0) + 1)|0;
      $__ng$2$ph = $inc;
     } else {
      $177 = HEAP8[$__size_$i$i694>>0]|0;
      $tobool$i$i695 = ($177<<24>>24)<(0);
      $178 = HEAP32[$__size_$i3$i>>2]|0;
      $conv$i$i697 = $177&255;
      $cond$i699 = $tobool$i$i695 ? $178 : $conv$i$i697;
      $cmp196 = ($cond$i699|0)!=(0);
      $cmp198 = ($__ng$0|0)!=(0);
      $or$cond7 = $cmp198 & $cmp196;
      $179 = HEAP32[$__ts>>2]|0;
      $cmp200 = ($retval$0$i$i689|0)==($179|0);
      $or$cond97 = $cmp200 & $or$cond7;
      if (!($or$cond97)) {
       $198 = $297;
       break;
      }
      $180 = HEAP32[$__gn>>2]|0;
      $181 = HEAP32[$__ge>>2]|0;
      $cmp202 = ($180|0)==($181|0);
      if ($cmp202) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre = HEAP32[$__gn>>2]|0;
       $182 = $$pre;
      } else {
       $182 = $180;
      }
      $incdec$ptr205 = ((($182)) + 4|0);
      HEAP32[$__gn>>2] = $incdec$ptr205;
      HEAP32[$182>>2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $183 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i701 = ((($183)) + 12|0);
     $184 = HEAP32[$__ninp_$i$i701>>2]|0;
     $__einp_$i$i702 = ((($183)) + 16|0);
     $185 = HEAP32[$__einp_$i$i702>>2]|0;
     $cmp$i$i703 = ($184|0)==($185|0);
     if ($cmp$i$i703) {
      $vtable$i$i704 = HEAP32[$183>>2]|0;
      $vfn$i$i705 = ((($vtable$i$i704)) + 40|0);
      $186 = HEAP32[$vfn$i$i705>>2]|0;
      (FUNCTION_TABLE_ii[$186 & 511]($183)|0);
     } else {
      $incdec$ptr$i$i708 = ((($184)) + 4|0);
      HEAP32[$__ninp_$i$i701>>2] = $incdec$ptr$i$i708;
      $187 = HEAP32[$184>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($187)|0);
     }
     $163 = $298;$285 = $297;$__ng$0 = $__ng$2$ph;
    }
    $188 = HEAP32[$__gb>>2]|0;
    $189 = HEAP32[$__gn>>2]|0;
    $cmp214 = ($188|0)!=($189|0);
    $cmp216 = ($__ng$0|0)!=(0);
    $or$cond8 = $cmp216 & $cmp214;
    if ($or$cond8) {
     $190 = HEAP32[$__ge>>2]|0;
     $cmp218 = ($189|0)==($190|0);
     if ($cmp218) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre921 = HEAP32[$__gn>>2]|0;
      $191 = $$pre921;
     } else {
      $191 = $189;
     }
     $incdec$ptr221 = ((($191)) + 4|0);
     HEAP32[$__gn>>2] = $incdec$ptr221;
     HEAP32[$191>>2] = $__ng$0;
    }
    $192 = HEAP32[$__fd>>2]|0;
    $cmp223 = ($192|0)>(0);
    L211: do {
     if ($cmp223) {
      $193 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i714 = ($193|0)==(0|0);
      do {
       if ($tobool$i$i$i714) {
        $299 = 1;
       } else {
        $__ninp_$i$i$i$i715 = ((($193)) + 12|0);
        $194 = HEAP32[$__ninp_$i$i$i$i715>>2]|0;
        $__einp_$i$i$i$i716 = ((($193)) + 16|0);
        $195 = HEAP32[$__einp_$i$i$i$i716>>2]|0;
        $cmp$i$i$i$i717 = ($194|0)==($195|0);
        if ($cmp$i$i$i$i717) {
         $vtable$i$i$i$i719 = HEAP32[$193>>2]|0;
         $vfn$i$i$i$i720 = ((($vtable$i$i$i$i719)) + 36|0);
         $196 = HEAP32[$vfn$i$i$i$i720>>2]|0;
         $call$i$i$i$i721 = (FUNCTION_TABLE_ii[$196 & 511]($193)|0);
         $retval$0$i$i$i$i725 = $call$i$i$i$i721;
        } else {
         $197 = HEAP32[$194>>2]|0;
         $call3$i$i$i$i723 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($197)|0);
         $retval$0$i$i$i$i725 = $call3$i$i$i$i723;
        }
        $call3$i$i$i726 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i$i$i727 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i725,$call3$i$i$i726)|0);
        if ($call4$i$i$i727) {
         HEAP32[$__b>>2] = 0;
         $299 = 1;
         break;
        } else {
         $$pre$i$i$i729 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i730 = ($$pre$i$i$i729|0)==(0|0);
         $299 = $phitmp$i$i$i730;
         break;
        }
       }
      } while(0);
      $tobool$i2$i$i734 = ($198|0)==(0|0);
      do {
       if ($tobool$i2$i$i734) {
        label = 195;
       } else {
        $__ninp_$i$i3$i$i736 = ((($198)) + 12|0);
        $199 = HEAP32[$__ninp_$i$i3$i$i736>>2]|0;
        $__einp_$i$i4$i$i737 = ((($198)) + 16|0);
        $200 = HEAP32[$__einp_$i$i4$i$i737>>2]|0;
        $cmp$i$i5$i$i738 = ($199|0)==($200|0);
        if ($cmp$i$i5$i$i738) {
         $vtable$i$i7$i$i740 = HEAP32[$198>>2]|0;
         $vfn$i$i8$i$i741 = ((($vtable$i$i7$i$i740)) + 36|0);
         $201 = HEAP32[$vfn$i$i8$i$i741>>2]|0;
         $call$i$i9$i$i742 = (FUNCTION_TABLE_ii[$201 & 511]($198)|0);
         $retval$0$i$i13$i$i746 = $call$i$i9$i$i742;
        } else {
         $202 = HEAP32[$199>>2]|0;
         $call3$i$i11$i$i744 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($202)|0);
         $retval$0$i$i13$i$i746 = $call3$i$i11$i$i744;
        }
        $call3$i14$i$i747 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i748 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i746,$call3$i14$i$i747)|0);
        if ($call4$i15$i$i748) {
         HEAP32[$__e>>2] = 0;
         label = 195;
         break;
        } else {
         if ($299) {
          $300 = $198;
          break;
         } else {
          label = 201;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 195) {
       label = 0;
       if ($299) {
        label = 201;
        break L21;
       } else {
        $300 = 0;
       }
      }
      $203 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i757 = ((($203)) + 12|0);
      $204 = HEAP32[$__ninp_$i$i757>>2]|0;
      $__einp_$i$i758 = ((($203)) + 16|0);
      $205 = HEAP32[$__einp_$i$i758>>2]|0;
      $cmp$i$i759 = ($204|0)==($205|0);
      if ($cmp$i$i759) {
       $vtable$i$i760 = HEAP32[$203>>2]|0;
       $vfn$i$i761 = ((($vtable$i$i760)) + 36|0);
       $206 = HEAP32[$vfn$i$i761>>2]|0;
       $call$i$i762 = (FUNCTION_TABLE_ii[$206 & 511]($203)|0);
       $retval$0$i$i766 = $call$i$i762;
      } else {
       $207 = HEAP32[$204>>2]|0;
       $call3$i$i764 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($207)|0);
       $retval$0$i$i766 = $call3$i$i764;
      }
      $208 = HEAP32[$__dp>>2]|0;
      $cmp228 = ($retval$0$i$i766|0)==($208|0);
      if (!($cmp228)) {
       label = 201;
       break L21;
      }
      $210 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i769 = ((($210)) + 12|0);
      $211 = HEAP32[$__ninp_$i$i769>>2]|0;
      $__einp_$i$i770 = ((($210)) + 16|0);
      $212 = HEAP32[$__einp_$i$i770>>2]|0;
      $cmp$i$i771 = ($211|0)==($212|0);
      if ($cmp$i$i771) {
       $vtable$i$i772 = HEAP32[$210>>2]|0;
       $vfn$i$i773 = ((($vtable$i$i772)) + 40|0);
       $213 = HEAP32[$vfn$i$i773>>2]|0;
       (FUNCTION_TABLE_ii[$213 & 511]($210)|0);
      } else {
       $incdec$ptr$i$i776 = ((($211)) + 4|0);
       HEAP32[$__ninp_$i$i769>>2] = $incdec$ptr$i$i776;
       $214 = HEAP32[$211>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($214)|0);
      }
      $221 = $300;
      while(1) {
       $215 = HEAP32[$__fd>>2]|0;
       $cmp234 = ($215|0)>(0);
       if (!($cmp234)) {
        break L211;
       }
       $216 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i781 = ($216|0)==(0|0);
       do {
        if ($tobool$i$i$i781) {
         $301 = 1;
        } else {
         $__ninp_$i$i$i$i782 = ((($216)) + 12|0);
         $217 = HEAP32[$__ninp_$i$i$i$i782>>2]|0;
         $__einp_$i$i$i$i783 = ((($216)) + 16|0);
         $218 = HEAP32[$__einp_$i$i$i$i783>>2]|0;
         $cmp$i$i$i$i784 = ($217|0)==($218|0);
         if ($cmp$i$i$i$i784) {
          $vtable$i$i$i$i786 = HEAP32[$216>>2]|0;
          $vfn$i$i$i$i787 = ((($vtable$i$i$i$i786)) + 36|0);
          $219 = HEAP32[$vfn$i$i$i$i787>>2]|0;
          $call$i$i$i$i788 = (FUNCTION_TABLE_ii[$219 & 511]($216)|0);
          $retval$0$i$i$i$i792 = $call$i$i$i$i788;
         } else {
          $220 = HEAP32[$217>>2]|0;
          $call3$i$i$i$i790 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($220)|0);
          $retval$0$i$i$i$i792 = $call3$i$i$i$i790;
         }
         $call3$i$i$i793 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i$i$i794 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i792,$call3$i$i$i793)|0);
         if ($call4$i$i$i794) {
          HEAP32[$__b>>2] = 0;
          $301 = 1;
          break;
         } else {
          $$pre$i$i$i796 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i797 = ($$pre$i$i$i796|0)==(0|0);
          $301 = $phitmp$i$i$i797;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i801 = ($221|0)==(0|0);
       do {
        if ($tobool$i2$i$i801) {
         label = 220;
        } else {
         $__ninp_$i$i3$i$i803 = ((($221)) + 12|0);
         $222 = HEAP32[$__ninp_$i$i3$i$i803>>2]|0;
         $__einp_$i$i4$i$i804 = ((($221)) + 16|0);
         $223 = HEAP32[$__einp_$i$i4$i$i804>>2]|0;
         $cmp$i$i5$i$i805 = ($222|0)==($223|0);
         if ($cmp$i$i5$i$i805) {
          $vtable$i$i7$i$i807 = HEAP32[$221>>2]|0;
          $vfn$i$i8$i$i808 = ((($vtable$i$i7$i$i807)) + 36|0);
          $224 = HEAP32[$vfn$i$i8$i$i808>>2]|0;
          $call$i$i9$i$i809 = (FUNCTION_TABLE_ii[$224 & 511]($221)|0);
          $retval$0$i$i13$i$i813 = $call$i$i9$i$i809;
         } else {
          $225 = HEAP32[$222>>2]|0;
          $call3$i$i11$i$i811 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($225)|0);
          $retval$0$i$i13$i$i813 = $call3$i$i11$i$i811;
         }
         $call3$i14$i$i814 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i15$i$i815 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i813,$call3$i14$i$i814)|0);
         if ($call4$i15$i$i815) {
          HEAP32[$__e>>2] = 0;
          label = 220;
          break;
         } else {
          if ($301) {
           $302 = $221;
           break;
          } else {
           label = 226;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 220) {
        label = 0;
        if ($301) {
         label = 226;
         break L21;
        } else {
         $302 = 0;
        }
       }
       $226 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i824 = ((($226)) + 12|0);
       $227 = HEAP32[$__ninp_$i$i824>>2]|0;
       $__einp_$i$i825 = ((($226)) + 16|0);
       $228 = HEAP32[$__einp_$i$i825>>2]|0;
       $cmp$i$i826 = ($227|0)==($228|0);
       if ($cmp$i$i826) {
        $vtable$i$i827 = HEAP32[$226>>2]|0;
        $vfn$i$i828 = ((($vtable$i$i827)) + 36|0);
        $229 = HEAP32[$vfn$i$i828>>2]|0;
        $call$i$i829 = (FUNCTION_TABLE_ii[$229 & 511]($226)|0);
        $retval$0$i$i833 = $call$i$i829;
       } else {
        $230 = HEAP32[$227>>2]|0;
        $call3$i$i831 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($230)|0);
        $retval$0$i$i833 = $call3$i$i831;
       }
       $vtable$i835 = HEAP32[$__ct>>2]|0;
       $vfn$i836 = ((($vtable$i835)) + 12|0);
       $231 = HEAP32[$vfn$i836>>2]|0;
       $call$i837 = (FUNCTION_TABLE_iiii[$231 & 511]($__ct,2048,$retval$0$i$i833)|0);
       if (!($call$i837)) {
        label = 226;
        break L21;
       }
       $233 = HEAP32[$__wn>>2]|0;
       $234 = HEAP32[$__we$addr>>2]|0;
       $cmp243 = ($233|0)==($234|0);
       if ($cmp243) {
        __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we$addr);
       }
       $235 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i839 = ((($235)) + 12|0);
       $236 = HEAP32[$__ninp_$i$i839>>2]|0;
       $__einp_$i$i840 = ((($235)) + 16|0);
       $237 = HEAP32[$__einp_$i$i840>>2]|0;
       $cmp$i$i841 = ($236|0)==($237|0);
       if ($cmp$i$i841) {
        $vtable$i$i842 = HEAP32[$235>>2]|0;
        $vfn$i$i843 = ((($vtable$i$i842)) + 36|0);
        $238 = HEAP32[$vfn$i$i843>>2]|0;
        $call$i$i844 = (FUNCTION_TABLE_ii[$238 & 511]($235)|0);
        $retval$0$i$i848 = $call$i$i844;
       } else {
        $239 = HEAP32[$236>>2]|0;
        $call3$i$i846 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($239)|0);
        $retval$0$i$i848 = $call3$i$i846;
       }
       $240 = HEAP32[$__wn>>2]|0;
       $incdec$ptr247 = ((($240)) + 4|0);
       HEAP32[$__wn>>2] = $incdec$ptr247;
       HEAP32[$240>>2] = $retval$0$i$i848;
       $241 = HEAP32[$__fd>>2]|0;
       $dec = (($241) + -1)|0;
       HEAP32[$__fd>>2] = $dec;
       $242 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i851 = ((($242)) + 12|0);
       $243 = HEAP32[$__ninp_$i$i851>>2]|0;
       $__einp_$i$i852 = ((($242)) + 16|0);
       $244 = HEAP32[$__einp_$i$i852>>2]|0;
       $cmp$i$i853 = ($243|0)==($244|0);
       if ($cmp$i$i853) {
        $vtable$i$i854 = HEAP32[$242>>2]|0;
        $vfn$i$i855 = ((($vtable$i$i854)) + 40|0);
        $245 = HEAP32[$vfn$i$i855>>2]|0;
        (FUNCTION_TABLE_ii[$245 & 511]($242)|0);
       } else {
        $incdec$ptr$i$i858 = ((($243)) + 4|0);
        HEAP32[$__ninp_$i$i851>>2] = $incdec$ptr$i$i858;
        $246 = HEAP32[$243>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($246)|0);
       }
       $221 = $302;
      }
     }
    } while(0);
    $247 = HEAP32[$__wn>>2]|0;
    $248 = HEAP32[$__wb>>2]|0;
    $cmp253 = ($247|0)==($248|0);
    if ($cmp253) {
     label = 237;
     break L21;
    } else {
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   default: {
    $__trailing_sign$1 = $__trailing_sign$0;
   }
   }
  } while(0);
  L286: do {
   if ((label|0) == 46) {
    label = 0;
    $35 = $284;
    while(1) {
     $30 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i158 = ($30|0)==(0|0);
     do {
      if ($tobool$i$i$i158) {
       $286 = 1;
      } else {
       $__ninp_$i$i$i$i159 = ((($30)) + 12|0);
       $31 = HEAP32[$__ninp_$i$i$i$i159>>2]|0;
       $__einp_$i$i$i$i160 = ((($30)) + 16|0);
       $32 = HEAP32[$__einp_$i$i$i$i160>>2]|0;
       $cmp$i$i$i$i161 = ($31|0)==($32|0);
       if ($cmp$i$i$i$i161) {
        $vtable$i$i$i$i163 = HEAP32[$30>>2]|0;
        $vfn$i$i$i$i164 = ((($vtable$i$i$i$i163)) + 36|0);
        $33 = HEAP32[$vfn$i$i$i$i164>>2]|0;
        $call$i$i$i$i165 = (FUNCTION_TABLE_ii[$33 & 511]($30)|0);
        $retval$0$i$i$i$i169 = $call$i$i$i$i165;
       } else {
        $34 = HEAP32[$31>>2]|0;
        $call3$i$i$i$i167 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($34)|0);
        $retval$0$i$i$i$i169 = $call3$i$i$i$i167;
       }
       $call3$i$i$i170 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i171 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i169,$call3$i$i$i170)|0);
       if ($call4$i$i$i171) {
        HEAP32[$__b>>2] = 0;
        $286 = 1;
        break;
       } else {
        $$pre$i$i$i173 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i174 = ($$pre$i$i$i173|0)==(0|0);
        $286 = $phitmp$i$i$i174;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i178 = ($35|0)==(0|0);
     do {
      if ($tobool$i2$i$i178) {
       label = 60;
      } else {
       $__ninp_$i$i3$i$i180 = ((($35)) + 12|0);
       $36 = HEAP32[$__ninp_$i$i3$i$i180>>2]|0;
       $__einp_$i$i4$i$i181 = ((($35)) + 16|0);
       $37 = HEAP32[$__einp_$i$i4$i$i181>>2]|0;
       $cmp$i$i5$i$i182 = ($36|0)==($37|0);
       if ($cmp$i$i5$i$i182) {
        $vtable$i$i7$i$i184 = HEAP32[$35>>2]|0;
        $vfn$i$i8$i$i185 = ((($vtable$i$i7$i$i184)) + 36|0);
        $38 = HEAP32[$vfn$i$i8$i$i185>>2]|0;
        $call$i$i9$i$i186 = (FUNCTION_TABLE_ii[$38 & 511]($35)|0);
        $retval$0$i$i13$i$i190 = $call$i$i9$i$i186;
       } else {
        $39 = HEAP32[$36>>2]|0;
        $call3$i$i11$i$i188 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
        $retval$0$i$i13$i$i190 = $call3$i$i11$i$i188;
       }
       $call3$i14$i$i191 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i192 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i190,$call3$i14$i$i191)|0);
       if ($call4$i15$i$i192) {
        HEAP32[$__e>>2] = 0;
        label = 60;
        break;
       } else {
        if ($286) {
         $287 = $35;
         break;
        } else {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L286;
        }
       }
      }
     } while(0);
     if ((label|0) == 60) {
      label = 0;
      if ($286) {
       $__trailing_sign$1 = $__trailing_sign$0;
       break L286;
      } else {
       $287 = 0;
      }
     }
     $40 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i200 = ((($40)) + 12|0);
     $41 = HEAP32[$__ninp_$i$i200>>2]|0;
     $__einp_$i$i201 = ((($40)) + 16|0);
     $42 = HEAP32[$__einp_$i$i201>>2]|0;
     $cmp$i$i202 = ($41|0)==($42|0);
     if ($cmp$i$i202) {
      $vtable$i$i203 = HEAP32[$40>>2]|0;
      $vfn$i$i204 = ((($vtable$i$i203)) + 36|0);
      $43 = HEAP32[$vfn$i$i204>>2]|0;
      $call$i$i205 = (FUNCTION_TABLE_ii[$43 & 511]($40)|0);
      $retval$0$i$i209 = $call$i$i205;
     } else {
      $44 = HEAP32[$41>>2]|0;
      $call3$i$i207 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
      $retval$0$i$i209 = $call3$i$i207;
     }
     $vtable$i211 = HEAP32[$__ct>>2]|0;
     $vfn$i212 = ((($vtable$i211)) + 12|0);
     $45 = HEAP32[$vfn$i212>>2]|0;
     $call$i213 = (FUNCTION_TABLE_iiii[$45 & 511]($__ct,8192,$retval$0$i$i209)|0);
     if (!($call$i213)) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L286;
     }
     $46 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i215 = ((($46)) + 12|0);
     $47 = HEAP32[$__ninp_$i$i215>>2]|0;
     $__einp_$i$i216 = ((($46)) + 16|0);
     $48 = HEAP32[$__einp_$i$i216>>2]|0;
     $cmp$i$i217 = ($47|0)==($48|0);
     if ($cmp$i$i217) {
      $vtable$i$i218 = HEAP32[$46>>2]|0;
      $vfn$i$i219 = ((($vtable$i$i218)) + 40|0);
      $49 = HEAP32[$vfn$i$i219>>2]|0;
      $call$i$i220 = (FUNCTION_TABLE_ii[$49 & 511]($46)|0);
      $retval$0$i$i225 = $call$i$i220;
     } else {
      $incdec$ptr$i$i222 = ((($47)) + 4|0);
      HEAP32[$__ninp_$i$i215>>2] = $incdec$ptr$i$i222;
      $50 = HEAP32[$47>>2]|0;
      $call3$i$i223 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($50)|0);
      $retval$0$i$i225 = $call3$i$i223;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$retval$0$i$i225);
     $35 = $287;
    }
   }
  } while(0);
  $inc261 = (($__p$0) + 1)|0;
  $__p$0 = $inc261;$__trailing_sign$0 = $__trailing_sign$1;
 }
 L322: do {
  if ((label|0) == 44) {
   $29 = HEAP32[$__err>>2]|0;
   $or = $29 | 4;
   HEAP32[$__err>>2] = $or;
   $retval$10 = 0;
  }
  else if ((label|0) == 103) {
   $104 = HEAP32[$__err>>2]|0;
   $or77 = $104 | 4;
   HEAP32[$__err>>2] = $or77;
   $retval$10 = 0;
  }
  else if ((label|0) == 146) {
   $157 = HEAP32[$__err>>2]|0;
   $or176 = $157 | 4;
   HEAP32[$__err>>2] = $or176;
   $retval$10 = 0;
  }
  else if ((label|0) == 201) {
   $209 = HEAP32[$__err>>2]|0;
   $or230 = $209 | 4;
   HEAP32[$__err>>2] = $or230;
   $retval$10 = 0;
  }
  else if ((label|0) == 226) {
   $232 = HEAP32[$__err>>2]|0;
   $or241 = $232 | 4;
   HEAP32[$__err>>2] = $or241;
   $retval$10 = 0;
  }
  else if ((label|0) == 237) {
   $249 = HEAP32[$__err>>2]|0;
   $or255 = $249 | 4;
   HEAP32[$__err>>2] = $or255;
   $retval$10 = 0;
  }
  else if ((label|0) == 239) {
   $tobool265 = ($__trailing_sign$0|0)==(0|0);
   L324: do {
    if (!($tobool265)) {
     $250 = ((($__trailing_sign$0)) + 8|0);
     $__size_$i$i863 = ((($250)) + 3|0);
     $__size_$i2$i865 = ((($__trailing_sign$0)) + 4|0);
     $__i$0 = 1;
     L326: while(1) {
      $251 = HEAP8[$__size_$i$i863>>0]|0;
      $tobool$i$i864 = ($251<<24>>24)<(0);
      if ($tobool$i$i864) {
       $252 = HEAP32[$__size_$i2$i865>>2]|0;
       $cond$i869 = $252;
      } else {
       $conv$i$i867 = $251&255;
       $cond$i869 = $conv$i$i867;
      }
      $cmp269 = ($__i$0>>>0)<($cond$i869>>>0);
      if (!($cmp269)) {
       break L324;
      }
      $253 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i489 = ($253|0)==(0|0);
      do {
       if ($tobool$i$i$i489) {
        $303 = 1;
       } else {
        $__ninp_$i$i$i$i490 = ((($253)) + 12|0);
        $254 = HEAP32[$__ninp_$i$i$i$i490>>2]|0;
        $__einp_$i$i$i$i491 = ((($253)) + 16|0);
        $255 = HEAP32[$__einp_$i$i$i$i491>>2]|0;
        $cmp$i$i$i$i492 = ($254|0)==($255|0);
        if ($cmp$i$i$i$i492) {
         $vtable$i$i$i$i494 = HEAP32[$253>>2]|0;
         $vfn$i$i$i$i495 = ((($vtable$i$i$i$i494)) + 36|0);
         $256 = HEAP32[$vfn$i$i$i$i495>>2]|0;
         $call$i$i$i$i496 = (FUNCTION_TABLE_ii[$256 & 511]($253)|0);
         $retval$0$i$i$i$i500 = $call$i$i$i$i496;
        } else {
         $257 = HEAP32[$254>>2]|0;
         $call3$i$i$i$i498 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($257)|0);
         $retval$0$i$i$i$i500 = $call3$i$i$i$i498;
        }
        $call3$i$i$i501 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i$i$i502 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i500,$call3$i$i$i501)|0);
        if ($call4$i$i$i502) {
         HEAP32[$__b>>2] = 0;
         $303 = 1;
         break;
        } else {
         $$pre$i$i$i504 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i505 = ($$pre$i$i$i504|0)==(0|0);
         $303 = $phitmp$i$i$i505;
         break;
        }
       }
      } while(0);
      $258 = HEAP32[$__e>>2]|0;
      $tobool$i2$i$i509 = ($258|0)==(0|0);
      do {
       if ($tobool$i2$i$i509) {
        label = 258;
       } else {
        $__ninp_$i$i3$i$i511 = ((($258)) + 12|0);
        $259 = HEAP32[$__ninp_$i$i3$i$i511>>2]|0;
        $__einp_$i$i4$i$i512 = ((($258)) + 16|0);
        $260 = HEAP32[$__einp_$i$i4$i$i512>>2]|0;
        $cmp$i$i5$i$i513 = ($259|0)==($260|0);
        if ($cmp$i$i5$i$i513) {
         $vtable$i$i7$i$i515 = HEAP32[$258>>2]|0;
         $vfn$i$i8$i$i516 = ((($vtable$i$i7$i$i515)) + 36|0);
         $261 = HEAP32[$vfn$i$i8$i$i516>>2]|0;
         $call$i$i9$i$i517 = (FUNCTION_TABLE_ii[$261 & 511]($258)|0);
         $retval$0$i$i13$i$i521 = $call$i$i9$i$i517;
        } else {
         $262 = HEAP32[$259>>2]|0;
         $call3$i$i11$i$i519 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($262)|0);
         $retval$0$i$i13$i$i521 = $call3$i$i11$i$i519;
        }
        $call3$i14$i$i522 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i523 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i521,$call3$i14$i$i522)|0);
        if ($call4$i15$i$i523) {
         HEAP32[$__e>>2] = 0;
         label = 258;
         break;
        } else {
         if ($303) {
          break;
         } else {
          break L326;
         }
        }
       }
      } while(0);
      if ((label|0) == 258) {
       label = 0;
       if ($303) {
        break;
       }
      }
      $263 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i462 = ((($263)) + 12|0);
      $264 = HEAP32[$__ninp_$i$i462>>2]|0;
      $__einp_$i$i463 = ((($263)) + 16|0);
      $265 = HEAP32[$__einp_$i$i463>>2]|0;
      $cmp$i$i464 = ($264|0)==($265|0);
      if ($cmp$i$i464) {
       $vtable$i$i465 = HEAP32[$263>>2]|0;
       $vfn$i$i466 = ((($vtable$i$i465)) + 36|0);
       $266 = HEAP32[$vfn$i$i466>>2]|0;
       $call$i$i467 = (FUNCTION_TABLE_ii[$266 & 511]($263)|0);
       $retval$0$i$i471 = $call$i$i467;
      } else {
       $267 = HEAP32[$264>>2]|0;
       $call3$i$i469 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($267)|0);
       $retval$0$i$i471 = $call3$i$i469;
      }
      $268 = HEAP8[$__size_$i$i863>>0]|0;
      $tobool$i$i$i$i = ($268<<24>>24)<(0);
      if ($tobool$i$i$i$i) {
       $269 = HEAP32[$__trailing_sign$0>>2]|0;
       $cond$i$i$i = $269;
      } else {
       $cond$i$i$i = $__trailing_sign$0;
      }
      $add$ptr$i460 = (($cond$i$i$i) + ($__i$0<<2)|0);
      $270 = HEAP32[$add$ptr$i460>>2]|0;
      $cmp276 = ($retval$0$i$i471|0)==($270|0);
      if (!($cmp276)) {
       break;
      }
      $inc281 = (($__i$0) + 1)|0;
      $272 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i = ((($272)) + 12|0);
      $273 = HEAP32[$__ninp_$i$i>>2]|0;
      $__einp_$i$i = ((($272)) + 16|0);
      $274 = HEAP32[$__einp_$i$i>>2]|0;
      $cmp$i$i = ($273|0)==($274|0);
      if ($cmp$i$i) {
       $vtable$i$i = HEAP32[$272>>2]|0;
       $vfn$i$i = ((($vtable$i$i)) + 40|0);
       $275 = HEAP32[$vfn$i$i>>2]|0;
       (FUNCTION_TABLE_ii[$275 & 511]($272)|0);
      } else {
       $incdec$ptr$i$i = ((($273)) + 4|0);
       HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
       $276 = HEAP32[$273>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($276)|0);
      }
      $__i$0 = $inc281;
     }
     $271 = HEAP32[$__err>>2]|0;
     $or278 = $271 | 4;
     HEAP32[$__err>>2] = $or278;
     $retval$10 = 0;
     break L322;
    }
   } while(0);
   $277 = HEAP32[$__gb>>2]|0;
   $278 = HEAP32[$__gn>>2]|0;
   $cmp288 = ($277|0)==($278|0);
   if ($cmp288) {
    $retval$10 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$277,$278,$__et);
    $279 = HEAP32[$__et>>2]|0;
    $tobool291 = ($279|0)==(0);
    if ($tobool291) {
     $retval$10 = 1;
     break;
    } else {
     $280 = HEAP32[$__err>>2]|0;
     $or293 = $280 | 4;
     HEAP32[$__err>>2] = $or293;
     $retval$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $281 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i = ($281|0)==(0|0);
 if (!($tobool$i$i)) {
  $__value_$i$i4$i$i = ((($__gb)) + 4|0);
  $282 = HEAP32[$__value_$i$i4$i$i>>2]|0;
  FUNCTION_TABLE_vi[$282 & 511]($281);
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $__size_$i2$i39 = 0;
 var $__size_$i2$i62 = 0, $__temp = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add20 = 0, $and$i$i = 0, $call8 = 0, $cmp = 0, $cmp18 = 0, $cond$i$i5874 = 0, $cond$i$i76 = 0, $cond$i31 = 0, $cond$i36 = 0, $cond$i43 = 0, $cond$i66 = 0, $cond$i68 = 0, $conv$i$i = 0, $conv$i$i27 = 0, $conv$i$i41 = 0;
 var $conv$i$i64 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub15 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i25 = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__temp = sp + 4|0;
 $ref$tmp = sp;
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i2$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $and$i$i = $3 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i31 = $phitmp$i;$cond$i68 = $2;
 } else {
  $conv$i$i = $1&255;
  $cond$i31 = 1;$cond$i68 = $conv$i$i;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $tobool = ($sub$ptr$sub$i$i|0)==(0);
 do {
  if (!($tobool)) {
   if ($tobool$i$i) {
    $4 = HEAP32[$this>>2]|0;
    $__size_$i2$i62 = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i2$i62>>2]|0;
    $cond$i$i5874 = $4;$cond$i66 = $5;
   } else {
    $conv$i$i64 = $1&255;
    $cond$i$i5874 = $this;$cond$i66 = $conv$i$i64;
   }
   $add$ptr = (($cond$i$i5874) + ($cond$i66<<2)|0);
   $call8 = (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__first,$cond$i$i5874,$add$ptr)|0);
   if ($call8) {
    ;HEAP32[$__temp>>2]=0|0;HEAP32[$__temp+4>>2]=0|0;HEAP32[$__temp+8>>2]=0|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp,$__first,$__last);
    $6 = ((($__temp)) + 8|0);
    $__size_$i$i$i = ((($6)) + 3|0);
    $7 = HEAP8[$__size_$i$i$i>>0]|0;
    $tobool$i$i$i = ($7<<24>>24)<(0);
    $8 = HEAP32[$__temp>>2]|0;
    $__size_$i2$i39 = ((($__temp)) + 4|0);
    $9 = HEAP32[$__size_$i2$i39>>2]|0;
    $conv$i$i41 = $7&255;
    $cond$i$i76 = $tobool$i$i$i ? $8 : $__temp;
    $cond$i43 = $tobool$i$i$i ? $9 : $conv$i$i41;
    (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this,$cond$i$i76,$cond$i43)|0);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__temp);
    break;
   }
   $sub = (($cond$i31) - ($cond$i68))|0;
   $cmp = ($sub>>>0)<($sub$ptr$div$i$i>>>0);
   if ($cmp) {
    $add = (($cond$i68) + ($sub$ptr$div$i$i))|0;
    $sub15 = (($add) - ($cond$i31))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this,$cond$i31,$sub15,$cond$i68,$cond$i68,0,0);
   }
   $10 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($10<<24>>24)<(0);
   if ($tobool$i$i33) {
    $11 = HEAP32[$this>>2]|0;
    $cond$i36 = $11;
   } else {
    $cond$i36 = $this;
   }
   $add$ptr17 = (($cond$i36) + ($cond$i68<<2)|0);
   $__first$addr$0 = $__first;$__p$0 = $add$ptr17;
   while(1) {
    $cmp18 = ($__first$addr$0|0)==($__last|0);
    if ($cmp18) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$__first$addr$0);
    $incdec$ptr = ((($__p$0)) + 4|0);
    $incdec$ptr19 = ((($__first$addr$0)) + 4|0);
    $__first$addr$0 = $incdec$ptr19;$__p$0 = $incdec$ptr;
   }
   HEAP32[$ref$tmp>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$ref$tmp);
   $add20 = (($cond$i68) + ($sub$ptr$div$i$i))|0;
   $12 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i25 = ($12<<24>>24)<(0);
   if ($tobool$i$i25) {
    $__size_$i2$i26 = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i26>>2] = $add20;
    break;
   } else {
    $conv$i$i27 = $add20&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i27;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__p,$__first,$__last) {
 $__p = $__p|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $cmp = 0, $cmp1 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__first>>>0)<=($__p>>>0);
 $cmp1 = ($__p>>>0)<($__last>>>0);
 $spec$select = $cmp & $cmp1;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0;
 var $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $cmp = ($sub$ptr$div$i$i>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp3 = ($sub$ptr$div$i$i>>>0)<(2);
 do {
  if ($cmp3) {
   $conv$i = $sub$ptr$div$i$i&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$1$ph = $this;
  } else {
   $add$i$i = (($sub$ptr$div$i$i) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    _abort();
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwm($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i15 = ((($this)) + 4|0);
    HEAP32[$__size_$i15>>2] = $sub$ptr$div$i$i;
    $__p$1$ph = $call$i$i$i;
    break;
   }
  }
 } while(0);
 $__first$addr$0 = $__first;$__p$1 = $__p$1$ph;
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 4|0);
  $incdec$ptr12 = ((($__p$1)) + 4|0);
  $__first$addr$0 = $incdec$ptr;$__p$1 = $incdec$ptr12;
 }
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $$pre$phi$i$i158Z2D = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i112 = 0, $__i$0$i$i$i132 = 0, $__i$0$i$i$i161 = 0, $__i$0$i$i$i181 = 0, $__i$0$i$i$i42 = 0, $__i$0$i$i$i67 = 0, $__i$0$i$i$i86 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i103 = 0, $__size_$i1$i$i$i123 = 0, $__size_$i1$i$i$i150 = 0, $__size_$i1$i$i$i172 = 0, $__size_$i1$i$i$i33 = 0, $__size_$i1$i$i$i59 = 0, $__size_$i1$i$i$i77 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i106 = 0;
 var $__size_$i2$i$i$i126 = 0, $__size_$i2$i$i$i153 = 0, $__size_$i2$i$i$i175 = 0, $__size_$i2$i$i$i36 = 0, $__size_$i2$i$i$i62 = 0, $__size_$i2$i$i$i80 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i115 = 0, $arrayidx$i$i$i135 = 0, $arrayidx$i$i$i164 = 0, $arrayidx$i$i$i184 = 0, $arrayidx$i$i$i45 = 0, $arrayidx$i$i$i70 = 0, $arrayidx$i$i$i89 = 0, $call$i = 0, $call$i141 = 0, $call$i144 = 0, $call$i190 = 0, $call$i51 = 0, $call$i54 = 0;
 var $call$i95 = 0, $call$i96 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i113 = 0, $exitcond$i$i$i133 = 0, $exitcond$i$i$i162 = 0, $exitcond$i$i$i182 = 0, $exitcond$i$i$i43 = 0, $exitcond$i$i$i68 = 0, $exitcond$i$i$i87 = 0, $inc$i$i$i = 0, $inc$i$i$i116 = 0, $inc$i$i$i136 = 0, $inc$i$i$i165 = 0, $inc$i$i$i185 = 0, $inc$i$i$i46 = 0, $inc$i$i$i71 = 0, $inc$i$i$i90 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0;
 var $ref$tmp$i$i$i101 = 0, $ref$tmp$i$i$i121 = 0, $ref$tmp$i$i$i147 = 0, $ref$tmp$i$i$i170 = 0, $ref$tmp$i$i$i31 = 0, $ref$tmp$i$i$i57 = 0, $ref$tmp$i$i$i75 = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i102 = 0, $ref$tmp4$i$i$i122 = 0, $ref$tmp4$i$i$i148 = 0, $ref$tmp4$i$i$i171 = 0, $ref$tmp4$i$i$i32 = 0;
 var $ref$tmp4$i$i$i58 = 0, $ref$tmp4$i$i$i76 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i104 = 0, $tobool$i$i$i$i124 = 0, $tobool$i$i$i$i151 = 0, $tobool$i$i$i$i173 = 0, $tobool$i$i$i$i34 = 0, $tobool$i$i$i$i60 = 0, $tobool$i$i$i$i78 = 0, $vfn$i = 0, $vfn$i100 = 0, $vfn$i120 = 0, $vfn$i140 = 0, $vfn$i143 = 0, $vfn$i146 = 0, $vfn$i169 = 0;
 var $vfn$i189 = 0, $vfn$i28 = 0, $vfn$i30 = 0, $vfn$i50 = 0, $vfn$i53 = 0, $vfn$i56 = 0, $vfn$i74 = 0, $vfn$i94 = 0, $vfn$i98 = 0, $vtable$i = 0, $vtable$i119 = 0, $vtable$i139 = 0, $vtable$i142 = 0, $vtable$i145 = 0, $vtable$i168 = 0, $vtable$i188 = 0, $vtable$i27 = 0, $vtable$i29 = 0, $vtable$i49 = 0, $vtable$i52 = 0;
 var $vtable$i55 = 0, $vtable$i73 = 0, $vtable$i93 = 0, $vtable$i97 = 0, $vtable$i99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $ref$tmp$i$i$i170 = sp + 148|0;
 $ref$tmp4$i$i$i171 = sp + 144|0;
 $ref$tmp$i$i$i147 = sp + 155|0;
 $ref$tmp4$i$i$i148 = sp + 154|0;
 $ref$tmp$i$i$i121 = sp + 140|0;
 $ref$tmp4$i$i$i122 = sp + 136|0;
 $ref$tmp$i$i$i101 = sp + 132|0;
 $ref$tmp4$i$i$i102 = sp + 128|0;
 $ref$tmp$i$i$i75 = sp + 124|0;
 $ref$tmp4$i$i$i76 = sp + 120|0;
 $ref$tmp$i$i$i57 = sp + 153|0;
 $ref$tmp4$i$i$i58 = sp + 152|0;
 $ref$tmp$i$i$i31 = sp + 116|0;
 $ref$tmp4$i$i$i32 = sp + 112|0;
 $ref$tmp$i$i$i = sp + 108|0;
 $ref$tmp4$i$i$i = sp + 104|0;
 $ref$tmp = sp + 100|0;
 $ref$tmp1 = sp + 88|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 64|0;
 $ref$tmp9 = sp + 52|0;
 $ref$tmp14 = sp + 48|0;
 $ref$tmp15 = sp + 36|0;
 $ref$tmp17 = sp + 24|0;
 $ref$tmp21 = sp + 12|0;
 $ref$tmp23 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21276)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i27 = HEAP32[$call$i>>2]|0;
  $vfn$i28 = ((($vtable$i27)) + 32|0);
  $2 = HEAP32[$vfn$i28>>2]|0;
  FUNCTION_TABLE_vii[$2 & 511]($ref$tmp1,$call$i);
  $3 = ((($__nsn)) + 8|0);
  $__size_$i1$i$i$i = ((($3)) + 3|0);
  $4 = HEAP8[$__size_$i1$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($4<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $5 = HEAP32[$__nsn>>2]|0;
   HEAP32[$ref$tmp$i$i$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($5,$ref$tmp$i$i$i);
   $__size_$i2$i$i$i = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn,$ref$tmp4$i$i$i);
   HEAP8[$__size_$i1$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__nsn,0);
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $arrayidx$i$i$i = (($ref$tmp1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$arrayidx$i$i$i>>2] = 0;
   $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $inc$i$i$i;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $vtable$i29 = HEAP32[$call$i>>2]|0;
  $vfn$i30 = ((($vtable$i29)) + 28|0);
  $6 = HEAP32[$vfn$i30>>2]|0;
  FUNCTION_TABLE_vii[$6 & 511]($ref$tmp3,$call$i);
  $7 = ((($__psn)) + 8|0);
  $__size_$i1$i$i$i33 = ((($7)) + 3|0);
  $8 = HEAP8[$__size_$i1$i$i$i33>>0]|0;
  $tobool$i$i$i$i34 = ($8<<24>>24)<(0);
  if ($tobool$i$i$i$i34) {
   $9 = HEAP32[$__psn>>2]|0;
   HEAP32[$ref$tmp$i$i$i31>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($9,$ref$tmp$i$i$i31);
   $__size_$i2$i$i$i36 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i36>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i32>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn,$ref$tmp4$i$i$i32);
   HEAP8[$__size_$i1$i$i$i33>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__psn,0);
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  $__i$0$i$i$i42 = 0;
  while(1) {
   $exitcond$i$i$i43 = ($__i$0$i$i$i42|0)==(3);
   if ($exitcond$i$i$i43) {
    break;
   }
   $arrayidx$i$i$i45 = (($ref$tmp3) + ($__i$0$i$i$i42<<2)|0);
   HEAP32[$arrayidx$i$i$i45>>2] = 0;
   $inc$i$i$i46 = (($__i$0$i$i$i42) + 1)|0;
   $__i$0$i$i$i42 = $inc$i$i$i46;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp3);
  $vtable$i49 = HEAP32[$call$i>>2]|0;
  $vfn$i50 = ((($vtable$i49)) + 12|0);
  $10 = HEAP32[$vfn$i50>>2]|0;
  $call$i51 = (FUNCTION_TABLE_ii[$10 & 511]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i51;
  $vtable$i52 = HEAP32[$call$i>>2]|0;
  $vfn$i53 = ((($vtable$i52)) + 16|0);
  $11 = HEAP32[$vfn$i53>>2]|0;
  $call$i54 = (FUNCTION_TABLE_ii[$11 & 511]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i54;
  $vtable$i55 = HEAP32[$call$i>>2]|0;
  $vfn$i56 = ((($vtable$i55)) + 20|0);
  $12 = HEAP32[$vfn$i56>>2]|0;
  FUNCTION_TABLE_vii[$12 & 511]($ref$tmp7,$call$i);
  $__size_$i1$i$i$i59 = ((($__grp)) + 11|0);
  $13 = HEAP8[$__size_$i1$i$i$i59>>0]|0;
  $tobool$i$i$i$i60 = ($13<<24>>24)<(0);
  if ($tobool$i$i$i$i60) {
   $14 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i57>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$ref$tmp$i$i$i57);
   $__size_$i2$i$i$i62 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i62>>2] = 0;
   $$pre$phi$i$iZ2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i58>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i58);
   HEAP8[$__size_$i1$i$i$i59>>0] = 0;
   $$pre$phi$i$iZ2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  $__i$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($__i$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $arrayidx$i$i$i70 = (($ref$tmp7) + ($__i$0$i$i$i67<<2)|0);
   HEAP32[$arrayidx$i$i$i70>>2] = 0;
   $inc$i$i$i71 = (($__i$0$i$i$i67) + 1)|0;
   $__i$0$i$i$i67 = $inc$i$i$i71;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
  $vtable$i73 = HEAP32[$call$i>>2]|0;
  $vfn$i74 = ((($vtable$i73)) + 24|0);
  $15 = HEAP32[$vfn$i74>>2]|0;
  FUNCTION_TABLE_vii[$15 & 511]($ref$tmp9,$call$i);
  $16 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i77 = ((($16)) + 3|0);
  $17 = HEAP8[$__size_$i1$i$i$i77>>0]|0;
  $tobool$i$i$i$i78 = ($17<<24>>24)<(0);
  if ($tobool$i$i$i$i78) {
   $18 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i75>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($18,$ref$tmp$i$i$i75);
   $__size_$i2$i$i$i80 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i80>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i76>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i76);
   HEAP8[$__size_$i1$i$i$i77>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sym,0);
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  $__i$0$i$i$i86 = 0;
  while(1) {
   $exitcond$i$i$i87 = ($__i$0$i$i$i86|0)==(3);
   if ($exitcond$i$i$i87) {
    break;
   }
   $arrayidx$i$i$i89 = (($ref$tmp9) + ($__i$0$i$i$i86<<2)|0);
   HEAP32[$arrayidx$i$i$i89>>2] = 0;
   $inc$i$i$i90 = (($__i$0$i$i$i86) + 1)|0;
   $__i$0$i$i$i86 = $inc$i$i$i90;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp9);
  $vtable$i93 = HEAP32[$call$i>>2]|0;
  $vfn$i94 = ((($vtable$i93)) + 36|0);
  $19 = HEAP32[$vfn$i94>>2]|0;
  $call$i95 = (FUNCTION_TABLE_ii[$19 & 511]($call$i)|0);
  $storemerge = $call$i95;
 } else {
  $call$i96 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21268)|0);
  $vtable$i97 = HEAP32[$call$i96>>2]|0;
  $vfn$i98 = ((($vtable$i97)) + 44|0);
  $20 = HEAP32[$vfn$i98>>2]|0;
  FUNCTION_TABLE_vii[$20 & 511]($ref$tmp14,$call$i96);
  $21 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$21&255;HEAP8[$__pat+1>>0]=($21>>8)&255;HEAP8[$__pat+2>>0]=($21>>16)&255;HEAP8[$__pat+3>>0]=$21>>24;
  $vtable$i99 = HEAP32[$call$i96>>2]|0;
  $vfn$i100 = ((($vtable$i99)) + 32|0);
  $22 = HEAP32[$vfn$i100>>2]|0;
  FUNCTION_TABLE_vii[$22 & 511]($ref$tmp15,$call$i96);
  $23 = ((($__nsn)) + 8|0);
  $__size_$i1$i$i$i103 = ((($23)) + 3|0);
  $24 = HEAP8[$__size_$i1$i$i$i103>>0]|0;
  $tobool$i$i$i$i104 = ($24<<24>>24)<(0);
  if ($tobool$i$i$i$i104) {
   $25 = HEAP32[$__nsn>>2]|0;
   HEAP32[$ref$tmp$i$i$i101>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($25,$ref$tmp$i$i$i101);
   $__size_$i2$i$i$i106 = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i106>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i102>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn,$ref$tmp4$i$i$i102);
   HEAP8[$__size_$i1$i$i$i103>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__nsn,0);
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp15>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  $__i$0$i$i$i112 = 0;
  while(1) {
   $exitcond$i$i$i113 = ($__i$0$i$i$i112|0)==(3);
   if ($exitcond$i$i$i113) {
    break;
   }
   $arrayidx$i$i$i115 = (($ref$tmp15) + ($__i$0$i$i$i112<<2)|0);
   HEAP32[$arrayidx$i$i$i115>>2] = 0;
   $inc$i$i$i116 = (($__i$0$i$i$i112) + 1)|0;
   $__i$0$i$i$i112 = $inc$i$i$i116;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp15);
  $vtable$i119 = HEAP32[$call$i96>>2]|0;
  $vfn$i120 = ((($vtable$i119)) + 28|0);
  $26 = HEAP32[$vfn$i120>>2]|0;
  FUNCTION_TABLE_vii[$26 & 511]($ref$tmp17,$call$i96);
  $27 = ((($__psn)) + 8|0);
  $__size_$i1$i$i$i123 = ((($27)) + 3|0);
  $28 = HEAP8[$__size_$i1$i$i$i123>>0]|0;
  $tobool$i$i$i$i124 = ($28<<24>>24)<(0);
  if ($tobool$i$i$i$i124) {
   $29 = HEAP32[$__psn>>2]|0;
   HEAP32[$ref$tmp$i$i$i121>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($29,$ref$tmp$i$i$i121);
   $__size_$i2$i$i$i126 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i126>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i122>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn,$ref$tmp4$i$i$i122);
   HEAP8[$__size_$i1$i$i$i123>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__psn,0);
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp17>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  $__i$0$i$i$i132 = 0;
  while(1) {
   $exitcond$i$i$i133 = ($__i$0$i$i$i132|0)==(3);
   if ($exitcond$i$i$i133) {
    break;
   }
   $arrayidx$i$i$i135 = (($ref$tmp17) + ($__i$0$i$i$i132<<2)|0);
   HEAP32[$arrayidx$i$i$i135>>2] = 0;
   $inc$i$i$i136 = (($__i$0$i$i$i132) + 1)|0;
   $__i$0$i$i$i132 = $inc$i$i$i136;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp17);
  $vtable$i139 = HEAP32[$call$i96>>2]|0;
  $vfn$i140 = ((($vtable$i139)) + 12|0);
  $30 = HEAP32[$vfn$i140>>2]|0;
  $call$i141 = (FUNCTION_TABLE_ii[$30 & 511]($call$i96)|0);
  HEAP32[$__dp>>2] = $call$i141;
  $vtable$i142 = HEAP32[$call$i96>>2]|0;
  $vfn$i143 = ((($vtable$i142)) + 16|0);
  $31 = HEAP32[$vfn$i143>>2]|0;
  $call$i144 = (FUNCTION_TABLE_ii[$31 & 511]($call$i96)|0);
  HEAP32[$__ts>>2] = $call$i144;
  $vtable$i145 = HEAP32[$call$i96>>2]|0;
  $vfn$i146 = ((($vtable$i145)) + 20|0);
  $32 = HEAP32[$vfn$i146>>2]|0;
  FUNCTION_TABLE_vii[$32 & 511]($ref$tmp21,$call$i96);
  $__size_$i1$i$i$i150 = ((($__grp)) + 11|0);
  $33 = HEAP8[$__size_$i1$i$i$i150>>0]|0;
  $tobool$i$i$i$i151 = ($33<<24>>24)<(0);
  if ($tobool$i$i$i$i151) {
   $34 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i147>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($34,$ref$tmp$i$i$i147);
   $__size_$i2$i$i$i153 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i153>>2] = 0;
   $$pre$phi$i$i158Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i148>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i148);
   HEAP8[$__size_$i1$i$i$i150>>0] = 0;
   $$pre$phi$i$i158Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i158Z2D>>2]=HEAP32[$ref$tmp21>>2]|0;HEAP32[$$pre$phi$i$i158Z2D+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$$pre$phi$i$i158Z2D+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  $__i$0$i$i$i161 = 0;
  while(1) {
   $exitcond$i$i$i162 = ($__i$0$i$i$i161|0)==(3);
   if ($exitcond$i$i$i162) {
    break;
   }
   $arrayidx$i$i$i164 = (($ref$tmp21) + ($__i$0$i$i$i161<<2)|0);
   HEAP32[$arrayidx$i$i$i164>>2] = 0;
   $inc$i$i$i165 = (($__i$0$i$i$i161) + 1)|0;
   $__i$0$i$i$i161 = $inc$i$i$i165;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp21);
  $vtable$i168 = HEAP32[$call$i96>>2]|0;
  $vfn$i169 = ((($vtable$i168)) + 24|0);
  $35 = HEAP32[$vfn$i169>>2]|0;
  FUNCTION_TABLE_vii[$35 & 511]($ref$tmp23,$call$i96);
  $36 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i172 = ((($36)) + 3|0);
  $37 = HEAP8[$__size_$i1$i$i$i172>>0]|0;
  $tobool$i$i$i$i173 = ($37<<24>>24)<(0);
  if ($tobool$i$i$i$i173) {
   $38 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i170>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($38,$ref$tmp$i$i$i170);
   $__size_$i2$i$i$i175 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i175>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i171>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i171);
   HEAP8[$__size_$i1$i$i$i172>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sym,0);
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp23>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  $__i$0$i$i$i181 = 0;
  while(1) {
   $exitcond$i$i$i182 = ($__i$0$i$i$i181|0)==(3);
   if ($exitcond$i$i$i182) {
    break;
   }
   $arrayidx$i$i$i184 = (($ref$tmp23) + ($__i$0$i$i$i181<<2)|0);
   HEAP32[$arrayidx$i$i$i184>>2] = 0;
   $inc$i$i$i185 = (($__i$0$i$i$i181) + 1)|0;
   $__i$0$i$i$i181 = $inc$i$i$i185;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp23);
  $vtable$i188 = HEAP32[$call$i96>>2]|0;
  $vfn$i189 = ((($vtable$i188)) + 36|0);
  $39 = HEAP32[$vfn$i189>>2]|0;
  $call$i190 = (FUNCTION_TABLE_ii[$39 & 511]($call$i96)|0);
  $storemerge = $call$i190;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__value_$i$i$i = 0, $add$ptr = 0, $add$ptr30 = 0, $call17 = 0, $cmp = 0, $cmp18 = 0, $cmp3 = 0, $cmp6 = 0;
 var $div27 = 0, $mul4 = 0, $spec$select = 0, $spec$select35 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(335|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($1) - ($sub$ptr$rhs$cast))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $cmp6 = ($mul4|0)==(0);
 $spec$select = $cmp6 ? 4 : $mul4;
 $3 = $cmp3 ? $spec$select : -1;
 $4 = HEAP32[$__n>>2]|0;
 $sub$ptr$sub10 = (($4) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div11 = $sub$ptr$sub10 >> 2;
 $spec$select35 = $cmp ? $2 : 0;
 $call17 = (_realloc($spec$select35,$3)|0);
 $cmp18 = ($call17|0)==(0|0);
 if ($cmp18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($cmp) {
  $5 = $call17;
  HEAP32[$__b>>2] = $5;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  $6 = $call17;
  HEAP32[$__b>>2] = $6;
  $tobool$i$i24 = ($$pr|0)==(0|0);
  if ($tobool$i$i24) {
   $8 = $call17;
  } else {
   $7 = HEAP32[$__value_$i$i$i>>2]|0;
   FUNCTION_TABLE_vi[$7 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $8 = $$pre;
  }
 }
 HEAP32[$__value_$i$i$i>>2] = (336);
 $div27 = $3 >>> 2;
 $add$ptr = (($8) + ($sub$ptr$div11<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $9 = HEAP32[$__b>>2]|0;
 $add$ptr30 = (($9) + ($div27<<2)|0);
 HEAP32[$__e>>2] = $add$ptr30;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i37 = 0;
 var $__i$0$i$i45 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i59 = 0, $__size_$i$i74 = 0, $__size_$i$i83 = 0, $__size_$i3$i = 0, $__size_$i3$i61 = 0, $__size_$i3$i76 = 0, $__size_$i3$i85 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0;
 var $add$ptr = 0, $add$ptr44 = 0, $add26 = 0, $add31 = 0, $add31$sink = 0, $add32 = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i40 = 0, $arrayidx$i$i48 = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cmp = 0;
 var $cmp$i$i = 0, $cmp16 = 0, $cmp17 = 0, $cmp22 = 0, $cmp34 = 0, $cmp39 = 0, $cmp6 = 0, $cond$i = 0, $cond$i65 = 0, $cond$i80 = 0, $cond$i80$sink = 0, $cond$i89 = 0, $cond$i89$sink = 0, $conv$i$i = 0, $conv$i$i63 = 0, $conv$i$i78 = 0, $conv$i$i87 = 0, $exitcond$i$i = 0, $exitcond$i$i38 = 0, $exitcond$i$i46 = 0;
 var $inc$i$i = 0, $inc$i$i41 = 0, $inc$i$i49 = 0, $mul23 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i24 = 0, $tobool$i$i53 = 0, $tobool$i$i57 = 0, $tobool$i$i60 = 0, $tobool$i$i75 = 0, $tobool$i$i84 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $agg$tmp$byval_copy = sp + 404|0;
 $vararg_buffer1 = sp + 336|0;
 $vararg_buffer = sp + 328|0;
 $__buf = sp + 224|0;
 $__bb = sp + 400|0;
 $__digits = sp + 112|0;
 $__loc = sp + 396|0;
 $__pat = sp + 412|0;
 $__dp = sp + 409|0;
 $__ts = sp + 408|0;
 $__grp = sp + 384|0;
 $__sym = sp + 372|0;
 $__sn = sp + 360|0;
 $__fd = sp + 356|0;
 $__mbuf = sp;
 $__mi = sp + 352|0;
 $__me = sp + 348|0;
 $agg$tmp = sp + 344|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $call = (_snprintf($__buf,100,14240,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 if ($cmp) {
  $call4 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $__units;
  $call5 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb,$call4,14240,$vararg_buffer1)|0);
  $0 = HEAP32[$__bb>>2]|0;
  $cmp6 = ($0|0)==(0|0);
  if ($cmp6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $1 = $0;
  $call8 = (_malloc($call5)|0);
  $2 = $call8;
  $cmp$i$i = ($call8|0)==(0|0);
  if ($cmp$i$i) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__db$0 = $call8;$__hd$sroa$0$0 = $2;$__hn$sroa$0$0 = $1;$__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;$__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;$__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 $3 = HEAP32[$__bb>>2]|0;
 $add$ptr = (($3) + ($__n$0)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 32|0);
 $4 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$4 & 511]($call$i,$3,$add$ptr,$__db$0)|0);
 $cmp16 = ($__n$0|0)==(0);
 if ($cmp16) {
  $7 = 0;
 } else {
  $5 = HEAP32[$__bb>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $cmp17 = ($6<<24>>24)==(45);
  $7 = $cmp17;
 }
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i37 = 0;
 while(1) {
  $exitcond$i$i38 = ($__i$0$i$i37|0)==(3);
  if ($exitcond$i$i38) {
   break;
  }
  $arrayidx$i$i40 = (($__sym) + ($__i$0$i$i37<<2)|0);
  HEAP32[$arrayidx$i$i40>>2] = 0;
  $inc$i$i41 = (($__i$0$i$i37) + 1)|0;
  $__i$0$i$i37 = $inc$i$i41;
 }
 ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 $__i$0$i$i45 = 0;
 while(1) {
  $exitcond$i$i46 = ($__i$0$i$i45|0)==(3);
  if ($exitcond$i$i46) {
   break;
  }
  $arrayidx$i$i48 = (($__sn) + ($__i$0$i$i45<<2)|0);
  HEAP32[$arrayidx$i$i48>>2] = 0;
  $inc$i$i49 = (($__i$0$i$i45) + 1)|0;
  $__i$0$i$i45 = $inc$i$i49;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$7,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $8 = HEAP32[$__fd>>2]|0;
 $cmp22 = ($__n$0|0)>($8|0);
 if ($cmp22) {
  $sub = (($__n$0) - ($8))|0;
  $mul23 = $sub << 1;
  $__size_$i$i = ((($__sn)) + 11|0);
  $9 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i57 = ($9<<24>>24)<(0);
  $__size_$i3$i = ((($__sn)) + 4|0);
  $10 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $9&255;
  $cond$i = $tobool$i$i57 ? $10 : $conv$i$i;
  $__size_$i$i59 = ((($__sym)) + 11|0);
  $11 = HEAP8[$__size_$i$i59>>0]|0;
  $tobool$i$i60 = ($11<<24>>24)<(0);
  $__size_$i3$i61 = ((($__sym)) + 4|0);
  $12 = HEAP32[$__size_$i3$i61>>2]|0;
  $conv$i$i63 = $11&255;
  $cond$i65 = $tobool$i$i60 ? $12 : $conv$i$i63;
  $add = (($8) + 1)|0;
  $add26 = (($add) + ($mul23))|0;
  $add31$sink = $add26;$cond$i80$sink = $cond$i;$cond$i89$sink = $cond$i65;
 } else {
  $__size_$i$i74 = ((($__sn)) + 11|0);
  $13 = HEAP8[$__size_$i$i74>>0]|0;
  $tobool$i$i75 = ($13<<24>>24)<(0);
  $__size_$i3$i76 = ((($__sn)) + 4|0);
  $14 = HEAP32[$__size_$i3$i76>>2]|0;
  $conv$i$i78 = $13&255;
  $cond$i80 = $tobool$i$i75 ? $14 : $conv$i$i78;
  $__size_$i$i83 = ((($__sym)) + 11|0);
  $15 = HEAP8[$__size_$i$i83>>0]|0;
  $tobool$i$i84 = ($15<<24>>24)<(0);
  $__size_$i3$i85 = ((($__sym)) + 4|0);
  $16 = HEAP32[$__size_$i3$i85>>2]|0;
  $conv$i$i87 = $15&255;
  $cond$i89 = $tobool$i$i84 ? $16 : $conv$i$i87;
  $add31 = (($8) + 2)|0;
  $add31$sink = $add31;$cond$i80$sink = $cond$i80;$cond$i89$sink = $cond$i89;
 }
 $add32 = (($add31$sink) + ($cond$i80$sink))|0;
 $add33 = (($add32) + ($cond$i89$sink))|0;
 $cmp34 = ($add33>>>0)>(100);
 if ($cmp34) {
  $call37 = (_malloc($add33)|0);
  $17 = $call37;
  $cmp39 = ($call37|0)==(0|0);
  if ($cmp39) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__hw$sroa$0$0 = $17;$__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;$__mb$0 = $__mbuf;
 }
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $18 = HEAP32[$__fmtflags_$i>>2]|0;
 $add$ptr44 = (($__db$0) + ($__n$0)|0);
 $19 = HEAP8[$__dp>>0]|0;
 $20 = HEAP8[$__ts>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$18,$__db$0,$add$ptr44,$call$i,$7,$__pat,$19,$20,$__grp,$__sym,$__sn,$8);
 $21 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $21;
 $22 = HEAP32[$__mi>>2]|0;
 $23 = HEAP32[$__me>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call46 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__mb$0,$22,$23,$__iob,$__fl)|0);
 $tobool$i$i53 = ($__hw$sroa$0$0|0)==(0);
 if (!($tobool$i$i53)) {
  $24 = $__hw$sroa$0$0;
  _free($24);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 $tobool$i$i24 = ($__hd$sroa$0$0|0)==(0);
 if (!($tobool$i$i24)) {
  $25 = $__hd$sroa$0$0;
  _free($25);
 }
 $tobool$i$i = ($__hn$sroa$0$0|0)==(0);
 if (!($tobool$i$i)) {
  $26 = $__hn$sroa$0$0;
  _free($26);
 }
 STACKTOP = sp;return ($call46|0);
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i27 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0;
 var $__size_$i$i = 0, $__size_$i$i100 = 0, $__size_$i$i73 = 0, $__size_$i$i82 = 0, $__size_$i$i91 = 0, $__size_$i3$i = 0, $__size_$i3$i102 = 0, $__size_$i3$i75 = 0, $__size_$i3$i84 = 0, $__size_$i3$i93 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add14 = 0, $add19 = 0, $add19$sink = 0, $add20 = 0, $add21 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i22 = 0, $arrayidx$i$i30 = 0, $call$i = 0, $call$i17 = 0, $call24 = 0, $call34 = 0, $cmp = 0, $cmp10 = 0, $cmp22 = 0, $cmp26 = 0, $cmp6 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i118 = 0, $cond$i106 = 0, $cond$i42 = 0, $cond$i79 = 0;
 var $cond$i88 = 0, $cond$i88$sink = 0, $cond$i97 = 0, $cond$i97$sink = 0, $conv$i$i = 0, $conv$i$i104 = 0, $conv$i$i40 = 0, $conv$i$i77 = 0, $conv$i$i86 = 0, $conv$i$i95 = 0, $exitcond$i$i = 0, $exitcond$i$i20 = 0, $exitcond$i$i28 = 0, $inc$i$i = 0, $inc$i$i23 = 0, $inc$i$i31 = 0, $mul = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i101 = 0;
 var $tobool$i$i34 = 0, $tobool$i$i37 = 0, $tobool$i$i74 = 0, $tobool$i$i83 = 0, $tobool$i$i92 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 156|0;
 $__loc = sp + 152|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 140|0;
 $__sym = sp + 128|0;
 $__sn = sp + 116|0;
 $__fd = sp + 112|0;
 $__mbuf = sp;
 $__mi = sp + 108|0;
 $__me = sp + 104|0;
 $agg$tmp = sp + 100|0;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21028)|0);
 $__size_$i$i = ((($__digits)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__digits)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $cmp = ($cond$i|0)==(0);
 if ($cmp) {
  $5 = 0;
 } else {
  $2 = HEAP32[$__digits>>2]|0;
  $cond$i$i$i = $tobool$i$i ? $2 : $__digits;
  $3 = HEAP8[$cond$i$i$i>>0]|0;
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 28|0);
  $4 = HEAP32[$vfn$i>>2]|0;
  $call$i17 = (FUNCTION_TABLE_iii[$4 & 511]($call$i,45)|0);
  $cmp6 = ($3<<24>>24)==($call$i17<<24>>24);
  $5 = $cmp6;
 }
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($__i$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $arrayidx$i$i22 = (($__sym) + ($__i$0$i$i19<<2)|0);
  HEAP32[$arrayidx$i$i22>>2] = 0;
  $inc$i$i23 = (($__i$0$i$i19) + 1)|0;
  $__i$0$i$i19 = $inc$i$i23;
 }
 ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 $__i$0$i$i27 = 0;
 while(1) {
  $exitcond$i$i28 = ($__i$0$i$i27|0)==(3);
  if ($exitcond$i$i28) {
   break;
  }
  $arrayidx$i$i30 = (($__sn) + ($__i$0$i$i27<<2)|0);
  HEAP32[$arrayidx$i$i30>>2] = 0;
  $inc$i$i31 = (($__i$0$i$i27) + 1)|0;
  $__i$0$i$i27 = $inc$i$i31;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$5,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $6 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i37 = ($6<<24>>24)<(0);
 $7 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i40 = $6&255;
 $cond$i42 = $tobool$i$i37 ? $7 : $conv$i$i40;
 $8 = HEAP32[$__fd>>2]|0;
 $cmp10 = ($cond$i42|0)>($8|0);
 if ($cmp10) {
  $sub = (($cond$i42) - ($8))|0;
  $mul = $sub << 1;
  $__size_$i$i73 = ((($__sn)) + 11|0);
  $9 = HEAP8[$__size_$i$i73>>0]|0;
  $tobool$i$i74 = ($9<<24>>24)<(0);
  $__size_$i3$i75 = ((($__sn)) + 4|0);
  $10 = HEAP32[$__size_$i3$i75>>2]|0;
  $conv$i$i77 = $9&255;
  $cond$i79 = $tobool$i$i74 ? $10 : $conv$i$i77;
  $__size_$i$i100 = ((($__sym)) + 11|0);
  $11 = HEAP8[$__size_$i$i100>>0]|0;
  $tobool$i$i101 = ($11<<24>>24)<(0);
  $__size_$i3$i102 = ((($__sym)) + 4|0);
  $12 = HEAP32[$__size_$i3$i102>>2]|0;
  $conv$i$i104 = $11&255;
  $cond$i106 = $tobool$i$i101 ? $12 : $conv$i$i104;
  $add = (($8) + 1)|0;
  $add14 = (($add) + ($mul))|0;
  $add19$sink = $add14;$cond$i88$sink = $cond$i106;$cond$i97$sink = $cond$i79;
 } else {
  $__size_$i$i91 = ((($__sn)) + 11|0);
  $13 = HEAP8[$__size_$i$i91>>0]|0;
  $tobool$i$i92 = ($13<<24>>24)<(0);
  $__size_$i3$i93 = ((($__sn)) + 4|0);
  $14 = HEAP32[$__size_$i3$i93>>2]|0;
  $conv$i$i95 = $13&255;
  $cond$i97 = $tobool$i$i92 ? $14 : $conv$i$i95;
  $__size_$i$i82 = ((($__sym)) + 11|0);
  $15 = HEAP8[$__size_$i$i82>>0]|0;
  $tobool$i$i83 = ($15<<24>>24)<(0);
  $__size_$i3$i84 = ((($__sym)) + 4|0);
  $16 = HEAP32[$__size_$i3$i84>>2]|0;
  $conv$i$i86 = $15&255;
  $cond$i88 = $tobool$i$i83 ? $16 : $conv$i$i86;
  $add19 = (($8) + 2)|0;
  $add19$sink = $add19;$cond$i88$sink = $cond$i88;$cond$i97$sink = $cond$i97;
 }
 $add20 = (($add19$sink) + ($cond$i97$sink))|0;
 $add21 = (($add20) + ($cond$i88$sink))|0;
 $cmp22 = ($add21>>>0)>(100);
 if ($cmp22) {
  $call24 = (_malloc($add21)|0);
  $17 = $call24;
  $cmp26 = ($call24|0)==(0|0);
  if ($cmp26) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__h$sroa$0$0 = $17;$__mb$0 = $call24;
  }
 } else {
  $__h$sroa$0$0 = 0;$__mb$0 = $__mbuf;
 }
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $18 = HEAP32[$__fmtflags_$i>>2]|0;
 $19 = HEAP32[$__digits>>2]|0;
 $cond$i$i118 = $tobool$i$i37 ? $19 : $__digits;
 $add$ptr = (($cond$i$i118) + ($cond$i42)|0);
 $20 = HEAP8[$__dp>>0]|0;
 $21 = HEAP8[$__ts>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$18,$cond$i$i118,$add$ptr,$call$i,$5,$__pat,$20,$21,$__grp,$__sym,$__sn,$8);
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $22;
 $23 = HEAP32[$__mi>>2]|0;
 $24 = HEAP32[$__me>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call34 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__mb$0,$23,$24,$__iob,$__fl)|0);
 $tobool$i$i34 = ($__h$sroa$0$0|0)==(0);
 if (!($tobool$i$i34)) {
  $25 = $__h$sroa$0$0;
  _free($25);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return ($call34|0);
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi$i$i104Z2D = 0, $$pre$phi$i$i133Z2D = 0, $$pre$phi$i$i158Z2D = 0, $$pre$phi$i$i187Z2D = 0, $$pre$phi$i$i210Z2D = 0, $$pre$phi$i$i52Z2D = 0, $$pre$phi$i$i81Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi223Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i107 = 0, $__i$0$i$i$i136 = 0, $__i$0$i$i$i161 = 0, $__i$0$i$i$i190 = 0, $__i$0$i$i$i213 = 0, $__i$0$i$i$i55 = 0, $__i$0$i$i$i84 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i125 = 0, $__size_$i1$i$i$i150 = 0, $__size_$i1$i$i$i179 = 0;
 var $__size_$i1$i$i$i202 = 0, $__size_$i1$i$i$i44 = 0, $__size_$i1$i$i$i73 = 0, $__size_$i1$i$i$i96 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i128 = 0, $__size_$i2$i$i$i153 = 0, $__size_$i2$i$i$i182 = 0, $__size_$i2$i$i$i205 = 0, $__size_$i2$i$i$i47 = 0, $__size_$i2$i$i$i76 = 0, $__size_$i2$i$i$i99 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i110 = 0, $arrayidx$i$i$i139 = 0, $arrayidx$i$i$i164 = 0, $arrayidx$i$i$i193 = 0, $arrayidx$i$i$i216 = 0, $arrayidx$i$i$i58 = 0, $arrayidx$i$i$i87 = 0;
 var $call$i = 0, $call$i116 = 0, $call$i117 = 0, $call$i170 = 0, $call$i173 = 0, $call$i222 = 0, $call$i64 = 0, $call$i67 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i108 = 0, $exitcond$i$i$i137 = 0, $exitcond$i$i$i162 = 0, $exitcond$i$i$i191 = 0, $exitcond$i$i$i214 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i85 = 0, $inc$i$i$i = 0, $inc$i$i$i111 = 0, $inc$i$i$i140 = 0, $inc$i$i$i165 = 0;
 var $inc$i$i$i194 = 0, $inc$i$i$i217 = 0, $inc$i$i$i59 = 0, $inc$i$i$i88 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i122 = 0, $ref$tmp$i$i$i147 = 0, $ref$tmp$i$i$i176 = 0, $ref$tmp$i$i$i199 = 0, $ref$tmp$i$i$i41 = 0, $ref$tmp$i$i$i70 = 0, $ref$tmp$i$i$i93 = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0;
 var $ref$tmp33 = 0, $ref$tmp4 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i123 = 0, $ref$tmp4$i$i$i148 = 0, $ref$tmp4$i$i$i177 = 0, $ref$tmp4$i$i$i200 = 0, $ref$tmp4$i$i$i42 = 0, $ref$tmp4$i$i$i71 = 0, $ref$tmp4$i$i$i94 = 0, $ref$tmp6 = 0, $ref$tmp7 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i126 = 0, $tobool$i$i$i$i151 = 0, $tobool$i$i$i$i180 = 0, $tobool$i$i$i$i203 = 0, $tobool$i$i$i$i45 = 0, $tobool$i$i$i$i74 = 0;
 var $tobool$i$i$i$i97 = 0, $vfn$i = 0, $vfn$i115 = 0, $vfn$i119 = 0, $vfn$i121 = 0, $vfn$i144 = 0, $vfn$i146 = 0, $vfn$i169 = 0, $vfn$i172 = 0, $vfn$i175 = 0, $vfn$i198 = 0, $vfn$i221 = 0, $vfn$i36 = 0, $vfn$i38 = 0, $vfn$i40 = 0, $vfn$i63 = 0, $vfn$i66 = 0, $vfn$i69 = 0, $vfn$i92 = 0, $vtable$i = 0;
 var $vtable$i114 = 0, $vtable$i118 = 0, $vtable$i120 = 0, $vtable$i143 = 0, $vtable$i145 = 0, $vtable$i168 = 0, $vtable$i171 = 0, $vtable$i174 = 0, $vtable$i197 = 0, $vtable$i220 = 0, $vtable$i35 = 0, $vtable$i37 = 0, $vtable$i39 = 0, $vtable$i62 = 0, $vtable$i65 = 0, $vtable$i68 = 0, $vtable$i91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $ref$tmp$i$i$i199 = sp + 127|0;
 $ref$tmp4$i$i$i200 = sp + 126|0;
 $ref$tmp$i$i$i176 = sp + 125|0;
 $ref$tmp4$i$i$i177 = sp + 124|0;
 $ref$tmp$i$i$i147 = sp + 123|0;
 $ref$tmp4$i$i$i148 = sp + 122|0;
 $ref$tmp$i$i$i122 = sp + 121|0;
 $ref$tmp4$i$i$i123 = sp + 120|0;
 $ref$tmp$i$i$i93 = sp + 119|0;
 $ref$tmp4$i$i$i94 = sp + 118|0;
 $ref$tmp$i$i$i70 = sp + 117|0;
 $ref$tmp4$i$i$i71 = sp + 116|0;
 $ref$tmp$i$i$i41 = sp + 115|0;
 $ref$tmp4$i$i$i42 = sp + 114|0;
 $ref$tmp$i$i$i = sp + 113|0;
 $ref$tmp4$i$i$i = sp + 112|0;
 $ref$tmp = sp + 108|0;
 $ref$tmp4 = sp + 96|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 80|0;
 $ref$tmp11 = sp + 68|0;
 $ref$tmp13 = sp + 56|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp22 = sp + 40|0;
 $ref$tmp25 = sp + 36|0;
 $ref$tmp26 = sp + 24|0;
 $ref$tmp31 = sp + 12|0;
 $ref$tmp33 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21260)|0);
  if ($__neg) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 44|0);
   $0 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
   $1 = HEAP32[$ref$tmp>>2]|0;
   HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
   $vtable$i35 = HEAP32[$call$i>>2]|0;
   $vfn$i36 = ((($vtable$i35)) + 32|0);
   $2 = HEAP32[$vfn$i36>>2]|0;
   FUNCTION_TABLE_vii[$2 & 511]($ref$tmp4,$call$i);
   $__size_$i1$i$i$i = ((($__sn)) + 11|0);
   $3 = HEAP8[$__size_$i1$i$i$i>>0]|0;
   $tobool$i$i$i$i = ($3<<24>>24)<(0);
   if ($tobool$i$i$i$i) {
    $4 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($4,$ref$tmp$i$i$i);
    $__size_$i2$i$i$i = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i>>2] = 0;
    $$pre$phi$i$iZ2D = $__sn;
   } else {
    HEAP8[$ref$tmp4$i$i$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i);
    HEAP8[$__size_$i1$i$i$i>>0] = 0;
    $$pre$phi$i$iZ2D = $__sn;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sn,0);
   ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$ref$tmp4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $arrayidx$i$i$i = (($ref$tmp4) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$arrayidx$i$i$i>>2] = 0;
    $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $inc$i$i$i;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  } else {
   $vtable$i37 = HEAP32[$call$i>>2]|0;
   $vfn$i38 = ((($vtable$i37)) + 40|0);
   $5 = HEAP32[$vfn$i38>>2]|0;
   FUNCTION_TABLE_vii[$5 & 511]($ref$tmp6,$call$i);
   $6 = HEAP32[$ref$tmp6>>2]|0;
   HEAP8[$__pat>>0]=$6&255;HEAP8[$__pat+1>>0]=($6>>8)&255;HEAP8[$__pat+2>>0]=($6>>16)&255;HEAP8[$__pat+3>>0]=$6>>24;
   $vtable$i39 = HEAP32[$call$i>>2]|0;
   $vfn$i40 = ((($vtable$i39)) + 28|0);
   $7 = HEAP32[$vfn$i40>>2]|0;
   FUNCTION_TABLE_vii[$7 & 511]($ref$tmp7,$call$i);
   $__size_$i1$i$i$i44 = ((($__sn)) + 11|0);
   $8 = HEAP8[$__size_$i1$i$i$i44>>0]|0;
   $tobool$i$i$i$i45 = ($8<<24>>24)<(0);
   if ($tobool$i$i$i$i45) {
    $9 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i41>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($9,$ref$tmp$i$i$i41);
    $__size_$i2$i$i$i47 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i47>>2] = 0;
    $$pre$phi$i$i52Z2D = $__sn;
   } else {
    HEAP8[$ref$tmp4$i$i$i42>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i42);
    HEAP8[$__size_$i1$i$i$i44>>0] = 0;
    $$pre$phi$i$i52Z2D = $__sn;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sn,0);
   ;HEAP32[$$pre$phi$i$i52Z2D>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$$pre$phi$i$i52Z2D+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$$pre$phi$i$i52Z2D+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
   $__i$0$i$i$i55 = 0;
   while(1) {
    $exitcond$i$i$i56 = ($__i$0$i$i$i55|0)==(3);
    if ($exitcond$i$i$i56) {
     break;
    }
    $arrayidx$i$i$i58 = (($ref$tmp7) + ($__i$0$i$i$i55<<2)|0);
    HEAP32[$arrayidx$i$i$i58>>2] = 0;
    $inc$i$i$i59 = (($__i$0$i$i$i55) + 1)|0;
    $__i$0$i$i$i55 = $inc$i$i$i59;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
   $$pre$phiZ2D = $call$i;
  }
  $vtable$i62 = HEAP32[$call$i>>2]|0;
  $vfn$i63 = ((($vtable$i62)) + 12|0);
  $10 = HEAP32[$vfn$i63>>2]|0;
  $call$i64 = (FUNCTION_TABLE_ii[$10 & 511]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i64;
  $vtable$i65 = HEAP32[$call$i>>2]|0;
  $vfn$i66 = ((($vtable$i65)) + 16|0);
  $11 = HEAP32[$vfn$i66>>2]|0;
  $call$i67 = (FUNCTION_TABLE_ii[$11 & 511]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i67;
  $vtable$i68 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i69 = ((($vtable$i68)) + 20|0);
  $12 = HEAP32[$vfn$i69>>2]|0;
  FUNCTION_TABLE_vii[$12 & 511]($ref$tmp11,$call$i);
  $__size_$i1$i$i$i73 = ((($__grp)) + 11|0);
  $13 = HEAP8[$__size_$i1$i$i$i73>>0]|0;
  $tobool$i$i$i$i74 = ($13<<24>>24)<(0);
  if ($tobool$i$i$i$i74) {
   $14 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i70>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$ref$tmp$i$i$i70);
   $__size_$i2$i$i$i76 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i76>>2] = 0;
   $$pre$phi$i$i81Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i71>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i71);
   HEAP8[$__size_$i1$i$i$i73>>0] = 0;
   $$pre$phi$i$i81Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i81Z2D>>2]=HEAP32[$ref$tmp11>>2]|0;HEAP32[$$pre$phi$i$i81Z2D+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$$pre$phi$i$i81Z2D+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  $__i$0$i$i$i84 = 0;
  while(1) {
   $exitcond$i$i$i85 = ($__i$0$i$i$i84|0)==(3);
   if ($exitcond$i$i$i85) {
    break;
   }
   $arrayidx$i$i$i87 = (($ref$tmp11) + ($__i$0$i$i$i84<<2)|0);
   HEAP32[$arrayidx$i$i$i87>>2] = 0;
   $inc$i$i$i88 = (($__i$0$i$i$i84) + 1)|0;
   $__i$0$i$i$i84 = $inc$i$i$i88;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp11);
  $vtable$i91 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i92 = ((($vtable$i91)) + 24|0);
  $15 = HEAP32[$vfn$i92>>2]|0;
  FUNCTION_TABLE_vii[$15 & 511]($ref$tmp13,$call$i);
  $__size_$i1$i$i$i96 = ((($__sym)) + 11|0);
  $16 = HEAP8[$__size_$i1$i$i$i96>>0]|0;
  $tobool$i$i$i$i97 = ($16<<24>>24)<(0);
  if ($tobool$i$i$i$i97) {
   $17 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i93>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($17,$ref$tmp$i$i$i93);
   $__size_$i2$i$i$i99 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i99>>2] = 0;
   $$pre$phi$i$i104Z2D = $__sym;
  } else {
   HEAP8[$ref$tmp4$i$i$i94>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i94);
   HEAP8[$__size_$i1$i$i$i96>>0] = 0;
   $$pre$phi$i$i104Z2D = $__sym;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sym,0);
  ;HEAP32[$$pre$phi$i$i104Z2D>>2]=HEAP32[$ref$tmp13>>2]|0;HEAP32[$$pre$phi$i$i104Z2D+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$$pre$phi$i$i104Z2D+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  $__i$0$i$i$i107 = 0;
  while(1) {
   $exitcond$i$i$i108 = ($__i$0$i$i$i107|0)==(3);
   if ($exitcond$i$i$i108) {
    break;
   }
   $arrayidx$i$i$i110 = (($ref$tmp13) + ($__i$0$i$i$i107<<2)|0);
   HEAP32[$arrayidx$i$i$i110>>2] = 0;
   $inc$i$i$i111 = (($__i$0$i$i$i107) + 1)|0;
   $__i$0$i$i$i107 = $inc$i$i$i111;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp13);
  $vtable$i114 = HEAP32[$call$i>>2]|0;
  $vfn$i115 = ((($vtable$i114)) + 36|0);
  $18 = HEAP32[$vfn$i115>>2]|0;
  $call$i116 = (FUNCTION_TABLE_ii[$18 & 511]($call$i)|0);
  $storemerge = $call$i116;
 } else {
  $call$i117 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21252)|0);
  if ($__neg) {
   $vtable$i118 = HEAP32[$call$i117>>2]|0;
   $vfn$i119 = ((($vtable$i118)) + 44|0);
   $19 = HEAP32[$vfn$i119>>2]|0;
   FUNCTION_TABLE_vii[$19 & 511]($ref$tmp21,$call$i117);
   $20 = HEAP32[$ref$tmp21>>2]|0;
   HEAP8[$__pat>>0]=$20&255;HEAP8[$__pat+1>>0]=($20>>8)&255;HEAP8[$__pat+2>>0]=($20>>16)&255;HEAP8[$__pat+3>>0]=$20>>24;
   $vtable$i120 = HEAP32[$call$i117>>2]|0;
   $vfn$i121 = ((($vtable$i120)) + 32|0);
   $21 = HEAP32[$vfn$i121>>2]|0;
   FUNCTION_TABLE_vii[$21 & 511]($ref$tmp22,$call$i117);
   $__size_$i1$i$i$i125 = ((($__sn)) + 11|0);
   $22 = HEAP8[$__size_$i1$i$i$i125>>0]|0;
   $tobool$i$i$i$i126 = ($22<<24>>24)<(0);
   if ($tobool$i$i$i$i126) {
    $23 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i122>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($23,$ref$tmp$i$i$i122);
    $__size_$i2$i$i$i128 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i128>>2] = 0;
    $$pre$phi$i$i133Z2D = $__sn;
   } else {
    HEAP8[$ref$tmp4$i$i$i123>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i123);
    HEAP8[$__size_$i1$i$i$i125>>0] = 0;
    $$pre$phi$i$i133Z2D = $__sn;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sn,0);
   ;HEAP32[$$pre$phi$i$i133Z2D>>2]=HEAP32[$ref$tmp22>>2]|0;HEAP32[$$pre$phi$i$i133Z2D+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$$pre$phi$i$i133Z2D+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
   $__i$0$i$i$i136 = 0;
   while(1) {
    $exitcond$i$i$i137 = ($__i$0$i$i$i136|0)==(3);
    if ($exitcond$i$i$i137) {
     break;
    }
    $arrayidx$i$i$i139 = (($ref$tmp22) + ($__i$0$i$i$i136<<2)|0);
    HEAP32[$arrayidx$i$i$i139>>2] = 0;
    $inc$i$i$i140 = (($__i$0$i$i$i136) + 1)|0;
    $__i$0$i$i$i136 = $inc$i$i$i140;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp22);
   $$pre$phi223Z2D = $call$i117;
  } else {
   $vtable$i143 = HEAP32[$call$i117>>2]|0;
   $vfn$i144 = ((($vtable$i143)) + 40|0);
   $24 = HEAP32[$vfn$i144>>2]|0;
   FUNCTION_TABLE_vii[$24 & 511]($ref$tmp25,$call$i117);
   $25 = HEAP32[$ref$tmp25>>2]|0;
   HEAP8[$__pat>>0]=$25&255;HEAP8[$__pat+1>>0]=($25>>8)&255;HEAP8[$__pat+2>>0]=($25>>16)&255;HEAP8[$__pat+3>>0]=$25>>24;
   $vtable$i145 = HEAP32[$call$i117>>2]|0;
   $vfn$i146 = ((($vtable$i145)) + 28|0);
   $26 = HEAP32[$vfn$i146>>2]|0;
   FUNCTION_TABLE_vii[$26 & 511]($ref$tmp26,$call$i117);
   $__size_$i1$i$i$i150 = ((($__sn)) + 11|0);
   $27 = HEAP8[$__size_$i1$i$i$i150>>0]|0;
   $tobool$i$i$i$i151 = ($27<<24>>24)<(0);
   if ($tobool$i$i$i$i151) {
    $28 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i147>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($28,$ref$tmp$i$i$i147);
    $__size_$i2$i$i$i153 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i153>>2] = 0;
    $$pre$phi$i$i158Z2D = $__sn;
   } else {
    HEAP8[$ref$tmp4$i$i$i148>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i148);
    HEAP8[$__size_$i1$i$i$i150>>0] = 0;
    $$pre$phi$i$i158Z2D = $__sn;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sn,0);
   ;HEAP32[$$pre$phi$i$i158Z2D>>2]=HEAP32[$ref$tmp26>>2]|0;HEAP32[$$pre$phi$i$i158Z2D+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$$pre$phi$i$i158Z2D+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
   $__i$0$i$i$i161 = 0;
   while(1) {
    $exitcond$i$i$i162 = ($__i$0$i$i$i161|0)==(3);
    if ($exitcond$i$i$i162) {
     break;
    }
    $arrayidx$i$i$i164 = (($ref$tmp26) + ($__i$0$i$i$i161<<2)|0);
    HEAP32[$arrayidx$i$i$i164>>2] = 0;
    $inc$i$i$i165 = (($__i$0$i$i$i161) + 1)|0;
    $__i$0$i$i$i161 = $inc$i$i$i165;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp26);
   $$pre$phi223Z2D = $call$i117;
  }
  $vtable$i168 = HEAP32[$call$i117>>2]|0;
  $vfn$i169 = ((($vtable$i168)) + 12|0);
  $29 = HEAP32[$vfn$i169>>2]|0;
  $call$i170 = (FUNCTION_TABLE_ii[$29 & 511]($call$i117)|0);
  HEAP8[$__dp>>0] = $call$i170;
  $vtable$i171 = HEAP32[$call$i117>>2]|0;
  $vfn$i172 = ((($vtable$i171)) + 16|0);
  $30 = HEAP32[$vfn$i172>>2]|0;
  $call$i173 = (FUNCTION_TABLE_ii[$30 & 511]($call$i117)|0);
  HEAP8[$__ts>>0] = $call$i173;
  $vtable$i174 = HEAP32[$$pre$phi223Z2D>>2]|0;
  $vfn$i175 = ((($vtable$i174)) + 20|0);
  $31 = HEAP32[$vfn$i175>>2]|0;
  FUNCTION_TABLE_vii[$31 & 511]($ref$tmp31,$call$i117);
  $__size_$i1$i$i$i179 = ((($__grp)) + 11|0);
  $32 = HEAP8[$__size_$i1$i$i$i179>>0]|0;
  $tobool$i$i$i$i180 = ($32<<24>>24)<(0);
  if ($tobool$i$i$i$i180) {
   $33 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i176>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($33,$ref$tmp$i$i$i176);
   $__size_$i2$i$i$i182 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i182>>2] = 0;
   $$pre$phi$i$i187Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i177>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i177);
   HEAP8[$__size_$i1$i$i$i179>>0] = 0;
   $$pre$phi$i$i187Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i187Z2D>>2]=HEAP32[$ref$tmp31>>2]|0;HEAP32[$$pre$phi$i$i187Z2D+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$$pre$phi$i$i187Z2D+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  $__i$0$i$i$i190 = 0;
  while(1) {
   $exitcond$i$i$i191 = ($__i$0$i$i$i190|0)==(3);
   if ($exitcond$i$i$i191) {
    break;
   }
   $arrayidx$i$i$i193 = (($ref$tmp31) + ($__i$0$i$i$i190<<2)|0);
   HEAP32[$arrayidx$i$i$i193>>2] = 0;
   $inc$i$i$i194 = (($__i$0$i$i$i190) + 1)|0;
   $__i$0$i$i$i190 = $inc$i$i$i194;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp31);
  $vtable$i197 = HEAP32[$$pre$phi223Z2D>>2]|0;
  $vfn$i198 = ((($vtable$i197)) + 24|0);
  $34 = HEAP32[$vfn$i198>>2]|0;
  FUNCTION_TABLE_vii[$34 & 511]($ref$tmp33,$call$i117);
  $__size_$i1$i$i$i202 = ((($__sym)) + 11|0);
  $35 = HEAP8[$__size_$i1$i$i$i202>>0]|0;
  $tobool$i$i$i$i203 = ($35<<24>>24)<(0);
  if ($tobool$i$i$i$i203) {
   $36 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i199>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($36,$ref$tmp$i$i$i199);
   $__size_$i2$i$i$i205 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i205>>2] = 0;
   $$pre$phi$i$i210Z2D = $__sym;
  } else {
   HEAP8[$ref$tmp4$i$i$i200>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i200);
   HEAP8[$__size_$i1$i$i$i202>>0] = 0;
   $$pre$phi$i$i210Z2D = $__sym;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__sym,0);
  ;HEAP32[$$pre$phi$i$i210Z2D>>2]=HEAP32[$ref$tmp33>>2]|0;HEAP32[$$pre$phi$i$i210Z2D+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$$pre$phi$i$i210Z2D+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  $__i$0$i$i$i213 = 0;
  while(1) {
   $exitcond$i$i$i214 = ($__i$0$i$i$i213|0)==(3);
   if ($exitcond$i$i$i214) {
    break;
   }
   $arrayidx$i$i$i216 = (($ref$tmp33) + ($__i$0$i$i$i213<<2)|0);
   HEAP32[$arrayidx$i$i$i216>>2] = 0;
   $inc$i$i$i217 = (($__i$0$i$i$i213) + 1)|0;
   $__i$0$i$i$i213 = $inc$i$i$i217;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp33);
  $vtable$i220 = HEAP32[$call$i117>>2]|0;
  $vfn$i221 = ((($vtable$i220)) + 36|0);
  $37 = HEAP32[$vfn$i221>>2]|0;
  $call$i222 = (FUNCTION_TABLE_ii[$37 & 511]($call$i117)|0);
  $storemerge = $call$i222;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pn = 0, $$pn$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0;
 var $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i106 = 0, $__size_$i$i$i117 = 0, $__size_$i$i$i173 = 0, $__size_$i3$i$i108 = 0, $__size_$i3$i$i119 = 0, $__size_$i3$i$i175 = 0, $__tab_$i = 0, $add$ptr$i = 0, $add$ptr$i161 = 0, $add$ptr$i85 = 0, $agg$tmp4$sroa$0$0$i = 0, $agg$tmp4$sroa$0$0$i142 = 0;
 var $and = 0, $and101 = 0, $and3$i = 0, $arrayidx = 0, $arrayidx$i = 0, $call$i = 0, $call$i115 = 0, $call$i128 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i144 = 0, $cmp$i124 = 0, $cmp$i180 = 0, $cmp1$i$i = 0, $cmp2$i = 0, $cmp21 = 0, $cmp27 = 0, $cmp30 = 0, $cmp31 = 0;
 var $cmp40 = 0, $cmp48 = 0, $cmp6$i = 0, $cmp60 = 0, $cmp61 = 0, $cmp65 = 0, $cmp71 = 0, $cmp89 = 0, $cond = 0, $cond$i = 0, $cond$i$i$i103 = 0, $cond$i$i$i136 = 0, $cond$i$i$i84 = 0, $cond$i$i112 = 0, $cond$i$i123 = 0, $cond$i$i170186 = 0, $cond$i$i179 = 0, $cond$i94 = 0, $conv = 0, $conv$i = 0;
 var $conv$i$i = 0, $conv$i$i$i110 = 0, $conv$i$i$i121 = 0, $conv$i$i$i177 = 0, $conv$i$i92 = 0, $conv57 = 0, $conv76 = 0, $dec = 0, $dec44 = 0, $exitcond = 0, $inc = 0, $inc83 = 0, $inc86 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i146 = 0, $incdec$ptr$i$i147 = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr18 = 0, $incdec$ptr2$i$i = 0;
 var $incdec$ptr26 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr42 = 0, $incdec$ptr5 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $incdec$ptr82 = 0, $or$cond = 0, $spec$select = 0, $spec$select201 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i107 = 0, $tobool$i$i$i118 = 0, $tobool$i$i$i174 = 0, $tobool$i$i89 = 0, $trunc = 0, $vfn$i = 0;
 var $vfn$i114 = 0, $vfn$i127 = 0, $vtable$i = 0, $vtable$i113 = 0, $vtable$i126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $__size_$i$i$i117 = ((($__sn)) + 11|0);
 $__size_$i3$i$i119 = ((($__sn)) + 4|0);
 $__size_$i$i$i173 = ((($__sym)) + 11|0);
 $__size_$i3$i$i175 = ((($__sym)) + 4|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $__tab_$i = ((($__ct)) + 8|0);
 $cmp27 = ($__fd|0)>(0);
 $__size_$i$i$i106 = ((($__grp)) + 11|0);
 $__size_$i3$i$i108 = ((($__grp)) + 4|0);
 $__db$addr$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $conv = $2 << 24 >> 24;
  L4: do {
   switch ($conv|0) {
   case 0:  {
    $3 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $3;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 1:  {
    $4 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $4;
    $vtable$i113 = HEAP32[$__ct>>2]|0;
    $vfn$i114 = ((($vtable$i113)) + 28|0);
    $5 = HEAP32[$vfn$i114>>2]|0;
    $call$i115 = (FUNCTION_TABLE_iii[$5 & 511]($__ct,32)|0);
    $6 = HEAP32[$__me>>2]|0;
    $incdec$ptr = ((($6)) + 1|0);
    HEAP32[$__me>>2] = $incdec$ptr;
    HEAP8[$6>>0] = $call$i115;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 3:  {
    $7 = HEAP8[$__size_$i$i$i117>>0]|0;
    $tobool$i$i$i118 = ($7<<24>>24)<(0);
    $8 = HEAP32[$__size_$i3$i$i119>>2]|0;
    $conv$i$i$i121 = $7&255;
    $cond$i$i123 = $tobool$i$i$i118 ? $8 : $conv$i$i$i121;
    $cmp$i124 = ($cond$i$i123|0)==(0);
    if ($cmp$i124) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $9 = HEAP32[$__sn>>2]|0;
     $cond$i$i$i136 = $tobool$i$i$i118 ? $9 : $__sn;
     $10 = HEAP8[$cond$i$i$i136>>0]|0;
     $11 = HEAP32[$__me>>2]|0;
     $incdec$ptr5 = ((($11)) + 1|0);
     HEAP32[$__me>>2] = $incdec$ptr5;
     HEAP8[$11>>0] = $10;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 2:  {
    $12 = HEAP8[$__size_$i$i$i173>>0]|0;
    $tobool$i$i$i174 = ($12<<24>>24)<(0);
    $13 = HEAP32[$__size_$i3$i$i175>>2]|0;
    $conv$i$i$i177 = $12&255;
    $cond$i$i179 = $tobool$i$i$i174 ? $13 : $conv$i$i$i177;
    $cmp$i180 = ($cond$i$i179|0)==(0);
    $or$cond = $tobool | $cmp$i180;
    if ($or$cond) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $14 = HEAP32[$__sym>>2]|0;
     $cond$i$i170186 = $tobool$i$i$i174 ? $14 : $__sym;
     $add$ptr$i161 = (($cond$i$i170186) + ($cond$i$i179)|0);
     $15 = HEAP32[$__me>>2]|0;
     $__result$addr$0$i$i143 = $15;$agg$tmp4$sroa$0$0$i142 = $cond$i$i170186;
     while(1) {
      $cmp$i$i$i$i144 = ($agg$tmp4$sroa$0$0$i142|0)==($add$ptr$i161|0);
      if ($cmp$i$i$i$i144) {
       break;
      }
      $16 = HEAP8[$agg$tmp4$sroa$0$0$i142>>0]|0;
      HEAP8[$__result$addr$0$i$i143>>0] = $16;
      $incdec$ptr$i$i$i146 = ((($agg$tmp4$sroa$0$0$i142)) + 1|0);
      $incdec$ptr$i$i147 = ((($__result$addr$0$i$i143)) + 1|0);
      $__result$addr$0$i$i143 = $incdec$ptr$i$i147;$agg$tmp4$sroa$0$0$i142 = $incdec$ptr$i$i$i146;
     }
     HEAP32[$__me>>2] = $__result$addr$0$i$i143;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 4:  {
    $17 = HEAP32[$__me>>2]|0;
    $incdec$ptr18 = ((($__db$addr$0)) + 1|0);
    $spec$select = $__neg ? $incdec$ptr18 : $__db$addr$0;
    $__d$0 = $spec$select;
    while(1) {
     $cmp21 = ($__d$0>>>0)<($__de>>>0);
     if (!($cmp21)) {
      break;
     }
     $18 = HEAP8[$__d$0>>0]|0;
     $cmp2$i = ($18<<24>>24)>(-1);
     if (!($cmp2$i)) {
      break;
     }
     $conv$i = $18 << 24 >> 24;
     $19 = HEAP32[$__tab_$i>>2]|0;
     $arrayidx$i = (($19) + ($conv$i<<1)|0);
     $20 = HEAP16[$arrayidx$i>>1]|0;
     $and3$i = $20 & 2048;
     $cmp6$i = ($and3$i<<16>>16)==(0);
     if ($cmp6$i) {
      break;
     }
     $incdec$ptr26 = ((($__d$0)) + 1|0);
     $__d$0 = $incdec$ptr26;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;$__f$0 = $__fd;
     while(1) {
      $cmp30 = ($__d$1>>>0)>($spec$select>>>0);
      $cmp31 = ($__f$0|0)>(0);
      $21 = $cmp30 & $cmp31;
      if (!($21)) {
       break;
      }
      $incdec$ptr33 = ((($__d$1)) + -1|0);
      $22 = HEAP8[$incdec$ptr33>>0]|0;
      $23 = HEAP32[$__me>>2]|0;
      $incdec$ptr34 = ((($23)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr34;
      HEAP8[$23>>0] = $22;
      $dec = (($__f$0) + -1)|0;
      $__d$1 = $incdec$ptr33;$__f$0 = $dec;
     }
     if ($cmp31) {
      $vtable$i126 = HEAP32[$__ct>>2]|0;
      $vfn$i127 = ((($vtable$i126)) + 28|0);
      $24 = HEAP32[$vfn$i127>>2]|0;
      $call$i128 = (FUNCTION_TABLE_iii[$24 & 511]($__ct,48)|0);
      $cond = $call$i128;
     } else {
      $cond = 0;
     }
     $__f$1 = $__f$0;
     while(1) {
      $cmp40 = ($__f$1|0)>(0);
      $25 = HEAP32[$__me>>2]|0;
      $incdec$ptr42 = ((($25)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr42;
      if (!($cmp40)) {
       break;
      }
      HEAP8[$25>>0] = $cond;
      $dec44 = (($__f$1) + -1)|0;
      $__f$1 = $dec44;
     }
     HEAP8[$25>>0] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0;
    }
    $cmp48 = ($__d$2|0)==($spec$select|0);
    L36: do {
     if ($cmp48) {
      $vtable$i = HEAP32[$__ct>>2]|0;
      $vfn$i = ((($vtable$i)) + 28|0);
      $26 = HEAP32[$vfn$i>>2]|0;
      $call$i = (FUNCTION_TABLE_iii[$26 & 511]($__ct,48)|0);
      $27 = HEAP32[$__me>>2]|0;
      $incdec$ptr51 = ((($27)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr51;
      HEAP8[$27>>0] = $call$i;
     } else {
      $28 = HEAP8[$__size_$i$i$i106>>0]|0;
      $tobool$i$i$i107 = ($28<<24>>24)<(0);
      $29 = HEAP32[$__size_$i3$i$i108>>2]|0;
      $conv$i$i$i110 = $28&255;
      $cond$i$i112 = $tobool$i$i$i107 ? $29 : $conv$i$i$i110;
      $cmp$i = ($cond$i$i112|0)==(0);
      if ($cmp$i) {
       $__gl$0$ph = -1;
      } else {
       $30 = HEAP32[$__grp>>2]|0;
       $cond$i$i$i103 = $tobool$i$i$i107 ? $30 : $__grp;
       $31 = HEAP8[$cond$i$i$i103>>0]|0;
       $conv57 = $31 << 24 >> 24;
       $__gl$0$ph = $conv57;
      }
      $__d$3 = $__d$2;$__gl$0 = $__gl$0$ph;$__ig$0 = 0;$__ng$0 = 0;
      while(1) {
       $cmp60 = ($__d$3|0)==($spec$select|0);
       if ($cmp60) {
        break L36;
       }
       $cmp61 = ($__ng$0|0)==($__gl$0|0);
       if ($cmp61) {
        $32 = HEAP32[$__me>>2]|0;
        $incdec$ptr63 = ((($32)) + 1|0);
        HEAP32[$__me>>2] = $incdec$ptr63;
        HEAP8[$32>>0] = $__ts;
        $inc = (($__ig$0) + 1)|0;
        $33 = HEAP8[$__size_$i$i$i106>>0]|0;
        $tobool$i$i89 = ($33<<24>>24)<(0);
        $34 = HEAP32[$__size_$i3$i$i108>>2]|0;
        $conv$i$i92 = $33&255;
        $cond$i94 = $tobool$i$i89 ? $34 : $conv$i$i92;
        $cmp65 = ($inc>>>0)<($cond$i94>>>0);
        if ($cmp65) {
         $35 = HEAP32[$__grp>>2]|0;
         $cond$i$i$i84 = $tobool$i$i89 ? $35 : $__grp;
         $add$ptr$i85 = (($cond$i$i$i84) + ($inc)|0);
         $36 = HEAP8[$add$ptr$i85>>0]|0;
         $cmp71 = ($36<<24>>24)==(127);
         $conv76 = $36 << 24 >> 24;
         $spec$select201 = $cmp71 ? -1 : $conv76;
         $__gl$1 = $spec$select201;$__ig$1 = $inc;$__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $inc;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $incdec$ptr81 = ((($__d$3)) + -1|0);
       $37 = HEAP8[$incdec$ptr81>>0]|0;
       $38 = HEAP32[$__me>>2]|0;
       $incdec$ptr82 = ((($38)) + 1|0);
       HEAP32[$__me>>2] = $incdec$ptr82;
       HEAP8[$38>>0] = $37;
       $inc83 = (($__ng$1) + 1)|0;
       $__d$3 = $incdec$ptr81;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $inc83;
      }
     }
    } while(0);
    $39 = HEAP32[$__me>>2]|0;
    $cmp$i$i = ($17|0)==($39|0);
    if ($cmp$i$i) {
     $__db$addr$2 = $spec$select;
    } else {
     $__first$addr$0$i$i = $17;$__last$addr$0$i$i = $39;
     while(1) {
      $incdec$ptr$i$i73 = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i73>>>0);
      if (!($cmp1$i$i)) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $40 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $41 = HEAP8[$incdec$ptr$i$i73>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $41;
      HEAP8[$incdec$ptr$i$i73>>0] = $40;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
   default: {
    $__db$addr$2 = $__db$addr$0;
   }
   }
  } while(0);
  $inc86 = (($__p$0) + 1)|0;
  $__db$addr$0 = $__db$addr$2;$__p$0 = $inc86;
 }
 $0 = HEAP8[$__size_$i$i$i117>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$__size_$i3$i$i119>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $cmp89 = ($cond$i>>>0)>(1);
 if ($cmp89) {
  $42 = HEAP32[$__sn>>2]|0;
  $$pn = $tobool$i$i ? $42 : $__sn;
  $add$ptr$i = (($$pn) + ($cond$i)|0);
  $43 = HEAP32[$__me>>2]|0;
  $$pn$pn = $$pn;$__result$addr$0$i$i = $43;
  while(1) {
   $agg$tmp4$sroa$0$0$i = ((($$pn$pn)) + 1|0);
   $cmp$i$i$i$i = ($agg$tmp4$sroa$0$0$i|0)==($add$ptr$i|0);
   if ($cmp$i$i$i$i) {
    break;
   }
   $44 = HEAP8[$agg$tmp4$sroa$0$0$i>>0]|0;
   HEAP8[$__result$addr$0$i$i>>0] = $44;
   $incdec$ptr$i$i = ((($__result$addr$0$i$i)) + 1|0);
   $$pn$pn = $agg$tmp4$sroa$0$0$i;$__result$addr$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$__me>>2] = $__result$addr$0$i$i;
 }
 $and101 = $__flags & 176;
 $trunc = $and101&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $45 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $45;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__hd$sroa$0$0 = 0;
 var $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i35 = 0, $__i$0$i$i42 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i55 = 0, $__size_$i$i69 = 0, $__size_$i$i77 = 0, $__size_$i2$i = 0, $__size_$i2$i57 = 0, $__size_$i2$i71 = 0, $__size_$i2$i79 = 0;
 var $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add$ptr44 = 0, $add26 = 0, $add31 = 0, $add31$sink = 0, $add32 = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i38 = 0, $arrayidx$i$i45 = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0;
 var $call46 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp$i$i = 0, $cmp16 = 0, $cmp17 = 0, $cmp22 = 0, $cmp34 = 0, $cmp39 = 0, $cmp6 = 0, $cond$i = 0, $cond$i61 = 0, $cond$i75 = 0, $cond$i75$sink = 0, $cond$i83 = 0, $cond$i83$sink = 0, $conv$i$i = 0, $conv$i$i59 = 0, $conv$i$i73 = 0;
 var $conv$i$i81 = 0, $exitcond$i$i = 0, $exitcond$i$i36 = 0, $exitcond$i$i43 = 0, $inc$i$i = 0, $inc$i$i39 = 0, $inc$i$i46 = 0, $mul = 0, $mul23 = 0, $mul36 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i24 = 0, $tobool$i$i50 = 0, $tobool$i$i54 = 0, $tobool$i$i56 = 0, $tobool$i$i70 = 0, $tobool$i$i78 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $agg$tmp$byval_copy = sp + 988|0;
 $vararg_buffer1 = sp + 912|0;
 $vararg_buffer = sp + 904|0;
 $__buf = sp + 800|0;
 $__bb = sp + 984|0;
 $__digits = sp + 400|0;
 $__loc = sp + 980|0;
 $__pat = sp + 992|0;
 $__dp = sp + 976|0;
 $__ts = sp + 972|0;
 $__grp = sp + 960|0;
 $__sym = sp + 948|0;
 $__sn = sp + 936|0;
 $__fd = sp + 932|0;
 $__mbuf = sp;
 $__mi = sp + 928|0;
 $__me = sp + 924|0;
 $agg$tmp = sp + 920|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $call = (_snprintf($__buf,100,14240,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 if ($cmp) {
  $call4 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $__units;
  $call5 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb,$call4,14240,$vararg_buffer1)|0);
  $0 = HEAP32[$__bb>>2]|0;
  $cmp6 = ($0|0)==(0|0);
  if ($cmp6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $1 = $0;
  $mul = $call5 << 2;
  $call8 = (_malloc($mul)|0);
  $2 = $call8;
  $cmp$i$i = ($call8|0)==(0|0);
  if ($cmp$i$i) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__db$0 = $call8;$__hd$sroa$0$0 = $2;$__hn$sroa$0$0 = $1;$__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;$__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;$__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $3 = HEAP32[$__bb>>2]|0;
 $add$ptr = (($3) + ($__n$0)|0);
 $vtable$i = HEAP32[$call$i>>2]|0;
 $vfn$i = ((($vtable$i)) + 48|0);
 $4 = HEAP32[$vfn$i>>2]|0;
 (FUNCTION_TABLE_iiiii[$4 & 511]($call$i,$3,$add$ptr,$__db$0)|0);
 $cmp16 = ($__n$0|0)==(0);
 if ($cmp16) {
  $7 = 0;
 } else {
  $5 = HEAP32[$__bb>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $cmp17 = ($6<<24>>24)==(45);
  $7 = $cmp17;
 }
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i35 = 0;
 while(1) {
  $exitcond$i$i36 = ($__i$0$i$i35|0)==(3);
  if ($exitcond$i$i36) {
   break;
  }
  $arrayidx$i$i38 = (($__sym) + ($__i$0$i$i35<<2)|0);
  HEAP32[$arrayidx$i$i38>>2] = 0;
  $inc$i$i39 = (($__i$0$i$i35) + 1)|0;
  $__i$0$i$i35 = $inc$i$i39;
 }
 ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 $__i$0$i$i42 = 0;
 while(1) {
  $exitcond$i$i43 = ($__i$0$i$i42|0)==(3);
  if ($exitcond$i$i43) {
   break;
  }
  $arrayidx$i$i45 = (($__sn) + ($__i$0$i$i42<<2)|0);
  HEAP32[$arrayidx$i$i45>>2] = 0;
  $inc$i$i46 = (($__i$0$i$i42) + 1)|0;
  $__i$0$i$i42 = $inc$i$i46;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$7,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $8 = HEAP32[$__fd>>2]|0;
 $cmp22 = ($__n$0|0)>($8|0);
 if ($cmp22) {
  $sub = (($__n$0) - ($8))|0;
  $mul23 = $sub << 1;
  $9 = ((($__sn)) + 8|0);
  $__size_$i$i = ((($9)) + 3|0);
  $10 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i54 = ($10<<24>>24)<(0);
  $__size_$i2$i = ((($__sn)) + 4|0);
  $11 = HEAP32[$__size_$i2$i>>2]|0;
  $conv$i$i = $10&255;
  $cond$i = $tobool$i$i54 ? $11 : $conv$i$i;
  $12 = ((($__sym)) + 8|0);
  $__size_$i$i55 = ((($12)) + 3|0);
  $13 = HEAP8[$__size_$i$i55>>0]|0;
  $tobool$i$i56 = ($13<<24>>24)<(0);
  $__size_$i2$i57 = ((($__sym)) + 4|0);
  $14 = HEAP32[$__size_$i2$i57>>2]|0;
  $conv$i$i59 = $13&255;
  $cond$i61 = $tobool$i$i56 ? $14 : $conv$i$i59;
  $add = (($8) + 1)|0;
  $add26 = (($add) + ($mul23))|0;
  $add31$sink = $add26;$cond$i75$sink = $cond$i;$cond$i83$sink = $cond$i61;
 } else {
  $15 = ((($__sn)) + 8|0);
  $__size_$i$i69 = ((($15)) + 3|0);
  $16 = HEAP8[$__size_$i$i69>>0]|0;
  $tobool$i$i70 = ($16<<24>>24)<(0);
  $__size_$i2$i71 = ((($__sn)) + 4|0);
  $17 = HEAP32[$__size_$i2$i71>>2]|0;
  $conv$i$i73 = $16&255;
  $cond$i75 = $tobool$i$i70 ? $17 : $conv$i$i73;
  $18 = ((($__sym)) + 8|0);
  $__size_$i$i77 = ((($18)) + 3|0);
  $19 = HEAP8[$__size_$i$i77>>0]|0;
  $tobool$i$i78 = ($19<<24>>24)<(0);
  $__size_$i2$i79 = ((($__sym)) + 4|0);
  $20 = HEAP32[$__size_$i2$i79>>2]|0;
  $conv$i$i81 = $19&255;
  $cond$i83 = $tobool$i$i78 ? $20 : $conv$i$i81;
  $add31 = (($8) + 2)|0;
  $add31$sink = $add31;$cond$i75$sink = $cond$i75;$cond$i83$sink = $cond$i83;
 }
 $add32 = (($add31$sink) + ($cond$i75$sink))|0;
 $add33 = (($add32) + ($cond$i83$sink))|0;
 $cmp34 = ($add33>>>0)>(100);
 if ($cmp34) {
  $mul36 = $add33 << 2;
  $call37 = (_malloc($mul36)|0);
  $21 = $call37;
  $cmp39 = ($call37|0)==(0|0);
  if ($cmp39) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__hw$sroa$0$0 = $21;$__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;$__mb$0 = $__mbuf;
 }
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $22 = HEAP32[$__fmtflags_$i>>2]|0;
 $add$ptr44 = (($__db$0) + ($__n$0<<2)|0);
 $23 = HEAP32[$__dp>>2]|0;
 $24 = HEAP32[$__ts>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$22,$__db$0,$add$ptr44,$call$i,$7,$__pat,$23,$24,$__grp,$__sym,$__sn,$8);
 $25 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $25;
 $26 = HEAP32[$__mi>>2]|0;
 $27 = HEAP32[$__me>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call46 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__mb$0,$26,$27,$__iob,$__fl)|0);
 $tobool$i$i50 = ($__hw$sroa$0$0|0)==(0);
 if (!($tobool$i$i50)) {
  $28 = $__hw$sroa$0$0;
  _free($28);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 $tobool$i$i24 = ($__hd$sroa$0$0|0)==(0);
 if (!($tobool$i$i24)) {
  $29 = $__hd$sroa$0$0;
  _free($29);
 }
 $tobool$i$i = ($__hn$sroa$0$0|0)==(0);
 if (!($tobool$i$i)) {
  $30 = $__hn$sroa$0$0;
  _free($30);
 }
 STACKTOP = sp;return ($call46|0);
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i26 = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i67 = 0, $__size_$i$i75 = 0, $__size_$i$i83 = 0, $__size_$i$i91 = 0, $__size_$i2$i = 0, $__size_$i2$i69 = 0, $__size_$i2$i77 = 0, $__size_$i2$i85 = 0, $__size_$i2$i93 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0;
 var $add13 = 0, $add18 = 0, $add18$sink = 0, $add19 = 0, $add20 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i22 = 0, $arrayidx$i$i29 = 0, $call$i = 0, $call$i17 = 0, $call23 = 0, $call33 = 0, $cmp = 0, $cmp21 = 0, $cmp25 = 0, $cmp5 = 0, $cmp9 = 0, $cond$i = 0;
 var $cond$i$i$i = 0, $cond$i$i109 = 0, $cond$i40 = 0, $cond$i73 = 0, $cond$i81 = 0, $cond$i81$sink = 0, $cond$i89 = 0, $cond$i89$sink = 0, $cond$i97 = 0, $conv$i$i = 0, $conv$i$i38 = 0, $conv$i$i71 = 0, $conv$i$i79 = 0, $conv$i$i87 = 0, $conv$i$i95 = 0, $exitcond$i$i = 0, $exitcond$i$i20 = 0, $exitcond$i$i27 = 0, $inc$i$i = 0, $inc$i$i23 = 0;
 var $inc$i$i30 = 0, $mul = 0, $mul22 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, $tobool$i$i35 = 0, $tobool$i$i68 = 0, $tobool$i$i76 = 0, $tobool$i$i84 = 0, $tobool$i$i92 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $agg$tmp$byval_copy = sp + 464|0;
 $__loc = sp + 460|0;
 $__pat = sp + 468|0;
 $__dp = sp + 456|0;
 $__ts = sp + 452|0;
 $__grp = sp + 440|0;
 $__sym = sp + 428|0;
 $__sn = sp + 416|0;
 $__fd = sp + 412|0;
 $__mbuf = sp;
 $__mi = sp + 408|0;
 $__me = sp + 404|0;
 $agg$tmp = sp + 400|0;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21060)|0);
 $0 = ((($__digits)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 $__size_$i2$i = ((($__digits)) + 4|0);
 $2 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i = $1&255;
 $cond$i = $tobool$i$i ? $2 : $conv$i$i;
 $cmp = ($cond$i|0)==(0);
 if ($cmp) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__digits>>2]|0;
  $cond$i$i$i = $tobool$i$i ? $3 : $__digits;
  $4 = HEAP32[$cond$i$i$i>>2]|0;
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 44|0);
  $5 = HEAP32[$vfn$i>>2]|0;
  $call$i17 = (FUNCTION_TABLE_iii[$5 & 511]($call$i,45)|0);
  $cmp5 = ($4|0)==($call$i17|0);
  $6 = $cmp5;
 }
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($__i$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $arrayidx$i$i22 = (($__sym) + ($__i$0$i$i19<<2)|0);
  HEAP32[$arrayidx$i$i22>>2] = 0;
  $inc$i$i23 = (($__i$0$i$i19) + 1)|0;
  $__i$0$i$i19 = $inc$i$i23;
 }
 ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 $__i$0$i$i26 = 0;
 while(1) {
  $exitcond$i$i27 = ($__i$0$i$i26|0)==(3);
  if ($exitcond$i$i27) {
   break;
  }
  $arrayidx$i$i29 = (($__sn) + ($__i$0$i$i26<<2)|0);
  HEAP32[$arrayidx$i$i29>>2] = 0;
  $inc$i$i30 = (($__i$0$i$i26) + 1)|0;
  $__i$0$i$i26 = $inc$i$i30;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$6,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $7 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i35 = ($7<<24>>24)<(0);
 $8 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i38 = $7&255;
 $cond$i40 = $tobool$i$i35 ? $8 : $conv$i$i38;
 $9 = HEAP32[$__fd>>2]|0;
 $cmp9 = ($cond$i40|0)>($9|0);
 if ($cmp9) {
  $sub = (($cond$i40) - ($9))|0;
  $mul = $sub << 1;
  $10 = ((($__sn)) + 8|0);
  $__size_$i$i67 = ((($10)) + 3|0);
  $11 = HEAP8[$__size_$i$i67>>0]|0;
  $tobool$i$i68 = ($11<<24>>24)<(0);
  $__size_$i2$i69 = ((($__sn)) + 4|0);
  $12 = HEAP32[$__size_$i2$i69>>2]|0;
  $conv$i$i71 = $11&255;
  $cond$i73 = $tobool$i$i68 ? $12 : $conv$i$i71;
  $13 = ((($__sym)) + 8|0);
  $__size_$i$i91 = ((($13)) + 3|0);
  $14 = HEAP8[$__size_$i$i91>>0]|0;
  $tobool$i$i92 = ($14<<24>>24)<(0);
  $__size_$i2$i93 = ((($__sym)) + 4|0);
  $15 = HEAP32[$__size_$i2$i93>>2]|0;
  $conv$i$i95 = $14&255;
  $cond$i97 = $tobool$i$i92 ? $15 : $conv$i$i95;
  $add = (($9) + 1)|0;
  $add13 = (($add) + ($mul))|0;
  $add18$sink = $add13;$cond$i81$sink = $cond$i97;$cond$i89$sink = $cond$i73;
 } else {
  $16 = ((($__sn)) + 8|0);
  $__size_$i$i83 = ((($16)) + 3|0);
  $17 = HEAP8[$__size_$i$i83>>0]|0;
  $tobool$i$i84 = ($17<<24>>24)<(0);
  $__size_$i2$i85 = ((($__sn)) + 4|0);
  $18 = HEAP32[$__size_$i2$i85>>2]|0;
  $conv$i$i87 = $17&255;
  $cond$i89 = $tobool$i$i84 ? $18 : $conv$i$i87;
  $19 = ((($__sym)) + 8|0);
  $__size_$i$i75 = ((($19)) + 3|0);
  $20 = HEAP8[$__size_$i$i75>>0]|0;
  $tobool$i$i76 = ($20<<24>>24)<(0);
  $__size_$i2$i77 = ((($__sym)) + 4|0);
  $21 = HEAP32[$__size_$i2$i77>>2]|0;
  $conv$i$i79 = $20&255;
  $cond$i81 = $tobool$i$i76 ? $21 : $conv$i$i79;
  $add18 = (($9) + 2)|0;
  $add18$sink = $add18;$cond$i81$sink = $cond$i81;$cond$i89$sink = $cond$i89;
 }
 $add19 = (($add18$sink) + ($cond$i89$sink))|0;
 $add20 = (($add19) + ($cond$i81$sink))|0;
 $cmp21 = ($add20>>>0)>(100);
 if ($cmp21) {
  $mul22 = $add20 << 2;
  $call23 = (_malloc($mul22)|0);
  $22 = $call23;
  $cmp25 = ($call23|0)==(0|0);
  if ($cmp25) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $__h$sroa$0$0 = $22;$__mb$0 = $call23;
  }
 } else {
  $__h$sroa$0$0 = 0;$__mb$0 = $__mbuf;
 }
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $23 = HEAP32[$__fmtflags_$i>>2]|0;
 $24 = HEAP32[$__digits>>2]|0;
 $cond$i$i109 = $tobool$i$i35 ? $24 : $__digits;
 $add$ptr = (($cond$i$i109) + ($cond$i40<<2)|0);
 $25 = HEAP32[$__dp>>2]|0;
 $26 = HEAP32[$__ts>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$23,$cond$i$i109,$add$ptr,$call$i,$6,$__pat,$25,$26,$__grp,$__sym,$__sn,$9);
 $27 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$tmp>>2] = $27;
 $28 = HEAP32[$__mi>>2]|0;
 $29 = HEAP32[$__me>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call33 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__mb$0,$28,$29,$__iob,$__fl)|0);
 $tobool$i$i33 = ($__h$sroa$0$0|0)==(0);
 if (!($tobool$i$i33)) {
  $30 = $__h$sroa$0$0;
  _free($30);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;return ($call33|0);
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi$i$i170Z2D = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i122 = 0, $__i$0$i$i$i144 = 0, $__i$0$i$i$i173 = 0, $__i$0$i$i$i193 = 0, $__i$0$i$i$i52 = 0, $__i$0$i$i$i77 = 0, $__i$0$i$i$i96 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i113 = 0, $__size_$i1$i$i$i135 = 0, $__size_$i1$i$i$i162 = 0, $__size_$i1$i$i$i184 = 0, $__size_$i1$i$i$i43 = 0;
 var $__size_$i1$i$i$i69 = 0, $__size_$i1$i$i$i87 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i116 = 0, $__size_$i2$i$i$i138 = 0, $__size_$i2$i$i$i165 = 0, $__size_$i2$i$i$i187 = 0, $__size_$i2$i$i$i46 = 0, $__size_$i2$i$i$i72 = 0, $__size_$i2$i$i$i90 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i125 = 0, $arrayidx$i$i$i147 = 0, $arrayidx$i$i$i176 = 0, $arrayidx$i$i$i196 = 0, $arrayidx$i$i$i55 = 0, $arrayidx$i$i$i80 = 0, $arrayidx$i$i$i99 = 0, $call$i = 0, $call$i105 = 0;
 var $call$i106 = 0, $call$i153 = 0, $call$i156 = 0, $call$i202 = 0, $call$i61 = 0, $call$i64 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i123 = 0, $exitcond$i$i$i145 = 0, $exitcond$i$i$i174 = 0, $exitcond$i$i$i194 = 0, $exitcond$i$i$i53 = 0, $exitcond$i$i$i78 = 0, $exitcond$i$i$i97 = 0, $inc$i$i$i = 0, $inc$i$i$i100 = 0, $inc$i$i$i126 = 0, $inc$i$i$i148 = 0, $inc$i$i$i177 = 0, $inc$i$i$i197 = 0;
 var $inc$i$i$i56 = 0, $inc$i$i$i81 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i111 = 0, $ref$tmp$i$i$i133 = 0, $ref$tmp$i$i$i159 = 0, $ref$tmp$i$i$i182 = 0, $ref$tmp$i$i$i41 = 0, $ref$tmp$i$i$i67 = 0, $ref$tmp$i$i$i85 = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $ref$tmp33 = 0, $ref$tmp4 = 0;
 var $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i112 = 0, $ref$tmp4$i$i$i134 = 0, $ref$tmp4$i$i$i160 = 0, $ref$tmp4$i$i$i183 = 0, $ref$tmp4$i$i$i42 = 0, $ref$tmp4$i$i$i68 = 0, $ref$tmp4$i$i$i86 = 0, $ref$tmp6 = 0, $ref$tmp7 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i114 = 0, $tobool$i$i$i$i136 = 0, $tobool$i$i$i$i163 = 0, $tobool$i$i$i$i185 = 0, $tobool$i$i$i$i44 = 0, $tobool$i$i$i$i70 = 0, $tobool$i$i$i$i88 = 0, $vfn$i = 0;
 var $vfn$i104 = 0, $vfn$i108 = 0, $vfn$i110 = 0, $vfn$i130 = 0, $vfn$i132 = 0, $vfn$i152 = 0, $vfn$i155 = 0, $vfn$i158 = 0, $vfn$i181 = 0, $vfn$i201 = 0, $vfn$i36 = 0, $vfn$i38 = 0, $vfn$i40 = 0, $vfn$i60 = 0, $vfn$i63 = 0, $vfn$i66 = 0, $vfn$i84 = 0, $vtable$i = 0, $vtable$i103 = 0, $vtable$i107 = 0;
 var $vtable$i109 = 0, $vtable$i129 = 0, $vtable$i131 = 0, $vtable$i151 = 0, $vtable$i154 = 0, $vtable$i157 = 0, $vtable$i180 = 0, $vtable$i200 = 0, $vtable$i35 = 0, $vtable$i37 = 0, $vtable$i39 = 0, $vtable$i59 = 0, $vtable$i62 = 0, $vtable$i65 = 0, $vtable$i83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $ref$tmp$i$i$i182 = sp + 156|0;
 $ref$tmp4$i$i$i183 = sp + 152|0;
 $ref$tmp$i$i$i159 = sp + 163|0;
 $ref$tmp4$i$i$i160 = sp + 162|0;
 $ref$tmp$i$i$i133 = sp + 148|0;
 $ref$tmp4$i$i$i134 = sp + 144|0;
 $ref$tmp$i$i$i111 = sp + 140|0;
 $ref$tmp4$i$i$i112 = sp + 136|0;
 $ref$tmp$i$i$i85 = sp + 132|0;
 $ref$tmp4$i$i$i86 = sp + 128|0;
 $ref$tmp$i$i$i67 = sp + 161|0;
 $ref$tmp4$i$i$i68 = sp + 160|0;
 $ref$tmp$i$i$i41 = sp + 124|0;
 $ref$tmp4$i$i$i42 = sp + 120|0;
 $ref$tmp$i$i$i = sp + 116|0;
 $ref$tmp4$i$i$i = sp + 112|0;
 $ref$tmp = sp + 108|0;
 $ref$tmp4 = sp + 96|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 80|0;
 $ref$tmp11 = sp + 68|0;
 $ref$tmp13 = sp + 56|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp22 = sp + 40|0;
 $ref$tmp25 = sp + 36|0;
 $ref$tmp26 = sp + 24|0;
 $ref$tmp31 = sp + 12|0;
 $ref$tmp33 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21276)|0);
  if ($__neg) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 44|0);
   $0 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$0 & 511]($ref$tmp,$call$i);
   $1 = HEAP32[$ref$tmp>>2]|0;
   HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
   $vtable$i35 = HEAP32[$call$i>>2]|0;
   $vfn$i36 = ((($vtable$i35)) + 32|0);
   $2 = HEAP32[$vfn$i36>>2]|0;
   FUNCTION_TABLE_vii[$2 & 511]($ref$tmp4,$call$i);
   $3 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i = ((($3)) + 3|0);
   $4 = HEAP8[$__size_$i1$i$i$i>>0]|0;
   $tobool$i$i$i$i = ($4<<24>>24)<(0);
   if ($tobool$i$i$i$i) {
    $5 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($5,$ref$tmp$i$i$i);
    $__size_$i2$i$i$i = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i);
    HEAP8[$__size_$i1$i$i$i>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sn,0);
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp4>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $arrayidx$i$i$i = (($ref$tmp4) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$arrayidx$i$i$i>>2] = 0;
    $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $inc$i$i$i;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   $vtable$i37 = HEAP32[$call$i>>2]|0;
   $vfn$i38 = ((($vtable$i37)) + 40|0);
   $6 = HEAP32[$vfn$i38>>2]|0;
   FUNCTION_TABLE_vii[$6 & 511]($ref$tmp6,$call$i);
   $7 = HEAP32[$ref$tmp6>>2]|0;
   HEAP8[$__pat>>0]=$7&255;HEAP8[$__pat+1>>0]=($7>>8)&255;HEAP8[$__pat+2>>0]=($7>>16)&255;HEAP8[$__pat+3>>0]=$7>>24;
   $vtable$i39 = HEAP32[$call$i>>2]|0;
   $vfn$i40 = ((($vtable$i39)) + 28|0);
   $8 = HEAP32[$vfn$i40>>2]|0;
   FUNCTION_TABLE_vii[$8 & 511]($ref$tmp7,$call$i);
   $9 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i43 = ((($9)) + 3|0);
   $10 = HEAP8[$__size_$i1$i$i$i43>>0]|0;
   $tobool$i$i$i$i44 = ($10<<24>>24)<(0);
   if ($tobool$i$i$i$i44) {
    $11 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i41>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($11,$ref$tmp$i$i$i41);
    $__size_$i2$i$i$i46 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i46>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i42>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i42);
    HEAP8[$__size_$i1$i$i$i43>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sn,0);
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
   $__i$0$i$i$i52 = 0;
   while(1) {
    $exitcond$i$i$i53 = ($__i$0$i$i$i52|0)==(3);
    if ($exitcond$i$i$i53) {
     break;
    }
    $arrayidx$i$i$i55 = (($ref$tmp7) + ($__i$0$i$i$i52<<2)|0);
    HEAP32[$arrayidx$i$i$i55>>2] = 0;
    $inc$i$i$i56 = (($__i$0$i$i$i52) + 1)|0;
    $__i$0$i$i$i52 = $inc$i$i$i56;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp7);
  }
  $vtable$i59 = HEAP32[$call$i>>2]|0;
  $vfn$i60 = ((($vtable$i59)) + 12|0);
  $12 = HEAP32[$vfn$i60>>2]|0;
  $call$i61 = (FUNCTION_TABLE_ii[$12 & 511]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i61;
  $vtable$i62 = HEAP32[$call$i>>2]|0;
  $vfn$i63 = ((($vtable$i62)) + 16|0);
  $13 = HEAP32[$vfn$i63>>2]|0;
  $call$i64 = (FUNCTION_TABLE_ii[$13 & 511]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i64;
  $vtable$i65 = HEAP32[$call$i>>2]|0;
  $vfn$i66 = ((($vtable$i65)) + 20|0);
  $14 = HEAP32[$vfn$i66>>2]|0;
  FUNCTION_TABLE_vii[$14 & 511]($ref$tmp11,$call$i);
  $__size_$i1$i$i$i69 = ((($__grp)) + 11|0);
  $15 = HEAP8[$__size_$i1$i$i$i69>>0]|0;
  $tobool$i$i$i$i70 = ($15<<24>>24)<(0);
  if ($tobool$i$i$i$i70) {
   $16 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i67>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($16,$ref$tmp$i$i$i67);
   $__size_$i2$i$i$i72 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i72>>2] = 0;
   $$pre$phi$i$iZ2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i68>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i68);
   HEAP8[$__size_$i1$i$i$i69>>0] = 0;
   $$pre$phi$i$iZ2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$ref$tmp11>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  $__i$0$i$i$i77 = 0;
  while(1) {
   $exitcond$i$i$i78 = ($__i$0$i$i$i77|0)==(3);
   if ($exitcond$i$i$i78) {
    break;
   }
   $arrayidx$i$i$i80 = (($ref$tmp11) + ($__i$0$i$i$i77<<2)|0);
   HEAP32[$arrayidx$i$i$i80>>2] = 0;
   $inc$i$i$i81 = (($__i$0$i$i$i77) + 1)|0;
   $__i$0$i$i$i77 = $inc$i$i$i81;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp11);
  $vtable$i83 = HEAP32[$call$i>>2]|0;
  $vfn$i84 = ((($vtable$i83)) + 24|0);
  $17 = HEAP32[$vfn$i84>>2]|0;
  FUNCTION_TABLE_vii[$17 & 511]($ref$tmp13,$call$i);
  $18 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i87 = ((($18)) + 3|0);
  $19 = HEAP8[$__size_$i1$i$i$i87>>0]|0;
  $tobool$i$i$i$i88 = ($19<<24>>24)<(0);
  if ($tobool$i$i$i$i88) {
   $20 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i85>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($20,$ref$tmp$i$i$i85);
   $__size_$i2$i$i$i90 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i90>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i86>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i86);
   HEAP8[$__size_$i1$i$i$i87>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sym,0);
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp13>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  $__i$0$i$i$i96 = 0;
  while(1) {
   $exitcond$i$i$i97 = ($__i$0$i$i$i96|0)==(3);
   if ($exitcond$i$i$i97) {
    break;
   }
   $arrayidx$i$i$i99 = (($ref$tmp13) + ($__i$0$i$i$i96<<2)|0);
   HEAP32[$arrayidx$i$i$i99>>2] = 0;
   $inc$i$i$i100 = (($__i$0$i$i$i96) + 1)|0;
   $__i$0$i$i$i96 = $inc$i$i$i100;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp13);
  $vtable$i103 = HEAP32[$call$i>>2]|0;
  $vfn$i104 = ((($vtable$i103)) + 36|0);
  $21 = HEAP32[$vfn$i104>>2]|0;
  $call$i105 = (FUNCTION_TABLE_ii[$21 & 511]($call$i)|0);
  $storemerge = $call$i105;
 } else {
  $call$i106 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21268)|0);
  if ($__neg) {
   $vtable$i107 = HEAP32[$call$i106>>2]|0;
   $vfn$i108 = ((($vtable$i107)) + 44|0);
   $22 = HEAP32[$vfn$i108>>2]|0;
   FUNCTION_TABLE_vii[$22 & 511]($ref$tmp21,$call$i106);
   $23 = HEAP32[$ref$tmp21>>2]|0;
   HEAP8[$__pat>>0]=$23&255;HEAP8[$__pat+1>>0]=($23>>8)&255;HEAP8[$__pat+2>>0]=($23>>16)&255;HEAP8[$__pat+3>>0]=$23>>24;
   $vtable$i109 = HEAP32[$call$i106>>2]|0;
   $vfn$i110 = ((($vtable$i109)) + 32|0);
   $24 = HEAP32[$vfn$i110>>2]|0;
   FUNCTION_TABLE_vii[$24 & 511]($ref$tmp22,$call$i106);
   $25 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i113 = ((($25)) + 3|0);
   $26 = HEAP8[$__size_$i1$i$i$i113>>0]|0;
   $tobool$i$i$i$i114 = ($26<<24>>24)<(0);
   if ($tobool$i$i$i$i114) {
    $27 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i111>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($27,$ref$tmp$i$i$i111);
    $__size_$i2$i$i$i116 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i116>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i112>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i112);
    HEAP8[$__size_$i1$i$i$i113>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sn,0);
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp22>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
   $__i$0$i$i$i122 = 0;
   while(1) {
    $exitcond$i$i$i123 = ($__i$0$i$i$i122|0)==(3);
    if ($exitcond$i$i$i123) {
     break;
    }
    $arrayidx$i$i$i125 = (($ref$tmp22) + ($__i$0$i$i$i122<<2)|0);
    HEAP32[$arrayidx$i$i$i125>>2] = 0;
    $inc$i$i$i126 = (($__i$0$i$i$i122) + 1)|0;
    $__i$0$i$i$i122 = $inc$i$i$i126;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp22);
  } else {
   $vtable$i129 = HEAP32[$call$i106>>2]|0;
   $vfn$i130 = ((($vtable$i129)) + 40|0);
   $28 = HEAP32[$vfn$i130>>2]|0;
   FUNCTION_TABLE_vii[$28 & 511]($ref$tmp25,$call$i106);
   $29 = HEAP32[$ref$tmp25>>2]|0;
   HEAP8[$__pat>>0]=$29&255;HEAP8[$__pat+1>>0]=($29>>8)&255;HEAP8[$__pat+2>>0]=($29>>16)&255;HEAP8[$__pat+3>>0]=$29>>24;
   $vtable$i131 = HEAP32[$call$i106>>2]|0;
   $vfn$i132 = ((($vtable$i131)) + 28|0);
   $30 = HEAP32[$vfn$i132>>2]|0;
   FUNCTION_TABLE_vii[$30 & 511]($ref$tmp26,$call$i106);
   $31 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i135 = ((($31)) + 3|0);
   $32 = HEAP8[$__size_$i1$i$i$i135>>0]|0;
   $tobool$i$i$i$i136 = ($32<<24>>24)<(0);
   if ($tobool$i$i$i$i136) {
    $33 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i133>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($33,$ref$tmp$i$i$i133);
    $__size_$i2$i$i$i138 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i138>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i134>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i134);
    HEAP8[$__size_$i1$i$i$i135>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sn,0);
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp26>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
   $__i$0$i$i$i144 = 0;
   while(1) {
    $exitcond$i$i$i145 = ($__i$0$i$i$i144|0)==(3);
    if ($exitcond$i$i$i145) {
     break;
    }
    $arrayidx$i$i$i147 = (($ref$tmp26) + ($__i$0$i$i$i144<<2)|0);
    HEAP32[$arrayidx$i$i$i147>>2] = 0;
    $inc$i$i$i148 = (($__i$0$i$i$i144) + 1)|0;
    $__i$0$i$i$i144 = $inc$i$i$i148;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp26);
  }
  $vtable$i151 = HEAP32[$call$i106>>2]|0;
  $vfn$i152 = ((($vtable$i151)) + 12|0);
  $34 = HEAP32[$vfn$i152>>2]|0;
  $call$i153 = (FUNCTION_TABLE_ii[$34 & 511]($call$i106)|0);
  HEAP32[$__dp>>2] = $call$i153;
  $vtable$i154 = HEAP32[$call$i106>>2]|0;
  $vfn$i155 = ((($vtable$i154)) + 16|0);
  $35 = HEAP32[$vfn$i155>>2]|0;
  $call$i156 = (FUNCTION_TABLE_ii[$35 & 511]($call$i106)|0);
  HEAP32[$__ts>>2] = $call$i156;
  $vtable$i157 = HEAP32[$call$i106>>2]|0;
  $vfn$i158 = ((($vtable$i157)) + 20|0);
  $36 = HEAP32[$vfn$i158>>2]|0;
  FUNCTION_TABLE_vii[$36 & 511]($ref$tmp31,$call$i106);
  $__size_$i1$i$i$i162 = ((($__grp)) + 11|0);
  $37 = HEAP8[$__size_$i1$i$i$i162>>0]|0;
  $tobool$i$i$i$i163 = ($37<<24>>24)<(0);
  if ($tobool$i$i$i$i163) {
   $38 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i159>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($38,$ref$tmp$i$i$i159);
   $__size_$i2$i$i$i165 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i165>>2] = 0;
   $$pre$phi$i$i170Z2D = $__grp;
  } else {
   HEAP8[$ref$tmp4$i$i$i160>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i160);
   HEAP8[$__size_$i1$i$i$i162>>0] = 0;
   $$pre$phi$i$i170Z2D = $__grp;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($__grp,0);
  ;HEAP32[$$pre$phi$i$i170Z2D>>2]=HEAP32[$ref$tmp31>>2]|0;HEAP32[$$pre$phi$i$i170Z2D+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$$pre$phi$i$i170Z2D+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  $__i$0$i$i$i173 = 0;
  while(1) {
   $exitcond$i$i$i174 = ($__i$0$i$i$i173|0)==(3);
   if ($exitcond$i$i$i174) {
    break;
   }
   $arrayidx$i$i$i176 = (($ref$tmp31) + ($__i$0$i$i$i173<<2)|0);
   HEAP32[$arrayidx$i$i$i176>>2] = 0;
   $inc$i$i$i177 = (($__i$0$i$i$i173) + 1)|0;
   $__i$0$i$i$i173 = $inc$i$i$i177;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp31);
  $vtable$i180 = HEAP32[$call$i106>>2]|0;
  $vfn$i181 = ((($vtable$i180)) + 24|0);
  $39 = HEAP32[$vfn$i181>>2]|0;
  FUNCTION_TABLE_vii[$39 & 511]($ref$tmp33,$call$i106);
  $40 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i184 = ((($40)) + 3|0);
  $41 = HEAP8[$__size_$i1$i$i$i184>>0]|0;
  $tobool$i$i$i$i185 = ($41<<24>>24)<(0);
  if ($tobool$i$i$i$i185) {
   $42 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i182>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($42,$ref$tmp$i$i$i182);
   $__size_$i2$i$i$i187 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i187>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i183>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i183);
   HEAP8[$__size_$i1$i$i$i184>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($__sym,0);
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp33>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  $__i$0$i$i$i193 = 0;
  while(1) {
   $exitcond$i$i$i194 = ($__i$0$i$i$i193|0)==(3);
   if ($exitcond$i$i$i194) {
    break;
   }
   $arrayidx$i$i$i196 = (($ref$tmp33) + ($__i$0$i$i$i193<<2)|0);
   HEAP32[$arrayidx$i$i$i196>>2] = 0;
   $inc$i$i$i197 = (($__i$0$i$i$i193) + 1)|0;
   $__i$0$i$i$i193 = $inc$i$i$i197;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp33);
  $vtable$i200 = HEAP32[$call$i106>>2]|0;
  $vfn$i201 = ((($vtable$i200)) + 36|0);
  $43 = HEAP32[$vfn$i201>>2]|0;
  $call$i202 = (FUNCTION_TABLE_ii[$43 & 511]($call$i106)|0);
  $storemerge = $call$i202;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre184 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0;
 var $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i102 = 0, $__size_$i$i$i111 = 0, $__size_$i$i$i132 = 0, $__size_$i2$i$i113 = 0, $__size_$i2$i$i134 = 0, $__size_$i3$i$i = 0;
 var $add$ptr$i = 0, $add$ptr$i$i177 = 0, $add$ptr$i$i178 = 0, $add$ptr$i161 = 0, $add$ptr$i85 = 0, $and = 0, $and101 = 0, $arrayidx = 0, $call$i = 0, $call$i110 = 0, $call$i121 = 0, $call$i131 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i144 = 0, $cmp$i118 = 0, $cmp$i139 = 0, $cmp1$i$i = 0, $cmp21 = 0;
 var $cmp27 = 0, $cmp30 = 0, $cmp31 = 0, $cmp40 = 0, $cmp48 = 0, $cmp60 = 0, $cmp61 = 0, $cmp65 = 0, $cmp71 = 0, $cmp89 = 0, $cond = 0, $cond$i = 0, $cond$i$i$i100 = 0, $cond$i$i$i128 = 0, $cond$i$i$i84 = 0, $cond$i$i107 = 0, $cond$i$i117 = 0, $cond$i$i138 = 0, $cond$i$i169175 = 0, $cond$i6$i = 0;
 var $cond$i92 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i105 = 0, $conv$i$i$i115 = 0, $conv$i$i$i136 = 0, $conv$i$i90 = 0, $conv57 = 0, $conv76 = 0, $dec = 0, $dec44 = 0, $exitcond = 0, $inc = 0, $inc83 = 0, $inc86 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i146 = 0, $incdec$ptr$i$i147 = 0;
 var $incdec$ptr$i$i73 = 0, $incdec$ptr18 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr26 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr42 = 0, $incdec$ptr42180 = 0, $incdec$ptr5 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $incdec$ptr82 = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i149 = 0, $spec$select = 0, $spec$select185 = 0, $tobool = 0, $tobool$i$i = 0;
 var $tobool$i$i$i103 = 0, $tobool$i$i$i112 = 0, $tobool$i$i$i133 = 0, $tobool$i$i88 = 0, $trunc = 0, $vfn$i = 0, $vfn$i109 = 0, $vfn$i120 = 0, $vfn$i130 = 0, $vtable$i = 0, $vtable$i108 = 0, $vtable$i119 = 0, $vtable$i129 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 8|0);
 $__size_$i$i$i111 = ((($0)) + 3|0);
 $__size_$i2$i$i113 = ((($__sn)) + 4|0);
 $1 = ((($__sym)) + 8|0);
 $__size_$i$i$i132 = ((($1)) + 3|0);
 $__size_$i2$i$i134 = ((($__sym)) + 4|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $cmp27 = ($__fd|0)>(0);
 $__size_$i$i$i102 = ((($__grp)) + 11|0);
 $__size_$i3$i$i = ((($__grp)) + 4|0);
 $__db$addr$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $conv = $4 << 24 >> 24;
  L4: do {
   switch ($conv|0) {
   case 0:  {
    $5 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $5;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 1:  {
    $6 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $6;
    $vtable$i108 = HEAP32[$__ct>>2]|0;
    $vfn$i109 = ((($vtable$i108)) + 44|0);
    $7 = HEAP32[$vfn$i109>>2]|0;
    $call$i110 = (FUNCTION_TABLE_iii[$7 & 511]($__ct,32)|0);
    $8 = HEAP32[$__me>>2]|0;
    $incdec$ptr = ((($8)) + 4|0);
    HEAP32[$__me>>2] = $incdec$ptr;
    HEAP32[$8>>2] = $call$i110;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 3:  {
    $9 = HEAP8[$__size_$i$i$i111>>0]|0;
    $tobool$i$i$i112 = ($9<<24>>24)<(0);
    $10 = HEAP32[$__size_$i2$i$i113>>2]|0;
    $conv$i$i$i115 = $9&255;
    $cond$i$i117 = $tobool$i$i$i112 ? $10 : $conv$i$i$i115;
    $cmp$i118 = ($cond$i$i117|0)==(0);
    if ($cmp$i118) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $11 = HEAP32[$__sn>>2]|0;
     $cond$i$i$i128 = $tobool$i$i$i112 ? $11 : $__sn;
     $12 = HEAP32[$cond$i$i$i128>>2]|0;
     $13 = HEAP32[$__me>>2]|0;
     $incdec$ptr5 = ((($13)) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr5;
     HEAP32[$13>>2] = $12;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 2:  {
    $14 = HEAP8[$__size_$i$i$i132>>0]|0;
    $tobool$i$i$i133 = ($14<<24>>24)<(0);
    $15 = HEAP32[$__size_$i2$i$i134>>2]|0;
    $conv$i$i$i136 = $14&255;
    $cond$i$i138 = $tobool$i$i$i133 ? $15 : $conv$i$i$i136;
    $cmp$i139 = ($cond$i$i138|0)==(0);
    $or$cond = $tobool | $cmp$i139;
    if ($or$cond) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $16 = HEAP32[$__sym>>2]|0;
     $cond$i$i169175 = $tobool$i$i$i133 ? $16 : $__sym;
     $add$ptr$i161 = (($cond$i$i169175) + ($cond$i$i138<<2)|0);
     $17 = HEAP32[$__me>>2]|0;
     $18 = $cond$i$i169175;$__result$addr$0$i$i143 = $17;
     while(1) {
      $cmp$i$i$i$i144 = ($18|0)==($add$ptr$i161|0);
      if ($cmp$i$i$i$i144) {
       break;
      }
      $19 = HEAP32[$18>>2]|0;
      HEAP32[$__result$addr$0$i$i143>>2] = $19;
      $incdec$ptr$i$i$i146 = ((($18)) + 4|0);
      $incdec$ptr$i$i147 = ((($__result$addr$0$i$i143)) + 4|0);
      $18 = $incdec$ptr$i$i$i146;$__result$addr$0$i$i143 = $incdec$ptr$i$i147;
     }
     $scevgep$i149 = (($17) + ($cond$i$i138<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i149;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 4:  {
    $20 = HEAP32[$__me>>2]|0;
    $incdec$ptr18 = ((($__db$addr$0)) + 4|0);
    $spec$select = $__neg ? $incdec$ptr18 : $__db$addr$0;
    $__d$0 = $spec$select;
    while(1) {
     $cmp21 = ($__d$0>>>0)<($__de>>>0);
     if (!($cmp21)) {
      break;
     }
     $21 = HEAP32[$__d$0>>2]|0;
     $vtable$i129 = HEAP32[$__ct>>2]|0;
     $vfn$i130 = ((($vtable$i129)) + 12|0);
     $22 = HEAP32[$vfn$i130>>2]|0;
     $call$i131 = (FUNCTION_TABLE_iiii[$22 & 511]($__ct,2048,$21)|0);
     if (!($call$i131)) {
      break;
     }
     $incdec$ptr26 = ((($__d$0)) + 4|0);
     $__d$0 = $incdec$ptr26;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;$__f$0 = $__fd;
     while(1) {
      $cmp30 = ($__d$1>>>0)>($spec$select>>>0);
      $cmp31 = ($__f$0|0)>(0);
      $23 = $cmp30 & $cmp31;
      if (!($23)) {
       break;
      }
      $incdec$ptr33 = ((($__d$1)) + -4|0);
      $24 = HEAP32[$incdec$ptr33>>2]|0;
      $25 = HEAP32[$__me>>2]|0;
      $incdec$ptr34 = ((($25)) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr34;
      HEAP32[$25>>2] = $24;
      $dec = (($__f$0) + -1)|0;
      $__d$1 = $incdec$ptr33;$__f$0 = $dec;
     }
     if ($cmp31) {
      $vtable$i119 = HEAP32[$__ct>>2]|0;
      $vfn$i120 = ((($vtable$i119)) + 44|0);
      $26 = HEAP32[$vfn$i120>>2]|0;
      $call$i121 = (FUNCTION_TABLE_iii[$26 & 511]($__ct,48)|0);
      $cond = $call$i121;
     } else {
      $cond = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $__f$1 = $__f$0;$incdec$ptr42180 = $__me$promoted;
     while(1) {
      $cmp40 = ($__f$1|0)>(0);
      $incdec$ptr42 = ((($incdec$ptr42180)) + 4|0);
      if (!($cmp40)) {
       break;
      }
      HEAP32[$incdec$ptr42180>>2] = $cond;
      $dec44 = (($__f$1) + -1)|0;
      $__f$1 = $dec44;$incdec$ptr42180 = $incdec$ptr42;
     }
     HEAP32[$__me>>2] = $incdec$ptr42;
     HEAP32[$incdec$ptr42180>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0;
    }
    $cmp48 = ($__d$2|0)==($spec$select|0);
    if ($cmp48) {
     $vtable$i = HEAP32[$__ct>>2]|0;
     $vfn$i = ((($vtable$i)) + 44|0);
     $27 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_iii[$27 & 511]($__ct,48)|0);
     $28 = HEAP32[$__me>>2]|0;
     $incdec$ptr51 = ((($28)) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr51;
     HEAP32[$28>>2] = $call$i;
     $40 = $incdec$ptr51;
    } else {
     $29 = HEAP8[$__size_$i$i$i102>>0]|0;
     $tobool$i$i$i103 = ($29<<24>>24)<(0);
     $30 = HEAP32[$__size_$i3$i$i>>2]|0;
     $conv$i$i$i105 = $29&255;
     $cond$i$i107 = $tobool$i$i$i103 ? $30 : $conv$i$i$i105;
     $cmp$i = ($cond$i$i107|0)==(0);
     if ($cmp$i) {
      $__gl$0$ph = -1;
     } else {
      $31 = HEAP32[$__grp>>2]|0;
      $cond$i$i$i100 = $tobool$i$i$i103 ? $31 : $__grp;
      $32 = HEAP8[$cond$i$i$i100>>0]|0;
      $conv57 = $32 << 24 >> 24;
      $__gl$0$ph = $conv57;
     }
     $__d$3 = $__d$2;$__gl$0 = $__gl$0$ph;$__ig$0 = 0;$__ng$0 = 0;
     while(1) {
      $cmp60 = ($__d$3|0)==($spec$select|0);
      if ($cmp60) {
       break;
      }
      $cmp61 = ($__ng$0|0)==($__gl$0|0);
      $33 = HEAP32[$__me>>2]|0;
      if ($cmp61) {
       $incdec$ptr63 = ((($33)) + 4|0);
       HEAP32[$__me>>2] = $incdec$ptr63;
       HEAP32[$33>>2] = $__ts;
       $inc = (($__ig$0) + 1)|0;
       $34 = HEAP8[$__size_$i$i$i102>>0]|0;
       $tobool$i$i88 = ($34<<24>>24)<(0);
       $35 = HEAP32[$__size_$i3$i$i>>2]|0;
       $conv$i$i90 = $34&255;
       $cond$i92 = $tobool$i$i88 ? $35 : $conv$i$i90;
       $cmp65 = ($inc>>>0)<($cond$i92>>>0);
       if ($cmp65) {
        $36 = HEAP32[$__grp>>2]|0;
        $cond$i$i$i84 = $tobool$i$i88 ? $36 : $__grp;
        $add$ptr$i85 = (($cond$i$i$i84) + ($inc)|0);
        $37 = HEAP8[$add$ptr$i85>>0]|0;
        $cmp71 = ($37<<24>>24)==(127);
        $conv76 = $37 << 24 >> 24;
        $spec$select185 = $cmp71 ? -1 : $conv76;
        $39 = $incdec$ptr63;$__gl$1 = $spec$select185;$__ig$1 = $inc;$__ng$1 = 0;
       } else {
        $39 = $incdec$ptr63;$__gl$1 = $__ng$0;$__ig$1 = $inc;$__ng$1 = 0;
       }
      } else {
       $39 = $33;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = ((($__d$3)) + -4|0);
      $38 = HEAP32[$incdec$ptr81>>2]|0;
      $incdec$ptr82 = ((($39)) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr82;
      HEAP32[$39>>2] = $38;
      $inc83 = (($__ng$1) + 1)|0;
      $__d$3 = $incdec$ptr81;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $inc83;
     }
     $$pre184 = HEAP32[$__me>>2]|0;
     $40 = $$pre184;
    }
    $cmp$i$i = ($20|0)==($40|0);
    if ($cmp$i$i) {
     $__db$addr$2 = $spec$select;
    } else {
     $__first$addr$0$i$i = $20;$__last$addr$0$i$i = $40;
     while(1) {
      $incdec$ptr$i$i73 = ((($__last$addr$0$i$i)) + -4|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i73>>>0);
      if (!($cmp1$i$i)) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $41 = HEAP32[$__first$addr$0$i$i>>2]|0;
      $42 = HEAP32[$incdec$ptr$i$i73>>2]|0;
      HEAP32[$__first$addr$0$i$i>>2] = $42;
      HEAP32[$incdec$ptr$i$i73>>2] = $41;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 4|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
   default: {
    $__db$addr$2 = $__db$addr$0;
   }
   }
  } while(0);
  $inc86 = (($__p$0) + 1)|0;
  $__db$addr$0 = $__db$addr$2;$__p$0 = $inc86;
 }
 $2 = HEAP8[$__size_$i$i$i111>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__size_$i2$i$i113>>2]|0;
 $conv$i$i = $2&255;
 $cond$i = $tobool$i$i ? $3 : $conv$i$i;
 $cmp89 = ($cond$i>>>0)>(1);
 if ($cmp89) {
  $43 = HEAP32[$__sn>>2]|0;
  $add$ptr$i$i177 = ((($43)) + 4|0);
  $add$ptr$i$i178 = $tobool$i$i ? $add$ptr$i$i177 : $__size_$i2$i$i113;
  $cond$i6$i = $tobool$i$i ? $43 : $__sn;
  $add$ptr$i = (($cond$i6$i) + ($cond$i<<2)|0);
  $44 = HEAP32[$__me>>2]|0;
  $45 = $add$ptr$i$i178;
  $46 = $add$ptr$i;
  $47 = (($46) - ($45))|0;
  $48 = $add$ptr$i$i178;$__result$addr$0$i$i = $44;
  while(1) {
   $cmp$i$i$i$i = ($48|0)==($add$ptr$i|0);
   if ($cmp$i$i$i$i) {
    break;
   }
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$__result$addr$0$i$i>>2] = $49;
   $incdec$ptr$i$i$i = ((($48)) + 4|0);
   $incdec$ptr$i$i = ((($__result$addr$0$i$i)) + 4|0);
   $48 = $incdec$ptr$i$i$i;$__result$addr$0$i$i = $incdec$ptr$i$i;
  }
  $50 = $47 >>> 2;
  $scevgep$i = (($44) + ($50<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $and101 = $__flags & 176;
 $trunc = $and101&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $51 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $51;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $__size_$i$i$i$i = 0, $call2 = 0, $cmp = 0, $cond$i$i$i = 0, $shr = 0, $spec$select = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i$i$i = ((($__nm)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__nm>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $2 : $__nm;
 $call2 = (_catopen($cond$i$i$i,1)|0);
 $3 = $call2;
 $cmp = ($call2|0)!=((-1)|0);
 $shr = $cmp&1;
 $spec$select = $3 >>> $shr;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i19 = 0, $__size_$i3$i = 0, $__wb$addr$0$i = 0, $add$ptr = 0, $add$ptr14 = 0, $arrayidx$i$i = 0;
 var $arrayidx$i$i14 = 0, $call13 = 0, $call8 = 0, $cmp = 0, $cmp$i = 0, $cmp$i30 = 0, $cond$i = 0, $cond$i$i$i25 = 0, $cond$i$i$i4149 = 0, $conv$i$i = 0, $exitcond$i$i = 0, $exitcond$i$i12 = 0, $inc$i$i = 0, $inc$i$i15 = 0, $incdec$ptr$i = 0, $incdec$ptr$i32 = 0, $shl = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i20 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__ndflt = sp;
 ;HEAP32[$__ndflt>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i$i$i = ((($__dflt)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$__dflt>>2]|0;
 $__size_$i3$i = ((($__dflt)) + 4|0);
 $2 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i$i$i4149 = $tobool$i$i$i$i ? $1 : $__dflt;
 $cond$i = $tobool$i$i$i$i ? $2 : $conv$i$i;
 $add$ptr = (($cond$i$i$i4149) + ($cond$i)|0);
 $__wb$addr$0$i = $cond$i$i$i4149;
 while(1) {
  $cmp$i30 = ($__wb$addr$0$i>>>0)<($add$ptr>>>0);
  if (!($cmp$i30)) {
   break;
  }
  $3 = HEAP8[$__wb$addr$0$i>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$3);
  $incdec$ptr$i32 = ((($__wb$addr$0$i)) + 1|0);
  $__wb$addr$0$i = $incdec$ptr$i32;
 }
 $cmp = ($__c|0)==(-1);
 $shl = $__c << 1;
 $4 = $shl;
 $5 = $cmp ? (-1) : $4;
 $__size_$i$i$i$i19 = ((($__ndflt)) + 11|0);
 $6 = HEAP8[$__size_$i$i$i$i19>>0]|0;
 $tobool$i$i$i$i20 = ($6<<24>>24)<(0);
 $7 = HEAP32[$__ndflt>>2]|0;
 $cond$i$i$i25 = $tobool$i$i$i$i20 ? $7 : $__ndflt;
 $call8 = (_catgets($5,$__set,$__msgid,$cond$i$i$i25)|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i11 = 0;
 while(1) {
  $exitcond$i$i12 = ($__i$0$i$i11|0)==(3);
  if ($exitcond$i$i12) {
   break;
  }
  $arrayidx$i$i14 = (($agg$result) + ($__i$0$i$i11<<2)|0);
  HEAP32[$arrayidx$i$i14>>2] = 0;
  $inc$i$i15 = (($__i$0$i$i11) + 1)|0;
  $__i$0$i$i11 = $inc$i$i15;
 }
 $call13 = (_strlen($call8)|0);
 $add$ptr14 = (($cond$i$i$i25) + ($call13)|0);
 $__nb$addr$0$i = $cond$i$i$i25;
 while(1) {
  $cmp$i = ($__nb$addr$0$i>>>0)<($add$ptr14>>>0);
  if (!($cmp$i)) {
   break;
  }
  $8 = HEAP8[$__nb$addr$0$i>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$8);
  $incdec$ptr$i = ((($__nb$addr$0$i)) + 1|0);
  $__nb$addr$0$i = $incdec$ptr$i;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;return;
}
function __ZNKSt3__28messagesIcE8do_closeEl($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $__size_$i$i$i$i = 0, $call2 = 0, $cmp = 0, $cond$i$i$i = 0, $shr = 0, $spec$select = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i$i$i = ((($__nm)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__nm>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $2 : $__nm;
 $call2 = (_catopen($cond$i$i$i,1)|0);
 $3 = $call2;
 $cmp = ($call2|0)!=((-1)|0);
 $shr = $cmp&1;
 $spec$select = $3 >>> $shr;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__bn$i = 0, $__bn$i37 = 0, $__buf$i = 0, $__buf$i36 = 0, $__i$0$i$i = 0, $__i$0$i$i21 = 0, $__mb$i = 0, $__mb$i35 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i51 = 0, $__r$0$i = 0, $__r$0$i40 = 0, $__shared_owners_$i$i$i$i = 0, $__shared_owners_$i$i$i$i19 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i27 = 0, $__size_$i2$i = 0;
 var $__wb$addr$0$i = 0, $__wn$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i38 = 0, $add$ptr14 = 0, $add$ptr5$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i24 = 0, $call$i = 0, $call$i46 = 0, $call13 = 0, $call8 = 0, $cmp = 0, $cmp$i = 0, $cmp$i41 = 0, $cmp2$i = 0, $cmp2$i42 = 0, $cmp3$i = 0, $cmp4$i = 0;
 var $cmp5$i = 0, $cmp6$i = 0, $cmp7$i = 0, $cmp7$i52 = 0, $cmp9$i = 0, $cond$i = 0, $cond$i$i$i1663 = 0, $cond$i$i$i33 = 0, $cond$i18 = 0, $conv$i$i = 0, $exitcond$i$i = 0, $exitcond$i$i22 = 0, $inc$i$i = 0, $inc$i$i25 = 0, $incdec$ptr$i = 0, $incdec$ptr$i55 = 0, $or$cond$i = 0, $or$cond$i47 = 0, $shl = 0, $sub$ptr$lhs$cast$i = 0;
 var $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $temp$lvalue = 0, $temp$lvalue9 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i28 = 0, $vfn$i = 0, $vfn$i45 = 0, $vtable$i = 0, $vtable$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__mb$i35 = sp + 216|0;
 $__buf$i36 = sp + 128|0;
 $__bn$i37 = sp + 212|0;
 $__wn$i = sp + 208|0;
 $__mb$i = sp + 200|0;
 $__buf$i = sp;
 $__bn$i = sp + 192|0;
 $__nn$i = sp + 188|0;
 $__ndflt = sp + 176|0;
 $temp$lvalue = sp + 168|0;
 $temp$lvalue9 = sp + 160|0;
 ;HEAP32[$__ndflt>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__shared_owners_$i$i$i$i = ((($temp$lvalue)) + 4|0);
 HEAP32[$__shared_owners_$i$i$i$i>>2] = 0;
 HEAP32[$temp$lvalue>>2] = (10172);
 $0 = ((($__dflt)) + 8|0);
 $__size_$i$i$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__dflt>>2]|0;
 $__size_$i2$i = ((($__dflt)) + 4|0);
 $3 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i = $1&255;
 $cond$i$i$i1663 = $tobool$i$i$i$i ? $2 : $__dflt;
 $cond$i18 = $tobool$i$i$i$i ? $3 : $conv$i$i;
 $add$ptr = (($cond$i$i$i1663) + ($cond$i18<<2)|0);
 $add$ptr$i38 = ((($__buf$i36)) + 32|0);
 $__r$0$i40 = 0;$__wb$addr$0$i = $cond$i$i$i1663;
 while(1) {
  $cmp$i41 = ($__wb$addr$0$i>>>0)<($add$ptr>>>0);
  $cmp2$i42 = ($__r$0$i40|0)!=(2);
  $4 = $cmp2$i42 & $cmp$i41;
  if (!($4)) {
   break;
  }
  HEAP32[$__wn$i>>2] = $__wb$addr$0$i;
  $vtable$i44 = HEAP32[$temp$lvalue>>2]|0;
  $vfn$i45 = ((($vtable$i44)) + 12|0);
  $5 = HEAP32[$vfn$i45>>2]|0;
  $call$i46 = (FUNCTION_TABLE_iiiiiiiii[$5 & 511]($temp$lvalue,$__mb$i35,$__wb$addr$0$i,$add$ptr,$__wn$i,$__buf$i36,$add$ptr$i38,$__bn$i37)|0);
  $cmp4$i = ($call$i46|0)==(2);
  $6 = HEAP32[$__wn$i>>2]|0;
  $cmp5$i = ($6|0)==($__wb$addr$0$i|0);
  $or$cond$i47 = $cmp4$i | $cmp5$i;
  if ($or$cond$i47) {
   label = 8;
   break;
  }
  $__p$0$i51 = $__buf$i36;
  while(1) {
   $7 = HEAP32[$__bn$i37>>2]|0;
   $cmp7$i52 = ($__p$0$i51>>>0)<($7>>>0);
   if (!($cmp7$i52)) {
    break;
   }
   $9 = HEAP8[$__p$0$i51>>0]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$9);
   $incdec$ptr$i55 = ((($__p$0$i51)) + 1|0);
   $__p$0$i51 = $incdec$ptr$i55;
  }
  $8 = HEAP32[$__wn$i>>2]|0;
  $__r$0$i40 = $call$i46;$__wb$addr$0$i = $8;
 }
 if ((label|0) == 8) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 __ZNSt3__26locale5facetD2Ev($temp$lvalue);
 $cmp = ($__c|0)==(-1);
 $shl = $__c << 1;
 $10 = $shl;
 $11 = $cmp ? (-1) : $10;
 $__size_$i$i$i$i27 = ((($__ndflt)) + 11|0);
 $12 = HEAP8[$__size_$i$i$i$i27>>0]|0;
 $tobool$i$i$i$i28 = ($12<<24>>24)<(0);
 $13 = HEAP32[$__ndflt>>2]|0;
 $cond$i$i$i33 = $tobool$i$i$i$i28 ? $13 : $__ndflt;
 $call8 = (_catgets($11,$__set,$__msgid,$cond$i$i$i33)|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i21 = 0;
 while(1) {
  $exitcond$i$i22 = ($__i$0$i$i21|0)==(3);
  if ($exitcond$i$i22) {
   break;
  }
  $arrayidx$i$i24 = (($agg$result) + ($__i$0$i$i21<<2)|0);
  HEAP32[$arrayidx$i$i24>>2] = 0;
  $inc$i$i25 = (($__i$0$i$i21) + 1)|0;
  $__i$0$i$i21 = $inc$i$i25;
 }
 $__shared_owners_$i$i$i$i19 = ((($temp$lvalue9)) + 4|0);
 HEAP32[$__shared_owners_$i$i$i$i19>>2] = 0;
 HEAP32[$temp$lvalue9>>2] = (10220);
 $call13 = (_strlen($call8)|0);
 $add$ptr14 = (($cond$i$i$i33) + ($call13)|0);
 $sub$ptr$lhs$cast$i = $add$ptr14;
 $add$ptr5$i = ((($__buf$i)) + 128|0);
 $__nb$addr$0$i = $cond$i$i$i33;$__r$0$i = 0;
 while(1) {
  $cmp$i = ($__nb$addr$0$i>>>0)<($add$ptr14>>>0);
  $cmp2$i = ($__r$0$i|0)!=(2);
  $14 = $cmp2$i & $cmp$i;
  if (!($14)) {
   label = 23;
   break;
  }
  HEAP32[$__nn$i>>2] = $__nb$addr$0$i;
  $vtable$i = HEAP32[$temp$lvalue9>>2]|0;
  $vfn$i = ((($vtable$i)) + 16|0);
  $15 = HEAP32[$vfn$i>>2]|0;
  $sub$ptr$rhs$cast$i = $__nb$addr$0$i;
  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
  $cmp3$i = ($sub$ptr$sub$i|0)>(32);
  $add$ptr$i = ((($__nb$addr$0$i)) + 32|0);
  $cond$i = $cmp3$i ? $add$ptr$i : $add$ptr14;
  $call$i = (FUNCTION_TABLE_iiiiiiiii[$15 & 511]($temp$lvalue9,$__mb$i,$__nb$addr$0$i,$cond$i,$__nn$i,$__buf$i,$add$ptr5$i,$__bn$i)|0);
  $cmp6$i = ($call$i|0)==(2);
  $16 = HEAP32[$__nn$i>>2]|0;
  $cmp7$i = ($16|0)==($__nb$addr$0$i|0);
  $or$cond$i = $cmp6$i | $cmp7$i;
  if ($or$cond$i) {
   label = 19;
   break;
  }
  $__p$0$i = $__buf$i;
  while(1) {
   $17 = HEAP32[$__bn$i>>2]|0;
   $cmp9$i = ($__p$0$i>>>0)<($17>>>0);
   if (!($cmp9$i)) {
    break;
   }
   $19 = HEAP32[$__p$0$i>>2]|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result,$19);
   $incdec$ptr$i = ((($__p$0$i)) + 4|0);
   $__p$0$i = $incdec$ptr$i;
  }
  $18 = HEAP32[$__nn$i>>2]|0;
  $__nb$addr$0$i = $18;$__r$0$i = $call$i;
 }
 if ((label|0) == 19) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 else if ((label|0) == 23) {
  __ZNSt3__26locale5facetD2Ev($temp$lvalue9);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__28messagesIwE8do_closeEl($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr = 0, $add$ptr103 = 0, $add$ptr177 = 0, $add$ptr46 = 0, $and = 0, $and152 = 0, $and156 = 0, $and161 = 0, $and164 = 0, $and168 = 0, $and172 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and86 = 0, $and91 = 0, $and94 = 0, $and98 = 0, $arrayidx116 = 0, $arrayidx118 = 0;
 var $arrayidx119 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx57 = 0, $arrayidx58 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0, $cmp107 = 0, $cmp112 = 0, $cmp12 = 0, $cmp13 = 0, $cmp135 = 0, $cmp144 = 0, $cmp15 = 0, $cmp153 = 0, $cmp157 = 0, $cmp174 = 0, $cmp18 = 0;
 var $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp43 = 0, $cmp49 = 0, $cmp5 = 0, $cmp54 = 0, $cmp62 = 0, $cmp71 = 0, $cmp79 = 0, $cmp87 = 0, $cmp9 = 0, $conv14 = 0, $conv151 = 0, $conv155 = 0, $conv33 = 0, $conv85 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0;
 var $frm_nxt$5 = 0, $inc = 0, $incdec$ptr = 0, $nchar32_t$0 = 0, $or = 0, $or$cond = 0, $or166 = 0, $or170 = 0, $or173 = 0, $or96 = 0, $or99 = 0, $shl = 0, $shl162 = 0, $shl165 = 0, $shl169 = 0, $shl92 = 0, $shl95 = 0, $spec$select = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast110 = 0;
 var $sub$ptr$rhs$cast110$le149 = 0, $sub$ptr$rhs$cast147 = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$sub = 0, $sub$ptr$sub111 = 0, $sub$ptr$sub148 = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub53 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $$pre = $frm_end;
 if ($tobool) {
  $frm_nxt$1$ph = $frm;
 } else {
  $sub$ptr$rhs$cast = $frm;
  $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$frm>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($frm)) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($frm)) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     $add$ptr = ((($frm)) + 3|0);
     $spec$select = $cmp9 ? $add$ptr : $frm;
     $frm_nxt$1$ph = $spec$select;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $frm_nxt$1 = $frm_nxt$1$ph;$nchar32_t$0 = 0;
 L7: while(1) {
  $cmp12 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $cmp13 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond = $cmp13 & $cmp12;
  if (!($or$cond)) {
   break;
  }
  $3 = HEAP8[$frm_nxt$1>>0]|0;
  $conv14 = $3&255;
  $cmp15 = ($3<<24>>24)>(-1);
  do {
   if ($cmp15) {
    $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp18) {
     break L7;
    }
    $incdec$ptr = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $incdec$ptr;
   } else {
    $cmp22 = ($3&255)<(194);
    if ($cmp22) {
     break L7;
    }
    $cmp26 = ($3&255)<(224);
    if ($cmp26) {
     $sub$ptr$rhs$cast29 = $frm_nxt$1;
     $sub$ptr$sub30 = (($$pre) - ($sub$ptr$rhs$cast29))|0;
     $cmp31 = ($sub$ptr$sub30|0)<(2);
     if ($cmp31) {
      break L7;
     }
     $arrayidx32 = ((($frm_nxt$1)) + 1|0);
     $4 = HEAP8[$arrayidx32>>0]|0;
     $conv33 = $4&255;
     $and34 = $conv33 & 192;
     $cmp35 = ($and34|0)==(128);
     if (!($cmp35)) {
      break L7;
     }
     $and39 = $conv14 << 6;
     $shl = $and39 & 1984;
     $and42 = $conv33 & 63;
     $or = $and42 | $shl;
     $cmp43 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp43) {
      break L7;
     }
     $add$ptr46 = ((($frm_nxt$1)) + 2|0);
     $frm_nxt$5 = $add$ptr46;
     break;
    }
    $cmp49 = ($3&255)<(240);
    if ($cmp49) {
     $sub$ptr$rhs$cast52 = $frm_nxt$1;
     $sub$ptr$sub53 = (($$pre) - ($sub$ptr$rhs$cast52))|0;
     $cmp54 = ($sub$ptr$sub53|0)<(3);
     if ($cmp54) {
      break L7;
     }
     $arrayidx57 = ((($frm_nxt$1)) + 1|0);
     $5 = HEAP8[$arrayidx57>>0]|0;
     $arrayidx58 = ((($frm_nxt$1)) + 2|0);
     $6 = HEAP8[$arrayidx58>>0]|0;
     switch ($3<<24>>24) {
     case -32:  {
      $7 = $5 & -32;
      $cmp62 = ($7<<24>>24)==(-96);
      if (!($cmp62)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $8 = $5 & -32;
      $cmp71 = ($8<<24>>24)==(-128);
      if (!($cmp71)) {
       break L7;
      }
      break;
     }
     default: {
      $9 = $5 & -64;
      $cmp79 = ($9<<24>>24)==(-128);
      if (!($cmp79)) {
       break L7;
      }
     }
     }
     $conv85 = $6&255;
     $and86 = $conv85 & 192;
     $cmp87 = ($and86|0)==(128);
     if (!($cmp87)) {
      break L7;
     }
     $and91 = $conv14 << 12;
     $shl92 = $and91 & 61440;
     $10 = $5 & 63;
     $and94 = $10&255;
     $shl95 = $and94 << 6;
     $or96 = $shl95 | $shl92;
     $and98 = $conv85 & 63;
     $or99 = $or96 | $and98;
     $cmp100 = ($or99>>>0)>($Maxcode>>>0);
     $add$ptr103 = ((($frm_nxt$1)) + 3|0);
     if ($cmp100) {
      break L7;
     } else {
      $frm_nxt$5 = $add$ptr103;
      break;
     }
    }
    $cmp107 = ($3&255)<(245);
    if (!($cmp107)) {
     break L7;
    }
    $sub$ptr$rhs$cast110 = $frm_nxt$1;
    $sub$ptr$sub111 = (($$pre) - ($sub$ptr$rhs$cast110))|0;
    $cmp112 = ($sub$ptr$sub111|0)<(4);
    if ($cmp112) {
     break L7;
    }
    $arrayidx116 = ((($frm_nxt$1)) + 1|0);
    $11 = HEAP8[$arrayidx116>>0]|0;
    $arrayidx118 = ((($frm_nxt$1)) + 2|0);
    $12 = HEAP8[$arrayidx118>>0]|0;
    $arrayidx119 = ((($frm_nxt$1)) + 3|0);
    $13 = HEAP8[$arrayidx119>>0]|0;
    switch ($3<<24>>24) {
    case -16:  {
     $$off = (($11) + 112)<<24>>24;
     $14 = ($$off&255)<(48);
     if (!($14)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $15 = $11 & -16;
     $cmp135 = ($15<<24>>24)==(-128);
     if (!($cmp135)) {
      break L7;
     }
     break;
    }
    default: {
     $16 = $11 & -64;
     $cmp144 = ($16<<24>>24)==(-128);
     if (!($cmp144)) {
      break L7;
     }
    }
    }
    $conv151 = $12&255;
    $and152 = $conv151 & 192;
    $cmp153 = ($and152|0)==(128);
    if (!($cmp153)) {
     break L7;
    }
    $conv155 = $13&255;
    $and156 = $conv155 & 192;
    $cmp157 = ($and156|0)==(128);
    if (!($cmp157)) {
     break L7;
    }
    $and161 = $conv14 << 18;
    $shl162 = $and161 & 1835008;
    $17 = $11 & 63;
    $and164 = $17&255;
    $shl165 = $and164 << 12;
    $or166 = $shl165 | $shl162;
    $and168 = $conv151 << 6;
    $shl169 = $and168 & 4032;
    $or170 = $or166 | $shl169;
    $and172 = $conv155 & 63;
    $or173 = $or170 | $and172;
    $cmp174 = ($or173>>>0)>($Maxcode>>>0);
    $add$ptr177 = ((($frm_nxt$1)) + 4|0);
    if ($cmp174) {
     break L7;
    } else {
     $frm_nxt$5 = $add$ptr177;
    }
   }
  } while(0);
  $inc = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar32_t$0 = $inc;
 }
 $sub$ptr$rhs$cast110$le149 = $frm_nxt$1;
 $sub$ptr$rhs$cast147 = $frm;
 $sub$ptr$sub148 = (($sub$ptr$rhs$cast110$le149) - ($sub$ptr$rhs$cast147))|0;
 return ($sub$ptr$sub148|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr168 = 0, $and = 0, $and143 = 0, $and146 = 0, $and152 = 0, $and155 = 0, $and159 = 0, $and163 = 0, $and37 = 0, $and42 = 0, $and44 = 0, $and81 = 0, $and87 = 0, $and90 = 0;
 var $and94 = 0, $arrayidx116 = 0, $arrayidx118 = 0, $arrayidx119 = 0, $arrayidx3 = 0, $arrayidx35 = 0, $arrayidx61 = 0, $arrayidx62 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp107 = 0, $cmp112 = 0, $cmp12 = 0, $cmp13 = 0, $cmp132 = 0, $cmp138 = 0, $cmp144 = 0, $cmp147 = 0, $cmp15 = 0;
 var $cmp165 = 0, $cmp18 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp45 = 0, $cmp5 = 0, $cmp52 = 0, $cmp57 = 0, $cmp66 = 0, $cmp72 = 0, $cmp77 = 0, $cmp82 = 0, $cmp9 = 0, $cmp96 = 0, $conv14 = 0, $conv142 = 0, $conv145 = 0, $conv36 = 0;
 var $conv80 = 0, $incdec$ptr184 = 0, $or = 0, $or157 = 0, $or161 = 0, $or164 = 0, $or164$sink = 0, $or92 = 0, $or95 = 0, $retval$9 = 0, $shl = 0, $shl153 = 0, $shl156 = 0, $shl160 = 0, $shl88 = 0, $shl91 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast110 = 0;
 var $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast55 = 0, $sub$ptr$sub = 0, $sub$ptr$sub111 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub56 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $$pre = $frm_end;
  $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $$pre;
 } else {
  $0 = HEAP32[$frm_nxt>>2]|0;
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $1 = HEAP8[$0>>0]|0;
   $cmp1 = ($1<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($0)) + 1|0);
    $2 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($2<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($0)) + 2|0);
     $3 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($3<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = ((($0)) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
      $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
     } else {
      $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
     }
    } else {
     $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
    }
   } else {
    $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
   }
  } else {
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  }
 }
 L9: while(1) {
  $4 = HEAP32[$frm_nxt>>2]|0;
  $cmp12 = ($4>>>0)<($frm_end>>>0);
  if (!($cmp12)) {
   $retval$9 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt>>2]|0;
  $cmp13 = ($5>>>0)<($to_end>>>0);
  if (!($cmp13)) {
   $retval$9 = 1;
   break;
  }
  $6 = HEAP8[$4>>0]|0;
  $conv14 = $6&255;
  $cmp15 = ($6<<24>>24)>(-1);
  do {
   if ($cmp15) {
    $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp18) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 1;$or164$sink = $conv14;
    }
   } else {
    $cmp23 = ($6&255)<(194);
    if ($cmp23) {
     $retval$9 = 2;
     break L9;
    }
    $cmp27 = ($6&255)<(224);
    if ($cmp27) {
     $sub$ptr$rhs$cast30 = $4;
     $sub$ptr$sub31 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast30))|0;
     $cmp32 = ($sub$ptr$sub31|0)<(2);
     if ($cmp32) {
      $retval$9 = 1;
      break L9;
     }
     $arrayidx35 = ((($4)) + 1|0);
     $7 = HEAP8[$arrayidx35>>0]|0;
     $conv36 = $7&255;
     $and37 = $conv36 & 192;
     $cmp38 = ($and37|0)==(128);
     if (!($cmp38)) {
      $retval$9 = 2;
      break L9;
     }
     $and42 = $conv14 << 6;
     $shl = $and42 & 1984;
     $and44 = $conv36 & 63;
     $or = $and44 | $shl;
     $cmp45 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp45) {
      $retval$9 = 2;
      break L9;
     } else {
      $$sink = 2;$or164$sink = $or;
      break;
     }
    }
    $cmp52 = ($6&255)<(240);
    if ($cmp52) {
     $sub$ptr$rhs$cast55 = $4;
     $sub$ptr$sub56 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast55))|0;
     $cmp57 = ($sub$ptr$sub56|0)<(3);
     if ($cmp57) {
      $retval$9 = 1;
      break L9;
     }
     $arrayidx61 = ((($4)) + 1|0);
     $8 = HEAP8[$arrayidx61>>0]|0;
     $arrayidx62 = ((($4)) + 2|0);
     $9 = HEAP8[$arrayidx62>>0]|0;
     switch ($6<<24>>24) {
     case -32:  {
      $10 = $8 & -32;
      $cmp66 = ($10<<24>>24)==(-96);
      if (!($cmp66)) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $11 = $8 & -32;
      $cmp72 = ($11<<24>>24)==(-128);
      if (!($cmp72)) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $12 = $8 & -64;
      $cmp77 = ($12<<24>>24)==(-128);
      if (!($cmp77)) {
       $retval$9 = 2;
       break L9;
      }
     }
     }
     $conv80 = $9&255;
     $and81 = $conv80 & 192;
     $cmp82 = ($and81|0)==(128);
     if (!($cmp82)) {
      $retval$9 = 2;
      break L9;
     }
     $and87 = $conv14 << 12;
     $shl88 = $and87 & 61440;
     $13 = $8 & 63;
     $and90 = $13&255;
     $shl91 = $and90 << 6;
     $or92 = $shl91 | $shl88;
     $and94 = $conv80 & 63;
     $or95 = $or92 | $and94;
     $cmp96 = ($or95>>>0)>($Maxcode>>>0);
     if ($cmp96) {
      $retval$9 = 2;
      break L9;
     } else {
      $$sink = 3;$or164$sink = $or95;
      break;
     }
    }
    $cmp107 = ($6&255)<(245);
    if (!($cmp107)) {
     $retval$9 = 2;
     break L9;
    }
    $sub$ptr$rhs$cast110 = $4;
    $sub$ptr$sub111 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast110))|0;
    $cmp112 = ($sub$ptr$sub111|0)<(4);
    if ($cmp112) {
     $retval$9 = 1;
     break L9;
    }
    $arrayidx116 = ((($4)) + 1|0);
    $14 = HEAP8[$arrayidx116>>0]|0;
    $arrayidx118 = ((($4)) + 2|0);
    $15 = HEAP8[$arrayidx118>>0]|0;
    $arrayidx119 = ((($4)) + 3|0);
    $16 = HEAP8[$arrayidx119>>0]|0;
    switch ($6<<24>>24) {
    case -16:  {
     $$off = (($14) + 112)<<24>>24;
     $17 = ($$off&255)<(48);
     if (!($17)) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $18 = $14 & -16;
     $cmp132 = ($18<<24>>24)==(-128);
     if (!($cmp132)) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $19 = $14 & -64;
     $cmp138 = ($19<<24>>24)==(-128);
     if (!($cmp138)) {
      $retval$9 = 2;
      break L9;
     }
    }
    }
    $conv142 = $15&255;
    $and143 = $conv142 & 192;
    $cmp144 = ($and143|0)==(128);
    if (!($cmp144)) {
     $retval$9 = 2;
     break L9;
    }
    $conv145 = $16&255;
    $and146 = $conv145 & 192;
    $cmp147 = ($and146|0)==(128);
    if (!($cmp147)) {
     $retval$9 = 2;
     break L9;
    }
    $and152 = $conv14 << 18;
    $shl153 = $and152 & 1835008;
    $20 = $14 & 63;
    $and155 = $20&255;
    $shl156 = $and155 << 12;
    $or157 = $shl156 | $shl153;
    $and159 = $conv142 << 6;
    $shl160 = $and159 & 4032;
    $or161 = $or157 | $shl160;
    $and163 = $conv145 & 63;
    $or164 = $or161 | $and163;
    $cmp165 = ($or164>>>0)>($Maxcode>>>0);
    if ($cmp165) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 4;$or164$sink = $or164;
    }
   }
  } while(0);
  HEAP32[$5>>2] = $or164$sink;
  $add$ptr168 = (($4) + ($$sink)|0);
  HEAP32[$frm_nxt>>2] = $add$ptr168;
  $21 = HEAP32[$to_nxt>>2]|0;
  $incdec$ptr184 = ((($21)) + 4|0);
  HEAP32[$to_nxt>>2] = $incdec$ptr184;
 }
 return ($retval$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$pre = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and30 = 0, $and47 = 0, $and52 = 0;
 var $and6 = 0, $and67 = 0, $and72 = 0, $and77 = 0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp20 = 0, $cmp25 = 0, $cmp35 = 0, $cmp40 = 0, $cmp5 = 0, $cmp60 = 0, $cmp7 = 0, $cmp8 = 0, $conv = 0, $conv28 = 0, $conv32 = 0, $conv45 = 0, $conv50 = 0;
 var $conv54 = 0, $conv65 = 0, $conv70 = 0, $conv75 = 0, $conv79 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr2 = 0, $incdec$ptr29 = 0, $incdec$ptr3 = 0, $incdec$ptr33 = 0, $incdec$ptr46 = 0, $incdec$ptr51 = 0, $incdec$ptr55 = 0, $incdec$ptr66 = 0, $incdec$ptr71 = 0, $incdec$ptr76 = 0, $incdec$ptr80 = 0, $incdec$ptr84 = 0, $or = 0;
 var $or$cond = 0, $or31 = 0, $or44 = 0, $or49 = 0, $or53 = 0, $or64 = 0, $or69 = 0, $or74 = 0, $or78 = 0, $retval$2 = 0, $shr = 0, $shr43 = 0, $shr48 = 0, $shr63 = 0, $shr68 = 0, $shr73 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast14 = 0, $sub$ptr$rhs$cast23 = 0, $sub$ptr$rhs$cast38 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub15 = 0, $sub$ptr$sub24 = 0, $sub$ptr$sub39 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 $$pre39 = $to_end;
 if ($tobool) {
  label = 4;
 } else {
  $sub$ptr$rhs$cast = $to;
  $sub$ptr$sub = (($$pre39) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)<(3);
  if ($cmp) {
   $retval$2 = 1;
  } else {
   $incdec$ptr = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr;
   HEAP8[$to>>0] = -17;
   $0 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr2 = ((($0)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr2;
   HEAP8[$0>>0] = -69;
   $1 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr3 = ((($1)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr3;
   HEAP8[$1>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $2 = $$pre;
   while(1) {
    $cmp5 = ($2>>>0)<($frm_end>>>0);
    if (!($cmp5)) {
     $retval$2 = 0;
     break L4;
    }
    $3 = HEAP32[$2>>2]|0;
    $and6 = $3 & -2048;
    $cmp7 = ($and6|0)==(55296);
    $cmp8 = ($3>>>0)>($Maxcode>>>0);
    $or$cond = $cmp8 | $cmp7;
    if ($or$cond) {
     $retval$2 = 2;
     break L4;
    }
    $cmp11 = ($3>>>0)<(128);
    do {
     if ($cmp11) {
      $4 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast14 = $4;
      $sub$ptr$sub15 = (($$pre39) - ($sub$ptr$rhs$cast14))|0;
      $cmp16 = ($sub$ptr$sub15|0)<(1);
      if ($cmp16) {
       $retval$2 = 1;
       break L4;
      }
      $conv = $3&255;
      $incdec$ptr19 = ((($4)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr19;
      HEAP8[$4>>0] = $conv;
     } else {
      $cmp20 = ($3>>>0)<(2048);
      if ($cmp20) {
       $5 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast23 = $5;
       $sub$ptr$sub24 = (($$pre39) - ($sub$ptr$rhs$cast23))|0;
       $cmp25 = ($sub$ptr$sub24|0)<(2);
       if ($cmp25) {
        $retval$2 = 1;
        break L4;
       }
       $shr = $3 >>> 6;
       $or = $shr | 192;
       $conv28 = $or&255;
       $incdec$ptr29 = ((($5)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr29;
       HEAP8[$5>>0] = $conv28;
       $and30 = $3 & 63;
       $or31 = $and30 | 128;
       $conv32 = $or31&255;
       $6 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr33 = ((($6)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr33;
       HEAP8[$6>>0] = $conv32;
       break;
      }
      $cmp35 = ($3>>>0)<(65536);
      $7 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast38 = $7;
      $sub$ptr$sub39 = (($$pre39) - ($sub$ptr$rhs$cast38))|0;
      if ($cmp35) {
       $cmp40 = ($sub$ptr$sub39|0)<(3);
       if ($cmp40) {
        $retval$2 = 1;
        break L4;
       }
       $shr43 = $3 >>> 12;
       $or44 = $shr43 | 224;
       $conv45 = $or44&255;
       $incdec$ptr46 = ((($7)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr46;
       HEAP8[$7>>0] = $conv45;
       $and47 = $3 >>> 6;
       $shr48 = $and47 & 63;
       $or49 = $shr48 | 128;
       $conv50 = $or49&255;
       $8 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr51 = ((($8)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr51;
       HEAP8[$8>>0] = $conv50;
       $and52 = $3 & 63;
       $or53 = $and52 | 128;
       $conv54 = $or53&255;
       $9 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr55 = ((($9)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr55;
       HEAP8[$9>>0] = $conv54;
       break;
      } else {
       $cmp60 = ($sub$ptr$sub39|0)<(4);
       if ($cmp60) {
        $retval$2 = 1;
        break L4;
       }
       $shr63 = $3 >>> 18;
       $or64 = $shr63 | 240;
       $conv65 = $or64&255;
       $incdec$ptr66 = ((($7)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr66;
       HEAP8[$7>>0] = $conv65;
       $and67 = $3 >>> 12;
       $shr68 = $and67 & 63;
       $or69 = $shr68 | 128;
       $conv70 = $or69&255;
       $10 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr71 = ((($10)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr71;
       HEAP8[$10>>0] = $conv70;
       $and72 = $3 >>> 6;
       $shr73 = $and72 & 63;
       $or74 = $shr73 | 128;
       $conv75 = $or74&255;
       $11 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr76 = ((($11)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr76;
       HEAP8[$11>>0] = $conv75;
       $and77 = $3 & 63;
       $or78 = $and77 | 128;
       $conv79 = $or78&255;
       $12 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr80 = ((($12)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr80;
       HEAP8[$12>>0] = $conv79;
       break;
      }
     }
    } while(0);
    $13 = HEAP32[$frm_nxt>>2]|0;
    $incdec$ptr84 = ((($13)) + 4|0);
    HEAP32[$frm_nxt>>2] = $incdec$ptr84;
    $2 = $incdec$ptr84;
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $$sroa$speculated = 0, $cmp$i$i$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp$i$i$i = ($sub$ptr$sub>>>0)<($mx>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $sub$ptr$sub : $mx;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre96 = 0, $$pre97 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i$i = 0, $call$i$i56 = 0, $call$i$i61 = 0, $call$i57 = 0, $call$i62 = 0, $cmp = 0;
 var $cmp13 = 0, $cmp17 = 0, $cmp2 = 0, $cmp28 = 0, $cmp31 = 0, $cmp35 = 0, $cmp4 = 0, $cmp41 = 0, $cmp5 = 0, $cmp53 = 0, $cmp55 = 0, $cmp68 = 0, $cond = 0, $dec = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph69 = 0;
 var $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr47 = 0, $incdec$ptr48 = 0, $incdec$ptr51 = 0, $incdec$ptr59 = 0, $n$0 = 0, $or$cond = 0, $p$0 = 0, $retval$1 = 0, $retval$3$ph = 0, $retval$4 = 0, $save_state = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast8 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub40 = 0, $sub$ptr$sub9 = 0, $tmp = 0, $to$addr$0 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i58 = 0, $tobool$i$i63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $cmp = ($fend$0|0)==($frm_end|0);
  if ($cmp) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $0 = HEAP32[$fend$0>>2]|0;
  $cmp2 = ($0|0)==(0);
  if ($cmp2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $incdec$ptr = ((($fend$0)) + 4|0);
  $fend$0 = $incdec$ptr;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = ((($this)) + 8|0);
 $fend$1 = $fend$0$lcssa;$frm$addr$0 = $frm;$to$addr$0 = $to;
 L6: while(1) {
  $cmp4 = ($frm$addr$0|0)==($frm_end|0);
  $cmp5 = ($to$addr$0|0)==($to_end|0);
  $or$cond = $cmp5 | $cmp4;
  if ($or$cond) {
   $24 = $frm$addr$0;
   label = 36;
   break;
  }
  $1 = $st;
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = $save_state;
  $8 = $7;
  HEAP32[$8>>2] = $3;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $sub$ptr$lhs$cast = $fend$1;
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $sub$ptr$div = $sub$ptr$sub >> 2;
  $sub$ptr$rhs$cast8 = $to$addr$0;
  $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
  $11 = HEAP32[$__l>>2]|0;
  $call$i$i = (___uselocale($11)|0);
  $call$i = (_wcsnrtombs($to$addr$0,$frm_nxt,$sub$ptr$div,$sub$ptr$sub9,$st)|0);
  $tobool$i$i = ($call$i$i|0)==(0|0);
  if (!($tobool$i$i)) {
   (___uselocale($call$i$i)|0);
  }
  switch ($call$i|0) {
  case -1:  {
   label = 10;
   break L6;
   break;
  }
  case 0:  {
   $retval$3$ph = 1;
   label = 33;
   break L6;
   break;
  }
  default: {
  }
  }
  $17 = HEAP32[$to_nxt>>2]|0;
  $add$ptr27 = (($17) + ($call$i)|0);
  HEAP32[$to_nxt>>2] = $add$ptr27;
  $cmp28 = ($add$ptr27|0)==($to_end|0);
  if ($cmp28) {
   label = 34;
   break;
  }
  $cmp31 = ($fend$1|0)==($frm_end|0);
  if ($cmp31) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $25 = $add$ptr27;$26 = $$pre;$fend$5$ph69 = $frm_end;
  } else {
   $18 = HEAP32[$__l>>2]|0;
   $call$i$i61 = (___uselocale($18)|0);
   $call$i62 = (_wcrtomb($tmp,0,$st)|0);
   $tobool$i$i63 = ($call$i$i61|0)==(0|0);
   if (!($tobool$i$i63)) {
    (___uselocale($call$i$i61)|0);
   }
   $cmp35 = ($call$i62|0)==(-1);
   if ($cmp35) {
    $retval$1 = 2;
    label = 32;
    break;
   }
   $19 = HEAP32[$to_nxt>>2]|0;
   $sub$ptr$sub40 = (($sub$ptr$lhs$cast7) - ($19))|0;
   $cmp41 = ($call$i62>>>0)>($sub$ptr$sub40>>>0);
   if ($cmp41) {
    $retval$1 = 1;
    label = 32;
    break;
   }
   $n$0 = $call$i62;$p$0 = $tmp;
   while(1) {
    $tobool = ($n$0|0)==(0);
    if ($tobool) {
     break;
    }
    $incdec$ptr47 = ((($p$0)) + 1|0);
    $21 = HEAP8[$p$0>>0]|0;
    $22 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr48 = ((($22)) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr48;
    HEAP8[$22>>0] = $21;
    $dec = (($n$0) + -1)|0;
    $n$0 = $dec;$p$0 = $incdec$ptr47;
   }
   $20 = HEAP32[$frm_nxt>>2]|0;
   $incdec$ptr51 = ((($20)) + 4|0);
   HEAP32[$frm_nxt>>2] = $incdec$ptr51;
   $fend$2 = $incdec$ptr51;
   while(1) {
    $cmp53 = ($fend$2|0)==($frm_end|0);
    if ($cmp53) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $23 = HEAP32[$fend$2>>2]|0;
    $cmp55 = ($23|0)==(0);
    if ($cmp55) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $incdec$ptr59 = ((($fend$2)) + 4|0);
    $fend$2 = $incdec$ptr59;
   }
   $$pre96 = HEAP32[$to_nxt>>2]|0;
   $25 = $$pre96;$26 = $incdec$ptr51;$fend$5$ph69 = $fend$2$lcssa;
  }
  $fend$1 = $fend$5$ph69;$frm$addr$0 = $26;$to$addr$0 = $25;
 }
 if ((label|0) == 10) {
  HEAP32[$to_nxt>>2] = $to$addr$0;
  $15 = $to$addr$0;$frm$addr$1 = $frm$addr$0;
  while(1) {
   $12 = HEAP32[$frm_nxt>>2]|0;
   $cmp13 = ($frm$addr$1|0)==($12|0);
   if ($cmp13) {
    break;
   }
   $13 = HEAP32[$frm$addr$1>>2]|0;
   $14 = HEAP32[$__l>>2]|0;
   $call$i$i56 = (___uselocale($14)|0);
   $call$i57 = (_wcrtomb($15,$13,$save_state)|0);
   $tobool$i$i58 = ($call$i$i56|0)==(0|0);
   if (!($tobool$i$i58)) {
    (___uselocale($call$i$i56)|0);
   }
   $cmp17 = ($call$i57|0)==(-1);
   if ($cmp17) {
    break;
   }
   $16 = HEAP32[$to_nxt>>2]|0;
   $add$ptr = (($16) + ($call$i57)|0);
   HEAP32[$to_nxt>>2] = $add$ptr;
   $incdec$ptr21 = ((($frm$addr$1)) + 4|0);
   $15 = $add$ptr;$frm$addr$1 = $incdec$ptr21;
  }
  HEAP32[$frm_nxt>>2] = $frm$addr$1;
  $retval$3$ph = 2;
  label = 33;
 }
 else if ((label|0) == 32) {
  $retval$3$ph = $retval$1;
  label = 33;
 }
 else if ((label|0) == 34) {
  $$pre97 = HEAP32[$frm_nxt>>2]|0;
  $24 = $$pre97;
  label = 36;
 }
 if ((label|0) == 33) {
  $retval$4 = $retval$3$ph;
 }
 else if ((label|0) == 36) {
  $cmp68 = ($24|0)!=($frm_end|0);
  $cond = $cmp68&1;
  $retval$4 = $cond;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre100 = 0, $$pre99 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr31 = 0, $call$i = 0, $call$i$i = 0, $call$i$i59 = 0, $call$i$i64 = 0, $call$i60 = 0, $call$i65 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp2 = 0, $cmp26 = 0;
 var $cmp32 = 0, $cmp35 = 0, $cmp39 = 0, $cmp4 = 0, $cmp45 = 0, $cmp48 = 0, $cmp5 = 0, $cmp58 = 0, $cond = 0, $cond59 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0;
 var $incdec$ptr24 = 0, $incdec$ptr42 = 0, $incdec$ptr43 = 0, $incdec$ptr52 = 0, $or$cond = 0, $retval$1$ph = 0, $retval$2 = 0, $save_state = 0, $storemerge = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$le = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast16 = 0, $sub$ptr$rhs$cast8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub17 = 0, $sub$ptr$sub9 = 0, $to$addr$0 = 0;
 var $tobool$i$i = 0, $tobool$i$i61 = 0, $tobool$i$i66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $cmp = ($fend$0|0)==($frm_end|0);
  if ($cmp) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $0 = HEAP8[$fend$0>>0]|0;
  $cmp2 = ($0<<24>>24)==(0);
  if ($cmp2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $incdec$ptr = ((($fend$0)) + 1|0);
  $fend$0 = $incdec$ptr;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = ((($this)) + 8|0);
 $fend$1 = $fend$0$lcssa;$frm$addr$0 = $frm;$to$addr$0 = $to;
 while(1) {
  $cmp4 = ($frm$addr$0|0)==($frm_end|0);
  $cmp5 = ($to$addr$0|0)==($to_end|0);
  $or$cond = $cmp5 | $cmp4;
  if ($or$cond) {
   $20 = $frm$addr$0;
   label = 33;
   break;
  }
  $1 = $st;
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = $save_state;
  $8 = $7;
  HEAP32[$8>>2] = $3;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $sub$ptr$lhs$cast = $fend$1;
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $sub$ptr$rhs$cast8 = $to$addr$0;
  $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
  $sub$ptr$div = $sub$ptr$sub9 >> 2;
  $11 = HEAP32[$__l>>2]|0;
  $call$i$i = (___uselocale($11)|0);
  $call$i = (_mbsnrtowcs($to$addr$0,$frm_nxt,$sub$ptr$sub,$sub$ptr$div,$st)|0);
  $tobool$i$i = ($call$i$i|0)==(0|0);
  if (!($tobool$i$i)) {
   (___uselocale($call$i$i)|0);
  }
  $cmp10 = ($call$i|0)==(-1);
  if ($cmp10) {
   label = 10;
   break;
  }
  $15 = HEAP32[$to_nxt>>2]|0;
  $add$ptr31 = (($15) + ($call$i<<2)|0);
  HEAP32[$to_nxt>>2] = $add$ptr31;
  $cmp32 = ($add$ptr31|0)==($to_end|0);
  if ($cmp32) {
   label = 30;
   break;
  }
  $cmp35 = ($fend$1|0)==($frm_end|0);
  $$pre = HEAP32[$frm_nxt>>2]|0;
  if ($cmp35) {
   $21 = $add$ptr31;$22 = $$pre;$fend$4$ph = $frm_end;
  } else {
   $16 = HEAP32[$__l>>2]|0;
   $call$i$i64 = (___uselocale($16)|0);
   $call$i65 = (_mbrtowc($add$ptr31,$$pre,1,$st)|0);
   $tobool$i$i66 = ($call$i$i64|0)==(0|0);
   if (!($tobool$i$i66)) {
    (___uselocale($call$i$i64)|0);
   }
   $cmp39 = ($call$i65|0)==(0);
   if (!($cmp39)) {
    $retval$1$ph = 2;
    label = 29;
    break;
   }
   $17 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr42 = ((($17)) + 4|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr42;
   $18 = HEAP32[$frm_nxt>>2]|0;
   $incdec$ptr43 = ((($18)) + 1|0);
   HEAP32[$frm_nxt>>2] = $incdec$ptr43;
   $fend$2 = $incdec$ptr43;
   while(1) {
    $cmp45 = ($fend$2|0)==($frm_end|0);
    if ($cmp45) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $19 = HEAP8[$fend$2>>0]|0;
    $cmp48 = ($19<<24>>24)==(0);
    if ($cmp48) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $incdec$ptr52 = ((($fend$2)) + 1|0);
    $fend$2 = $incdec$ptr52;
   }
   $$pre99 = HEAP32[$to_nxt>>2]|0;
   $21 = $$pre99;$22 = $incdec$ptr43;$fend$4$ph = $fend$2$lcssa;
  }
  $fend$1 = $fend$4$ph;$frm$addr$0 = $22;$to$addr$0 = $21;
 }
 do {
  if ((label|0) == 10) {
   $sub$ptr$lhs$cast$le = $fend$1;
   $frm$addr$1 = $frm$addr$0;$storemerge = $to$addr$0;
   L29: while(1) {
    HEAP32[$to_nxt>>2] = $storemerge;
    $12 = HEAP32[$frm_nxt>>2]|0;
    $cmp13 = ($frm$addr$1|0)==($12|0);
    if ($cmp13) {
     label = 19;
     break;
    }
    $sub$ptr$rhs$cast16 = $frm$addr$1;
    $sub$ptr$sub17 = (($sub$ptr$lhs$cast$le) - ($sub$ptr$rhs$cast16))|0;
    $13 = HEAP32[$__l>>2]|0;
    $call$i$i59 = (___uselocale($13)|0);
    $call$i60 = (_mbrtowc($storemerge,$frm$addr$1,$sub$ptr$sub17,$save_state)|0);
    $tobool$i$i61 = ($call$i$i59|0)==(0|0);
    if (!($tobool$i$i61)) {
     (___uselocale($call$i$i59)|0);
    }
    switch ($call$i60|0) {
    case -1:  {
     label = 15;
     break L29;
     break;
    }
    case -2:  {
     label = 16;
     break L29;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $call$i60;
    }
    }
    $incdec$ptr20 = (($frm$addr$1) + ($$sink)|0);
    $14 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr24 = ((($14)) + 4|0);
    $frm$addr$1 = $incdec$ptr20;$storemerge = $incdec$ptr24;
   }
   if ((label|0) == 15) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $retval$1$ph = 2;
    label = 29;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $retval$1$ph = 1;
    label = 29;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $cmp26 = ($frm$addr$1|0)!=($frm_end|0);
    $cond = $cmp26&1;
    $retval$1$ph = $cond;
    label = 29;
    break;
   }
  }
  else if ((label|0) == 30) {
   $$pre100 = HEAP32[$frm_nxt>>2]|0;
   $20 = $$pre100;
   label = 33;
  }
 } while(0);
 if ((label|0) == 29) {
  $retval$2 = $retval$1$ph;
 }
 else if ((label|0) == 33) {
  $cmp58 = ($20|0)!=($frm_end|0);
  $cond59 = $cmp58&1;
  $retval$2 = $cond59;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $cmp3 = 0, $dec = 0, $dec8 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $n$0 = 0, $p$0 = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tmp = 0;
 var $tobool = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $call$i$i = (___uselocale($0)|0);
 $call$i = (_wcrtomb($tmp,0,$st)|0);
 $tobool$i$i = ($call$i$i|0)==(0|0);
 if (!($tobool$i$i)) {
  (___uselocale($call$i$i)|0);
 }
 $1 = (($call$i) + 1)|0;
 $2 = ($1>>>0)<(2);
 L4: do {
  if ($2) {
   $retval$0 = 2;
  } else {
   $dec = (($call$i) + -1)|0;
   $3 = HEAP32[$to_nxt>>2]|0;
   $sub$ptr$lhs$cast = $to_end;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($3))|0;
   $cmp3 = ($dec>>>0)>($sub$ptr$sub>>>0);
   if ($cmp3) {
    $retval$0 = 1;
   } else {
    $n$0 = $dec;$p$0 = $tmp;
    while(1) {
     $tobool = ($n$0|0)==(0);
     if ($tobool) {
      $retval$0 = 0;
      break L4;
     }
     $incdec$ptr = ((($p$0)) + 1|0);
     $4 = HEAP8[$p$0>>0]|0;
     $5 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr7 = ((($5)) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr7;
     HEAP8[$5>>0] = $4;
     $dec8 = (($n$0) + -1)|0;
     $n$0 = $dec8;$p$0 = $incdec$ptr;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $call$i$i1 = 0, $call$i2 = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $retval$0 = 0, $spec$select = 0, $tobool$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $call$i$i = (___uselocale($0)|0);
 $call$i = (_mbtowc(0,0,4)|0);
 $tobool$i$i = ($call$i$i|0)==(0|0);
 if (!($tobool$i$i)) {
  (___uselocale($call$i$i)|0);
 }
 $cmp = ($call$i|0)==(0);
 if ($cmp) {
  $1 = HEAP32[$__l>>2]|0;
  $cmp3 = ($1|0)==(0|0);
  if ($cmp3) {
   $retval$0 = 1;
  } else {
   $call$i$i1 = (___uselocale($1)|0);
   $call$i2 = (___ctype_get_mb_cur_max()|0);
   $tobool$i$i3 = ($call$i$i1|0)==(0|0);
   if (!($tobool$i$i3)) {
    (___uselocale($call$i$i1)|0);
   }
   $cmp6 = ($call$i2|0)==(1);
   $spec$select = $cmp6&1;
   return ($spec$select|0);
  }
 } else {
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$sink = 0, $0 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $cmp = 0, $cmp2 = 0, $frm$addr$0 = 0, $inc4 = 0, $incdec$ptr = 0, $nbytes$0 = 0, $nbytes$1 = 0, $nwchar_t$0 = 0, $or$cond = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $frm_end;
 $__l = ((($this)) + 8|0);
 $frm$addr$0 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 L1: while(1) {
  $cmp = ($nwchar_t$0>>>0)>=($mx>>>0);
  $cmp2 = ($frm$addr$0|0)==($frm_end|0);
  $or$cond = $cmp2 | $cmp;
  if ($or$cond) {
   break;
  }
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $0 = HEAP32[$__l>>2]|0;
  $call$i$i = (___uselocale($0)|0);
  $call$i = (_mbrlen($frm$addr$0,$sub$ptr$sub,$st)|0);
  $tobool$i$i = ($call$i$i|0)==(0|0);
  if (!($tobool$i$i)) {
   (___uselocale($call$i$i)|0);
  }
  switch ($call$i|0) {
  case -2: case -1:  {
   break L1;
   break;
  }
  case 0:  {
   $$sink = 1;
   break;
  }
  default: {
   $$sink = $call$i;
  }
  }
  $incdec$ptr = (($frm$addr$0) + ($$sink)|0);
  $nbytes$1 = (($$sink) + ($nbytes$0))|0;
  $inc4 = (($nwchar_t$0) + 1)|0;
  $frm$addr$0 = $incdec$ptr;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $inc4;
 }
 return ($nbytes$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $cmp = 0, $cond = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $cond = 1;
 } else {
  $call$i$i = (___uselocale($0)|0);
  $call$i = (___ctype_get_mb_cur_max()|0);
  $tobool$i$i = ($call$i$i|0)==(0|0);
  if ($tobool$i$i) {
   $cond = $call$i;
  } else {
   (___uselocale($call$i$i)|0);
   $cond = $call$i;
  }
 }
 return ($cond|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__l = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10268);
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 $cmp = ($0|0)==($call|0);
 if (!($cmp)) {
  $1 = HEAP32[$__l>>2]|0;
  _freelocale($1);
 }
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr105 = 0, $add$ptr183 = 0, $add$ptr48 = 0, $add176 = 0, $add179 = 0, $and = 0, $and100 = 0, $and159 = 0, $and163 = 0, $and168 = 0, $and171 = 0, $and174 = 0, $and178 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and88 = 0, $and93 = 0;
 var $and96 = 0, $arrayidx123 = 0, $arrayidx125 = 0, $arrayidx126 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx59 = 0, $arrayidx60 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp102 = 0, $cmp112 = 0, $cmp117 = 0, $cmp119 = 0, $cmp12 = 0, $cmp13 = 0, $cmp142 = 0, $cmp15 = 0, $cmp151 = 0;
 var $cmp160 = 0, $cmp164 = 0, $cmp180 = 0, $cmp19 = 0, $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp45 = 0, $cmp5 = 0, $cmp51 = 0, $cmp56 = 0, $cmp64 = 0, $cmp73 = 0, $cmp81 = 0, $cmp89 = 0, $cmp9 = 0, $conv14 = 0, $conv158 = 0, $conv162 = 0;
 var $conv33 = 0, $conv87 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0, $frm_nxt$5 = 0, $inc = 0, $inc198 = 0, $incdec$ptr = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0, $or = 0, $or$cond = 0, $or$cond77 = 0, $or101 = 0, $or98 = 0, $shl = 0, $shl169 = 0, $shl172 = 0, $shl175 = 0, $shl94 = 0;
 var $shl97 = 0, $spec$select = 0, $sub = 0, $sub$ptr$lhs$cast20185 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast115 = 0, $sub$ptr$rhs$cast20286 = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast54 = 0, $sub$ptr$sub = 0, $sub$ptr$sub116 = 0, $sub$ptr$sub20387 = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub55 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $$pre = $frm_end;
 if ($tobool) {
  $frm_nxt$1$ph = $frm;
 } else {
  $sub$ptr$rhs$cast = $frm;
  $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $0 = HEAP8[$frm>>0]|0;
   $cmp1 = ($0<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($frm)) + 1|0);
    $1 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($1<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($frm)) + 2|0);
     $2 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($2<<24>>24)==(-65);
     $add$ptr = ((($frm)) + 3|0);
     $spec$select = $cmp9 ? $add$ptr : $frm;
     $frm_nxt$1$ph = $spec$select;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $frm_nxt$1 = $frm_nxt$1$ph;$nchar16_t$0 = 0;
 L7: while(1) {
  $cmp12 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $cmp13 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond = $cmp13 & $cmp12;
  if (!($or$cond)) {
   break;
  }
  $3 = HEAP8[$frm_nxt$1>>0]|0;
  $conv14 = $3&255;
  $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
  if ($cmp15) {
   break;
  }
  $cmp19 = ($3<<24>>24)>(-1);
  do {
   if ($cmp19) {
    $incdec$ptr = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $incdec$ptr;$nchar16_t$2 = $nchar16_t$0;
   } else {
    $cmp22 = ($3&255)<(194);
    if ($cmp22) {
     break L7;
    }
    $cmp26 = ($3&255)<(224);
    if ($cmp26) {
     $sub$ptr$rhs$cast29 = $frm_nxt$1;
     $sub$ptr$sub30 = (($$pre) - ($sub$ptr$rhs$cast29))|0;
     $cmp31 = ($sub$ptr$sub30|0)<(2);
     if ($cmp31) {
      break L7;
     }
     $arrayidx32 = ((($frm_nxt$1)) + 1|0);
     $4 = HEAP8[$arrayidx32>>0]|0;
     $conv33 = $4&255;
     $and34 = $conv33 & 192;
     $cmp35 = ($and34|0)==(128);
     if (!($cmp35)) {
      break L7;
     }
     $and39 = $conv14 << 6;
     $shl = $and39 & 1984;
     $and42 = $conv33 & 63;
     $or = $and42 | $shl;
     $cmp45 = ($or>>>0)>($Maxcode>>>0);
     $add$ptr48 = ((($frm_nxt$1)) + 2|0);
     if ($cmp45) {
      break L7;
     } else {
      $frm_nxt$5 = $add$ptr48;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $cmp51 = ($3&255)<(240);
    if ($cmp51) {
     $sub$ptr$rhs$cast54 = $frm_nxt$1;
     $sub$ptr$sub55 = (($$pre) - ($sub$ptr$rhs$cast54))|0;
     $cmp56 = ($sub$ptr$sub55|0)<(3);
     if ($cmp56) {
      break L7;
     }
     $arrayidx59 = ((($frm_nxt$1)) + 1|0);
     $5 = HEAP8[$arrayidx59>>0]|0;
     $arrayidx60 = ((($frm_nxt$1)) + 2|0);
     $6 = HEAP8[$arrayidx60>>0]|0;
     switch ($3<<24>>24) {
     case -32:  {
      $7 = $5 & -32;
      $cmp64 = ($7<<24>>24)==(-96);
      if (!($cmp64)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $8 = $5 & -32;
      $cmp73 = ($8<<24>>24)==(-128);
      if (!($cmp73)) {
       break L7;
      }
      break;
     }
     default: {
      $9 = $5 & -64;
      $cmp81 = ($9<<24>>24)==(-128);
      if (!($cmp81)) {
       break L7;
      }
     }
     }
     $conv87 = $6&255;
     $and88 = $conv87 & 192;
     $cmp89 = ($and88|0)==(128);
     if (!($cmp89)) {
      break L7;
     }
     $and93 = $conv14 << 12;
     $shl94 = $and93 & 61440;
     $10 = $5 & 63;
     $and96 = $10&255;
     $shl97 = $and96 << 6;
     $or98 = $shl97 | $shl94;
     $and100 = $conv87 & 63;
     $or101 = $or98 | $and100;
     $cmp102 = ($or101>>>0)>($Maxcode>>>0);
     $add$ptr105 = ((($frm_nxt$1)) + 3|0);
     if ($cmp102) {
      break L7;
     } else {
      $frm_nxt$5 = $add$ptr105;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $cmp112 = ($3&255)<(245);
    if (!($cmp112)) {
     break L7;
    }
    $sub$ptr$rhs$cast115 = $frm_nxt$1;
    $sub$ptr$sub116 = (($$pre) - ($sub$ptr$rhs$cast115))|0;
    $cmp117 = ($sub$ptr$sub116|0)<(4);
    $sub = (($mx) - ($nchar16_t$0))|0;
    $cmp119 = ($sub>>>0)<(2);
    $or$cond77 = $cmp119 | $cmp117;
    if ($or$cond77) {
     break L7;
    }
    $arrayidx123 = ((($frm_nxt$1)) + 1|0);
    $11 = HEAP8[$arrayidx123>>0]|0;
    $arrayidx125 = ((($frm_nxt$1)) + 2|0);
    $12 = HEAP8[$arrayidx125>>0]|0;
    $arrayidx126 = ((($frm_nxt$1)) + 3|0);
    $13 = HEAP8[$arrayidx126>>0]|0;
    switch ($3<<24>>24) {
    case -16:  {
     $$off = (($11) + 112)<<24>>24;
     $14 = ($$off&255)<(48);
     if (!($14)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $15 = $11 & -16;
     $cmp142 = ($15<<24>>24)==(-128);
     if (!($cmp142)) {
      break L7;
     }
     break;
    }
    default: {
     $16 = $11 & -64;
     $cmp151 = ($16<<24>>24)==(-128);
     if (!($cmp151)) {
      break L7;
     }
    }
    }
    $conv158 = $12&255;
    $and159 = $conv158 & 192;
    $cmp160 = ($and159|0)==(128);
    if (!($cmp160)) {
     break L7;
    }
    $conv162 = $13&255;
    $and163 = $conv162 & 192;
    $cmp164 = ($and163|0)==(128);
    if (!($cmp164)) {
     break L7;
    }
    $and168 = $conv14 << 18;
    $shl169 = $and168 & 1835008;
    $17 = $11 & 63;
    $and171 = $17&255;
    $shl172 = $and171 << 12;
    $add = $shl172 | $shl169;
    $and174 = $conv158 << 6;
    $shl175 = $and174 & 4032;
    $add176 = $add | $shl175;
    $and178 = $conv162 & 63;
    $add179 = $add176 | $and178;
    $cmp180 = ($add179>>>0)>($Maxcode>>>0);
    $inc = (($nchar16_t$0) + 1)|0;
    $add$ptr183 = ((($frm_nxt$1)) + 4|0);
    if ($cmp180) {
     break L7;
    } else {
     $frm_nxt$5 = $add$ptr183;$nchar16_t$2 = $inc;
    }
   }
  } while(0);
  $inc198 = (($nchar16_t$2) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar16_t$0 = $inc198;
 }
 $sub$ptr$lhs$cast20185 = $frm_nxt$1;
 $sub$ptr$rhs$cast20286 = $frm;
 $sub$ptr$sub20387 = (($sub$ptr$lhs$cast20185) - ($sub$ptr$rhs$cast20286))|0;
 return ($sub$ptr$sub20387|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr103 = 0, $add$ptr202 = 0, $add$ptr202$sink = 0, $add$ptr50 = 0, $add169 = 0, $add172 = 0, $and = 0, $and147 = 0, $and150 = 0, $and161 = 0, $and164 = 0, $and167 = 0;
 var $and171 = 0, $and180 = 0, $and185 = 0, $and189 = 0, $and37 = 0, $and42 = 0, $and44 = 0, $and83 = 0, $and89 = 0, $and92 = 0, $and96 = 0, $arrayidx120 = 0, $arrayidx122 = 0, $arrayidx123 = 0, $arrayidx3 = 0, $arrayidx35 = 0, $arrayidx63 = 0, $arrayidx64 = 0, $arrayidx7 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp100 = 0, $cmp111 = 0, $cmp116 = 0, $cmp12 = 0, $cmp13 = 0, $cmp136 = 0, $cmp142 = 0, $cmp148 = 0, $cmp15 = 0, $cmp151 = 0, $cmp157 = 0, $cmp173 = 0, $cmp19 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp47 = 0, $cmp5 = 0;
 var $cmp54 = 0, $cmp59 = 0, $cmp68 = 0, $cmp74 = 0, $cmp79 = 0, $cmp84 = 0, $cmp9 = 0, $conv14 = 0, $conv146 = 0, $conv149 = 0, $conv163 = 0, $conv192 = 0, $conv200 = 0, $conv21 = 0, $conv36 = 0, $conv45 = 0, $conv82 = 0, $conv98 = 0, $conv99 = 0, $incdec$ptr = 0;
 var $incdec$ptr201 = 0, $incdec$ptr217 = 0, $or = 0, $or181 = 0, $or183 = 0, $or187 = 0, $or191 = 0, $or196 = 0, $or199 = 0, $or94 = 0, $or97 = 0, $retval$8 = 0, $shl = 0, $shl162 = 0, $shl165 = 0, $shl168 = 0, $shl178 = 0, $shl182 = 0, $shl186 = 0, $shl195 = 0;
 var $shl93 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast154 = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast114 = 0, $sub$ptr$rhs$cast155 = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$rhs$cast57 = 0, $sub$ptr$sub = 0, $sub$ptr$sub115 = 0, $sub$ptr$sub156 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub58 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $$pre = $frm_end;
  $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $$pre;
 } else {
  $0 = HEAP32[$frm_nxt>>2]|0;
  $sub$ptr$lhs$cast = $frm_end;
  $sub$ptr$rhs$cast = $0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $1 = HEAP8[$0>>0]|0;
   $cmp1 = ($1<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($0)) + 1|0);
    $2 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($2<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($0)) + 2|0);
     $3 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($3<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = ((($0)) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
      $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
     } else {
      $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
     }
    } else {
     $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
    }
   } else {
    $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
   }
  } else {
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  }
 }
 $sub$ptr$lhs$cast154 = $to_end;
 L9: while(1) {
  $4 = HEAP32[$frm_nxt>>2]|0;
  $cmp12 = ($4>>>0)<($frm_end>>>0);
  if (!($cmp12)) {
   $retval$8 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt>>2]|0;
  $cmp13 = ($5>>>0)<($to_end>>>0);
  if (!($cmp13)) {
   $retval$8 = 1;
   break;
  }
  $6 = HEAP8[$4>>0]|0;
  $conv14 = $6&255;
  $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
  if ($cmp15) {
   $retval$8 = 2;
   break;
  }
  $cmp19 = ($6<<24>>24)>(-1);
  do {
   if ($cmp19) {
    $conv21 = $6&255;
    HEAP16[$5>>1] = $conv21;
    $incdec$ptr = ((($4)) + 1|0);
    $add$ptr202$sink = $incdec$ptr;
   } else {
    $cmp23 = ($6&255)<(194);
    if ($cmp23) {
     $retval$8 = 2;
     break L9;
    }
    $cmp27 = ($6&255)<(224);
    if ($cmp27) {
     $sub$ptr$rhs$cast30 = $4;
     $sub$ptr$sub31 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast30))|0;
     $cmp32 = ($sub$ptr$sub31|0)<(2);
     if ($cmp32) {
      $retval$8 = 1;
      break L9;
     }
     $arrayidx35 = ((($4)) + 1|0);
     $7 = HEAP8[$arrayidx35>>0]|0;
     $conv36 = $7&255;
     $and37 = $conv36 & 192;
     $cmp38 = ($and37|0)==(128);
     if (!($cmp38)) {
      $retval$8 = 2;
      break L9;
     }
     $and42 = $conv14 << 6;
     $shl = $and42 & 1984;
     $and44 = $conv36 & 63;
     $or = $and44 | $shl;
     $cmp47 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp47) {
      $retval$8 = 2;
      break L9;
     }
     $conv45 = $or&65535;
     HEAP16[$5>>1] = $conv45;
     $add$ptr50 = ((($4)) + 2|0);
     $add$ptr202$sink = $add$ptr50;
     break;
    }
    $cmp54 = ($6&255)<(240);
    if ($cmp54) {
     $sub$ptr$rhs$cast57 = $4;
     $sub$ptr$sub58 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast57))|0;
     $cmp59 = ($sub$ptr$sub58|0)<(3);
     if ($cmp59) {
      $retval$8 = 1;
      break L9;
     }
     $arrayidx63 = ((($4)) + 1|0);
     $8 = HEAP8[$arrayidx63>>0]|0;
     $arrayidx64 = ((($4)) + 2|0);
     $9 = HEAP8[$arrayidx64>>0]|0;
     switch ($6<<24>>24) {
     case -32:  {
      $10 = $8 & -32;
      $cmp68 = ($10<<24>>24)==(-96);
      if (!($cmp68)) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $11 = $8 & -32;
      $cmp74 = ($11<<24>>24)==(-128);
      if (!($cmp74)) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $12 = $8 & -64;
      $cmp79 = ($12<<24>>24)==(-128);
      if (!($cmp79)) {
       $retval$8 = 2;
       break L9;
      }
     }
     }
     $conv82 = $9&255;
     $and83 = $conv82 & 192;
     $cmp84 = ($and83|0)==(128);
     if (!($cmp84)) {
      $retval$8 = 2;
      break L9;
     }
     $and89 = $conv14 << 12;
     $13 = $8 & 63;
     $and92 = $13&255;
     $shl93 = $and92 << 6;
     $or94 = $shl93 | $and89;
     $and96 = $conv82 & 63;
     $or97 = $or94 | $and96;
     $conv99 = $or97 & 65535;
     $cmp100 = ($conv99>>>0)>($Maxcode>>>0);
     if ($cmp100) {
      $retval$8 = 2;
      break L9;
     }
     $conv98 = $or97&65535;
     HEAP16[$5>>1] = $conv98;
     $add$ptr103 = ((($4)) + 3|0);
     $add$ptr202$sink = $add$ptr103;
     break;
    }
    $cmp111 = ($6&255)<(245);
    if (!($cmp111)) {
     $retval$8 = 2;
     break L9;
    }
    $sub$ptr$rhs$cast114 = $4;
    $sub$ptr$sub115 = (($sub$ptr$lhs$cast29$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast114))|0;
    $cmp116 = ($sub$ptr$sub115|0)<(4);
    if ($cmp116) {
     $retval$8 = 1;
     break L9;
    }
    $arrayidx120 = ((($4)) + 1|0);
    $14 = HEAP8[$arrayidx120>>0]|0;
    $arrayidx122 = ((($4)) + 2|0);
    $15 = HEAP8[$arrayidx122>>0]|0;
    $arrayidx123 = ((($4)) + 3|0);
    $16 = HEAP8[$arrayidx123>>0]|0;
    switch ($6<<24>>24) {
    case -16:  {
     $$off = (($14) + 112)<<24>>24;
     $17 = ($$off&255)<(48);
     if (!($17)) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $18 = $14 & -16;
     $cmp136 = ($18<<24>>24)==(-128);
     if (!($cmp136)) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $19 = $14 & -64;
     $cmp142 = ($19<<24>>24)==(-128);
     if (!($cmp142)) {
      $retval$8 = 2;
      break L9;
     }
    }
    }
    $conv146 = $15&255;
    $and147 = $conv146 & 192;
    $cmp148 = ($and147|0)==(128);
    if (!($cmp148)) {
     $retval$8 = 2;
     break L9;
    }
    $conv149 = $16&255;
    $and150 = $conv149 & 192;
    $cmp151 = ($and150|0)==(128);
    if (!($cmp151)) {
     $retval$8 = 2;
     break L9;
    }
    $sub$ptr$rhs$cast155 = $5;
    $sub$ptr$sub156 = (($sub$ptr$lhs$cast154) - ($sub$ptr$rhs$cast155))|0;
    $cmp157 = ($sub$ptr$sub156|0)<(4);
    if ($cmp157) {
     $retval$8 = 1;
     break L9;
    }
    $and161 = $conv14 & 7;
    $shl162 = $and161 << 18;
    $conv163 = $14&255;
    $and164 = $conv163 << 12;
    $shl165 = $and164 & 258048;
    $add = $shl165 | $shl162;
    $and167 = $conv146 << 6;
    $shl168 = $and167 & 4032;
    $add169 = $add | $shl168;
    $and171 = $conv149 & 63;
    $add172 = $add169 | $and171;
    $cmp173 = ($add172>>>0)>($Maxcode>>>0);
    if ($cmp173) {
     $retval$8 = 2;
     break L9;
    }
    $shl178 = $and161 << 2;
    $and180 = $conv163 >>> 4;
    $20 = $and180 & 3;
    $or181 = $20 | $shl178;
    $sub = $or181 << 6;
    $shl182 = (($sub) + 16320)|0;
    $and185 = $conv163 << 2;
    $shl186 = $and185 & 60;
    $and189 = $conv146 >>> 4;
    $21 = $and189 & 3;
    $or183 = $shl186 | $21;
    $or187 = $or183 | $shl182;
    $or191 = $or187 | 55296;
    $conv192 = $or191&65535;
    HEAP16[$5>>1] = $conv192;
    $shl195 = $and167 & 960;
    $or196 = $and171 | $shl195;
    $or199 = $or196 | 56320;
    $conv200 = $or199&65535;
    $incdec$ptr201 = ((($5)) + 2|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr201;
    HEAP16[$incdec$ptr201>>1] = $conv200;
    $22 = HEAP32[$frm_nxt>>2]|0;
    $add$ptr202 = ((($22)) + 4|0);
    $add$ptr202$sink = $add$ptr202;
   }
  } while(0);
  HEAP32[$frm_nxt>>2] = $add$ptr202$sink;
  $23 = HEAP32[$to_nxt>>2]|0;
  $incdec$ptr217 = ((($23)) + 2|0);
  HEAP32[$to_nxt>>2] = $incdec$ptr217;
 }
 return ($retval$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$pre = 0, $$pre64 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add101 = 0, $add90 = 0, $add93 = 0, $and = 0, $and109 = 0, $and113 = 0, $and119 = 0, $and123 = 0;
 var $and129 = 0, $and150 = 0, $and156 = 0, $and33 = 0, $and53 = 0, $and59 = 0, $and74 = 0, $and85 = 0, $and88 = 0, $and92 = 0, $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp135 = 0, $cmp141 = 0, $cmp15 = 0, $cmp21 = 0, $cmp26 = 0, $cmp39 = 0, $cmp44 = 0;
 var $cmp5 = 0, $cmp6 = 0, $cmp65 = 0, $cmp70 = 0, $cmp75 = 0, $cmp81 = 0, $cmp94 = 0, $conv = 0, $conv106 = 0, $conv116 = 0, $conv126 = 0, $conv131 = 0, $conv147 = 0, $conv153 = 0, $conv158 = 0, $conv18 = 0, $conv30 = 0, $conv35 = 0, $conv50 = 0, $conv56 = 0;
 var $conv61 = 0, $conv73 = 0, $incdec$ptr = 0, $incdec$ptr107 = 0, $incdec$ptr117 = 0, $incdec$ptr127 = 0, $incdec$ptr132 = 0, $incdec$ptr148 = 0, $incdec$ptr154 = 0, $incdec$ptr159 = 0, $incdec$ptr168 = 0, $incdec$ptr19 = 0, $incdec$ptr2 = 0, $incdec$ptr3 = 0, $incdec$ptr31 = 0, $incdec$ptr36 = 0, $incdec$ptr51 = 0, $incdec$ptr57 = 0, $incdec$ptr62 = 0, $or = 0;
 var $or105 = 0, $or111 = 0, $or115 = 0, $or121 = 0, $or125 = 0, $or130 = 0, $or146 = 0, $or152 = 0, $or157 = 0, $or34 = 0, $or49 = 0, $or55 = 0, $or60 = 0, $retval$4 = 0, $shl = 0, $shl110 = 0, $shl120 = 0, $shl89 = 0, $sub$ptr$lhs$cast67 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast13 = 0, $sub$ptr$rhs$cast139 = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast42 = 0, $sub$ptr$rhs$cast68 = 0, $sub$ptr$sub = 0, $sub$ptr$sub14 = 0, $sub$ptr$sub140 = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub43 = 0, $sub$ptr$sub69 = 0, $sub$ptr$sub80 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 $$pre64 = $to_end;
 if ($tobool) {
  label = 4;
 } else {
  $sub$ptr$rhs$cast = $to;
  $sub$ptr$sub = (($$pre64) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)<(3);
  if ($cmp) {
   $retval$4 = 1;
  } else {
   $incdec$ptr = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr;
   HEAP8[$to>>0] = -17;
   $0 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr2 = ((($0)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr2;
   HEAP8[$0>>0] = -69;
   $1 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr3 = ((($1)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr3;
   HEAP8[$1>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $sub$ptr$lhs$cast67 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $2 = $$pre;
   while(1) {
    $cmp5 = ($2>>>0)<($frm_end>>>0);
    if (!($cmp5)) {
     $retval$4 = 0;
     break L4;
    }
    $3 = HEAP16[$2>>1]|0;
    $conv = $3&65535;
    $cmp6 = ($conv>>>0)>($Maxcode>>>0);
    if ($cmp6) {
     $retval$4 = 2;
     break L4;
    }
    $cmp10 = ($3&65535)<(128);
    do {
     if ($cmp10) {
      $4 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast13 = $4;
      $sub$ptr$sub14 = (($$pre64) - ($sub$ptr$rhs$cast13))|0;
      $cmp15 = ($sub$ptr$sub14|0)<(1);
      if ($cmp15) {
       $retval$4 = 1;
       break L4;
      }
      $conv18 = $3&255;
      $incdec$ptr19 = ((($4)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr19;
      HEAP8[$4>>0] = $conv18;
     } else {
      $cmp21 = ($3&65535)<(2048);
      if ($cmp21) {
       $5 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast24 = $5;
       $sub$ptr$sub25 = (($$pre64) - ($sub$ptr$rhs$cast24))|0;
       $cmp26 = ($sub$ptr$sub25|0)<(2);
       if ($cmp26) {
        $retval$4 = 1;
        break L4;
       }
       $6 = $conv >>> 6;
       $or = $6 | 192;
       $conv30 = $or&255;
       $incdec$ptr31 = ((($5)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr31;
       HEAP8[$5>>0] = $conv30;
       $and33 = $conv & 63;
       $or34 = $and33 | 128;
       $conv35 = $or34&255;
       $7 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr36 = ((($7)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr36;
       HEAP8[$7>>0] = $conv35;
       break;
      }
      $cmp39 = ($3&65535)<(55296);
      if ($cmp39) {
       $8 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast42 = $8;
       $sub$ptr$sub43 = (($$pre64) - ($sub$ptr$rhs$cast42))|0;
       $cmp44 = ($sub$ptr$sub43|0)<(3);
       if ($cmp44) {
        $retval$4 = 1;
        break L4;
       }
       $9 = $conv >>> 12;
       $or49 = $9 | 224;
       $conv50 = $or49&255;
       $incdec$ptr51 = ((($8)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr51;
       HEAP8[$8>>0] = $conv50;
       $and53 = $conv >>> 6;
       $10 = $and53 & 63;
       $or55 = $10 | 128;
       $conv56 = $or55&255;
       $11 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr57 = ((($11)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr57;
       HEAP8[$11>>0] = $conv56;
       $and59 = $conv & 63;
       $or60 = $and59 | 128;
       $conv61 = $or60&255;
       $12 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr62 = ((($12)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr62;
       HEAP8[$12>>0] = $conv61;
       break;
      }
      $cmp65 = ($3&65535)<(56320);
      if (!($cmp65)) {
       $cmp135 = ($3&65535)<(57344);
       if ($cmp135) {
        $retval$4 = 2;
        break L4;
       }
       $23 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast139 = $23;
       $sub$ptr$sub140 = (($$pre64) - ($sub$ptr$rhs$cast139))|0;
       $cmp141 = ($sub$ptr$sub140|0)<(3);
       if ($cmp141) {
        $retval$4 = 1;
        break L4;
       }
       $24 = $conv >>> 12;
       $or146 = $24 | 224;
       $conv147 = $or146&255;
       $incdec$ptr148 = ((($23)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr148;
       HEAP8[$23>>0] = $conv147;
       $and150 = $conv >>> 6;
       $25 = $and150 & 63;
       $or152 = $25 | 128;
       $conv153 = $or152&255;
       $26 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr154 = ((($26)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr154;
       HEAP8[$26>>0] = $conv153;
       $and156 = $conv & 63;
       $or157 = $and156 | 128;
       $conv158 = $or157&255;
       $27 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr159 = ((($27)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr159;
       HEAP8[$27>>0] = $conv158;
       break;
      }
      $sub$ptr$rhs$cast68 = $2;
      $sub$ptr$sub69 = (($sub$ptr$lhs$cast67) - ($sub$ptr$rhs$cast68))|0;
      $cmp70 = ($sub$ptr$sub69|0)<(4);
      if ($cmp70) {
       $retval$4 = 1;
       break L4;
      }
      $arrayidx = ((($2)) + 2|0);
      $13 = HEAP16[$arrayidx>>1]|0;
      $conv73 = $13&65535;
      $and74 = $conv73 & 64512;
      $cmp75 = ($and74|0)==(56320);
      if (!($cmp75)) {
       $retval$4 = 2;
       break L4;
      }
      $14 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$sub80 = (($$pre64) - ($14))|0;
      $cmp81 = ($sub$ptr$sub80|0)<(4);
      if ($cmp81) {
       $retval$4 = 1;
       break L4;
      }
      $and85 = $conv & 960;
      $add = $and85 << 10;
      $shl = (($add) + 65536)|0;
      $and88 = $conv << 10;
      $shl89 = $and88 & 64512;
      $add90 = $shl | $shl89;
      $and92 = $conv73 & 1023;
      $add93 = $add90 | $and92;
      $cmp94 = ($add93>>>0)>($Maxcode>>>0);
      if ($cmp94) {
       $retval$4 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $arrayidx;
      $15 = $and85 >>> 6;
      $add101 = (($15) + 1)|0;
      $16 = $add101 >>> 2;
      $or105 = $16 | 240;
      $conv106 = $or105&255;
      $17 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr107 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr107;
      HEAP8[$17>>0] = $conv106;
      $and109 = $add101 << 4;
      $shl110 = $and109 & 48;
      $and113 = $conv >>> 2;
      $18 = $and113 & 15;
      $or111 = $18 | $shl110;
      $or115 = $or111 | 128;
      $conv116 = $or115&255;
      $19 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr117 = ((($19)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr117;
      HEAP8[$19>>0] = $conv116;
      $and119 = $conv << 4;
      $shl120 = $and119 & 48;
      $and123 = $conv73 >>> 6;
      $20 = $and123 & 15;
      $or121 = $shl120 | $20;
      $or125 = $or121 | 128;
      $conv126 = $or125&255;
      $21 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr127 = ((($21)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr127;
      HEAP8[$21>>0] = $conv126;
      $and129 = $conv73 & 63;
      $or130 = $and129 | 128;
      $conv131 = $or130&255;
      $22 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr132 = ((($22)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr132;
      HEAP8[$22>>0] = $conv131;
     }
    } while(0);
    $28 = HEAP32[$frm_nxt>>2]|0;
    $incdec$ptr168 = ((($28)) + 2|0);
    HEAP32[$frm_nxt>>2] = $incdec$ptr168;
    $2 = $incdec$ptr168;
   }
  }
 } while(0);
 return ($retval$4|0);
}
function __ZNSt3__26locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__shared_owners_$i = 0, $arrayidx$i = 0, $cmp = 0, $cmp$i = 0, $facets_ = 0, $i$0 = 0, $inc = 0, $name_ = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, $vfn$i = 0;
 var $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10316);
 $facets_ = ((($this)) + 8|0);
 $__end_$i = ((($this)) + 12|0);
 $i$0 = 0;
 while(1) {
  $0 = HEAP32[$__end_$i>>2]|0;
  $1 = HEAP32[$facets_>>2]|0;
  $sub$ptr$sub$i = (($0) - ($1))|0;
  $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
  $cmp = ($i$0>>>0)<($sub$ptr$div$i>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = $1;
  $arrayidx$i = (($2) + ($i$0<<2)|0);
  $3 = HEAP32[$arrayidx$i>>2]|0;
  $tobool = ($3|0)==(0|0);
  if (!($tobool)) {
   $__shared_owners_$i = ((($3)) + 4|0);
   $4 = HEAP32[$__shared_owners_$i>>2]|0;
   $5 = (($4) + -1)|0;
   HEAP32[$__shared_owners_$i>>2] = $5;
   $cmp$i = ($4|0)==(0);
   if ($cmp$i) {
    $vtable$i = HEAP32[$3>>2]|0;
    $vfn$i = ((($vtable$i)) + 8|0);
    $6 = HEAP32[$vfn$i>>2]|0;
    FUNCTION_TABLE_vi[$6 & 511]($3);
   }
  }
  $inc = (($i$0) + 1)|0;
  $i$0 = $inc;
 }
 $name_ = ((($this)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name_);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($facets_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__26locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i$i = 0, $cmp = 0, $cmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if (!($cmp)) {
   $1 = $0;
   $__end_$i$i = ((($this)) + 4|0);
   HEAP32[$__end_$i$i>>2] = $1;
   $2 = ((($this)) + 16|0);
   $cmp$i$i = ($0|0)==($2|0);
   if ($cmp$i$i) {
    $3 = ((($this)) + 128|0);
    HEAP8[$3>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__del_ = 0, $__tab_ = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10336);
 $__tab_ = ((($this)) + 8|0);
 $0 = HEAP32[$__tab_>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $__del_ = ((($this)) + 12|0);
  $1 = HEAP8[$__del_>>0]|0;
  $tobool2 = ($1<<24>>24)==(0);
  if (!($tobool2)) {
   __ZdaPv($0);
  }
 }
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp3 = 0, $cond = 0, $conv3 = 0, $idxprom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($c<<24>>24)>(-1);
 if ($cmp3) {
  $idxprom = $c&255;
  $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $arrayidx = (($call) + ($idxprom<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $conv3 = $0&255;
  $cond = $conv3;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp26 = 0, $cond = 0, $conv4 = 0, $conv5 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  if ($cmp26) {
   $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $1 = HEAP8[$low$addr$0>>0]|0;
   $conv4 = $1 << 24 >> 24;
   $arrayidx = (($call) + ($conv4<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $conv5 = $2&255;
   $cond = $conv5;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$0>>0] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp3 = 0, $cond = 0, $conv = 0, $conv4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($c<<24>>24)>(-1);
 if ($cmp3) {
  $conv = $c << 24 >> 24;
  $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $arrayidx = (($call) + ($conv<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $conv4 = $0&255;
  $cond = $conv4;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp26 = 0, $cond = 0, $conv4 = 0, $conv5 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  if ($cmp26) {
   $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $1 = HEAP8[$low$addr$0>>0]|0;
   $conv4 = $1 << 24 >> 24;
   $arrayidx = (($call) + ($conv4<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $conv5 = $2&255;
   $cond = $conv5;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$0>>0] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  HEAP8[$dest$addr$0>>0] = $0;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr2 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr2;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp2 = ($c<<24>>24)>(-1);
 $c$dfault = $cmp2 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$dfault = 0, $0 = 0, $cmp = 0, $cmp26 = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  $$dfault = $cmp26 ? $0 : $dfault;
  HEAP8[$dest$addr$0>>0] = $$dfault;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr4 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr4;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ctype_tolower_loc()|0);
 $0 = HEAP32[$call>>2]|0;
 return ($0|0);
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ctype_toupper_loc()|0);
 $0 = HEAP32[$call>>2]|0;
 return ($0|0);
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ctype_b_loc()|0);
 $0 = HEAP32[$call>>2]|0;
 return ($0|0);
}
function __ZNSt3__28numpunctIcED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10388);
 $__grouping_ = ((($this)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = ((($this)) + 8|0);
 $0 = HEAP8[$__decimal_point_>>0]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = ((($this)) + 9|0);
 $0 = HEAP8[$__thousands_sep_>>0]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = ((($this)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$__grouping_);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(14817)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result,14817,$call$i);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(14811)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result,14811,$call$i);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10428);
 $__grouping_ = ((($this)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = ((($this)) + 8|0);
 $0 = HEAP32[$__decimal_point_>>2]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = ((($this)) + 12|0);
 $0 = HEAP32[$__thousands_sep_>>2]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = ((($this)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$__grouping_);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(10484)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result,10484,$call$i);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(10460)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result,10460,$call$i);
 return;
}
function __ZNSt3__26locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $and2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp3 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $arrayidx = (($call) + ($c<<1)|0);
  $0 = HEAP16[$arrayidx>>1]|0;
  $and2 = $0 & $m;
  $cmp3 = ($and2<<16>>16)!=(0);
  $cond = $cmp3;
 } else {
  $cond = 0;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $conv = 0, $conv3 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $low$addr$0 = 0, $vec$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;$vec$addr$0 = $vec;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<1)|0);
   $2 = HEAP16[$arrayidx>>1]|0;
   $conv = $2&65535;
   $cond = $conv;
  } else {
   $cond = 0;
  }
  $conv3 = $cond&65535;
  HEAP16[$vec$addr$0>>1] = $conv3;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $incdec$ptr4 = ((($vec$addr$0)) + 2|0);
  $low$addr$0 = $incdec$ptr;$vec$addr$0 = $incdec$ptr4;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $and5 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<1)|0);
   $2 = HEAP16[$arrayidx>>1]|0;
   $and5 = $2 & $m;
   $tobool = ($and5<<16>>16)==(0);
   if (!($tobool)) {
    $low$addr$0$lcssa = $low$addr$0;
    break;
   }
  }
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $and5 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if (!($cmp2)) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $1 = HEAP32[$low$addr$0>>2]|0;
  $arrayidx = (($call) + ($1<<1)|0);
  $2 = HEAP16[$arrayidx>>1]|0;
  $and5 = $2 & $m;
  $tobool = ($and5<<16>>16)==(0);
  if ($tobool) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $arrayidx = (($call) + ($c<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $cond = $0;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $cond = $2;
  } else {
   $cond = $0;
  }
  HEAP32[$low$addr$0>>2] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $arrayidx = (($call) + ($c<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $cond = $0;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $cond = $2;
  } else {
   $cond = $0;
  }
  HEAP32[$low$addr$0>>2] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $c << 24 >> 24;
 return ($conv|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $conv = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  HEAP32[$dest$addr$0>>2] = $conv;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr2 = ((($dest$addr$0)) + 4|0);
  $dest$addr$0 = $incdec$ptr2;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 $conv = $c&255;
 $retval$0 = $cmp ? $conv : $dfault;
 return ($retval$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $low$addr$0 = 0, $low7 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low7 = $low;
 $0 = $high;
 $1 = (($0) - ($low7))|0;
 $2 = $1 >>> 2;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $3 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($3>>>0)<(128);
  $conv = $3&255;
  $storemerge = $cmp2 ? $conv : $dfault;
  HEAP8[$dest$addr$0>>0] = $storemerge;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $incdec$ptr3 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr3;$low$addr$0 = $incdec$ptr;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10744);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10780);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbm($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $__del_ = 0, $__shared_owners_$i$i = 0, $__tab_ = 0, $call = 0, $cmp = 0, $frombool = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $del&1;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (10336);
 $__tab_ = ((($this)) + 8|0);
 HEAP32[$__tab_>>2] = $tab;
 $__del_ = ((($this)) + 12|0);
 HEAP8[$__del_>>0] = $frombool;
 $cmp = ($tab|0)==(0|0);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$__tab_>>2] = $call;
 }
 return;
}
function __ZNSt3__26locale5__impC2Em($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $__end_$i$i$i = 0, $__shared_owners_$i$i = 0, $call$i = 0, $facets_ = 0, $name_ = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (10316);
 $facets_ = ((($this)) + 8|0);
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($facets_,28);
 $name_ = ((($this)) + 144|0);
 ;HEAP32[$name_>>2]=0|0;HEAP32[$name_+4>>2]=0|0;HEAP32[$name_+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(12756)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($name_,12756,$call$i);
 $0 = HEAP32[$facets_>>2]|0;
 $__end_$i$i$i = ((($this)) + 12|0);
 HEAP32[$__end_$i$i$i>>2] = $0;
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this,18872);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this,18880);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this,18888);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this,18904);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,18912);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,18920);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,18936);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,18944);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this,18952);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this,18976);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19008);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19016);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19024);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19032);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,19040);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,19048);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,19056);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,19064);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19072);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19080);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19088);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19096);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19104);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19120);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,19136);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,19152);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this,19168);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this,19176);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $__end_$i = 0, $__value_$i$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $__end_$i = ((($this)) + 4|0);
 HEAP32[$__end_$i>>2] = 0;
 $__value_$i$i$i = ((($this)) + 8|0);
 HEAP32[$__value_$i$i$i>>2] = 0;
 $0 = ((($this)) + 128|0);
 HEAP8[$0>>0] = 0;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($this,$__n);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this,$__n);
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18876)>>2] = 0;
 HEAP32[4718] = (8172);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21012)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18884)>>2] = 0;
 HEAP32[4720] = (8204);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21020)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbm(18888,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21028)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18908)>>2] = 0;
 HEAP32[4726] = (10532);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21060)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18916)>>2] = 0;
 HEAP32[4728] = (10600);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21332)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(18920,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21340)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18940)>>2] = 0;
 HEAP32[4734] = (10648);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21348)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18948)>>2] = 0;
 HEAP32[4736] = (10696);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21356)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Em(18952,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21044)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Em(18976,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21068)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19012)>>2] = 0;
 HEAP32[4752] = (8236);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21052)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19020)>>2] = 0;
 HEAP32[4754] = (8300);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21076)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19028)>>2] = 0;
 HEAP32[4756] = (8364);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21084)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19036)>>2] = 0;
 HEAP32[4758] = (8416);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21092)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19044)>>2] = 0;
 HEAP32[4760] = (9772);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21252)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19052)>>2] = 0;
 HEAP32[4762] = (9828);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21260)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19060)>>2] = 0;
 HEAP32[4764] = (9884);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21268)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19068)>>2] = 0;
 HEAP32[4766] = (9940);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21276)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19076)>>2] = 0;
 HEAP32[4768] = (9996);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21284)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19084)>>2] = 0;
 HEAP32[4770] = (10024);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21292)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19092)>>2] = 0;
 HEAP32[4772] = (10052);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21300)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19100)>>2] = 0;
 HEAP32[4774] = (10080);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21308)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19108)>>2] = 0;
 HEAP32[4776] = (10512);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((19112));
 HEAP32[4776] = (8468);
 HEAP32[(19112)>>2] = (8516);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21160)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19124)>>2] = 0;
 HEAP32[4780] = (10512);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((19128));
 HEAP32[4780] = (8552);
 HEAP32[(19128)>>2] = (8600);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21228)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $call$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19140)>>2] = 0;
 HEAP32[4784] = (10512);
 $call$i$i = (__ZNSt3__26__clocEv()|0);
 HEAP32[(19144)>>2] = $call$i$i;
 HEAP32[4784] = (9724);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21236)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $call$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19156)>>2] = 0;
 HEAP32[4788] = (10512);
 $call$i$i = (__ZNSt3__26__clocEv()|0);
 HEAP32[(19160)>>2] = $call$i$i;
 HEAP32[4788] = (9748);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21244)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19172)>>2] = 0;
 HEAP32[4792] = (10108);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21316)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19180)>>2] = 0;
 HEAP32[4794] = (10140);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21324)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_$i9$pre$phiZZ2D = 0, $__end_$i = 0, $__shared_owners_$i = 0, $__shared_owners_$i6 = 0, $add = 0, $arrayidx$i = 0, $arrayidx$i10 = 0, $cmp = 0;
 var $cmp$i = 0, $facets_ = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__shared_owners_$i = ((($f)) + 4|0);
 $0 = HEAP32[$__shared_owners_$i>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[$__shared_owners_$i>>2] = $1;
 $facets_ = ((($this)) + 8|0);
 $__end_$i = ((($this)) + 12|0);
 $2 = HEAP32[$__end_$i>>2]|0;
 $3 = HEAP32[$facets_>>2]|0;
 $sub$ptr$sub$i = (($2) - ($3))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)>($id>>>0);
 if ($cmp) {
  $4 = $3;
  $5 = $4;$__begin_$i9$pre$phiZZ2D = $facets_;
 } else {
  $add = (($id) + 1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($facets_,$add);
  $$pre = HEAP32[$facets_>>2]|0;
  $5 = $$pre;$__begin_$i9$pre$phiZZ2D = $facets_;
 }
 $arrayidx$i10 = (($5) + ($id<<2)|0);
 $6 = HEAP32[$arrayidx$i10>>2]|0;
 $tobool = ($6|0)==(0|0);
 if (!($tobool)) {
  $__shared_owners_$i6 = ((($6)) + 4|0);
  $7 = HEAP32[$__shared_owners_$i6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$__shared_owners_$i6>>2] = $8;
  $cmp$i = ($7|0)==(0);
  if ($cmp$i) {
   $vtable$i = HEAP32[$6>>2]|0;
   $vfn$i = ((($vtable$i)) + 8|0);
   $9 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vi[$9 & 511]($6);
  }
 }
 $10 = HEAP32[$__begin_$i9$pre$phiZZ2D>>2]|0;
 $arrayidx$i = (($10) + ($id<<2)|0);
 HEAP32[$arrayidx$i>>2] = $f;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $add$ptr = 0, $cmp = 0, $cmp2 = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)<($__sz>>>0);
 $2 = $1;
 if ($cmp) {
  $sub = (($__sz) - ($sub$ptr$div$i))|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this,$sub);
 } else {
  $cmp2 = ($sub$ptr$div$i>>>0)>($__sz>>>0);
  if ($cmp2) {
   $add$ptr = (($2) + ($__sz<<2)|0);
   HEAP32[$__end_$i>>2] = $add$ptr;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $div$i = 0, $mul$i = 0, $spec$select$i = 0;
 var $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__v = sp;
 $__value_$i$i$i = ((($this)) + 8|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   $2 = HEAP32[$this>>2]|0;
   $sub$ptr$sub$i = (($1) - ($2))|0;
   $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
   $add = (($sub$ptr$div$i) + ($__n))|0;
   $call$i = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this)|0);
   $cmp$i = ($call$i>>>0)<($add>>>0);
   if ($cmp$i) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
    // unreachable;
   } else {
    $3 = ((($this)) + 16|0);
    $4 = HEAP32[$__value_$i$i$i>>2]|0;
    $5 = HEAP32[$this>>2]|0;
    $sub$ptr$sub$i$i$i = (($4) - ($5))|0;
    $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 2;
    $div$i = $call$i >>> 1;
    $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<($div$i>>>0);
    $mul$i = $sub$ptr$sub$i$i$i >> 1;
    $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
    $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
    $spec$select$i = $cmp3$i ? $$sroa$speculated$i : $call$i;
    $6 = HEAP32[$__end_>>2]|0;
    $sub$ptr$sub$i7 = (($6) - ($5))|0;
    $sub$ptr$div$i8 = $sub$ptr$sub$i7 >> 2;
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($__v,$spec$select$i,$sub$ptr$div$i8,$3);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__v,$__n);
    __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($__v);
    break;
   }
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this,$__n);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 4|0);
 $$pre = HEAP32[$__end_>>2]|0;
 $0 = $$pre;$__n$addr$0 = $__n;
 while(1) {
  HEAP32[$0>>2] = 0;
  $1 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($1)) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;$__n$addr$0 = $dec;
  }
 }
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $__allocated_$i$i = 0, $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i1$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $mul$i$i = 0, $or$cond$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i1$i = ((($this)) + 12|0);
 HEAP32[$__value_$i1$i>>2] = 0;
 $__value_$i$i = ((($this)) + 16|0);
 HEAP32[$__value_$i$i>>2] = $__a;
 $cmp = ($__cap|0)==(0);
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $__allocated_$i$i = ((($__a)) + 112|0);
   $0 = HEAP8[$__allocated_$i$i>>0]|0;
   $tobool$i$i = ($0<<24>>24)==(0);
   $cmp$i$i = ($__cap>>>0)<(29);
   $or$cond$i$i = $cmp$i$i & $tobool$i$i;
   if ($or$cond$i$i) {
    HEAP8[$__allocated_$i$i>>0] = 1;
    $cond = $__a;
    break;
   } else {
    $mul$i$i = $__cap << 2;
    $call$i$i$i = (__Znwm($mul$i$i)|0);
    $cond = $call$i$i$i;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $cond;
 $add$ptr = (($cond) + ($__start<<2)|0);
 $__end_ = ((($this)) + 8|0);
 HEAP32[$__end_>>2] = $add$ptr;
 $__begin_ = ((($this)) + 4|0);
 HEAP32[$__begin_>>2] = $add$ptr;
 $add$ptr5 = (($cond) + ($__cap<<2)|0);
 HEAP32[$__value_$i1$i>>2] = $add$ptr5;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 8|0);
 $$pre = HEAP32[$__end_>>2]|0;
 $0 = $$pre;$__n$addr$0 = $__n;
 while(1) {
  HEAP32[$0>>2] = 0;
  $1 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($1)) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;$__n$addr$0 = $dec;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i8 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $__begin_2 = ((($__v)) + 4|0);
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i7 = (($1) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i8 = $sub$ptr$sub$i7 >> 2;
 $2 = HEAP32[$__begin_2>>2]|0;
 $idx$neg$i = (0 - ($sub$ptr$div$i8))|0;
 $add$ptr$i = (($2) + ($idx$neg$i<<2)|0);
 HEAP32[$__begin_2>>2] = $add$ptr$i;
 $cmp$i = ($sub$ptr$sub$i7|0)>(0);
 if ($cmp$i) {
  _memcpy(($add$ptr$i|0),($0|0),($sub$ptr$sub$i7|0))|0;
  $$pre = HEAP32[$__begin_2>>2]|0;
  $$pre$phiZ2D = $__begin_2;$5 = $$pre;
 } else {
  $3 = $add$ptr$i;
  $$pre$phiZ2D = $__begin_2;$5 = $3;
 }
 $4 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = $5;
 HEAP32[$$pre$phiZ2D>>2] = $4;
 $__end_6 = ((($__v)) + 8|0);
 $6 = HEAP32[$__end_>>2]|0;
 $7 = HEAP32[$__end_6>>2]|0;
 HEAP32[$__end_>>2] = $7;
 HEAP32[$__end_6>>2] = $6;
 $__value_$i$i$i6 = ((($this)) + 8|0);
 $__value_$i$i$i = ((($__v)) + 12|0);
 $8 = HEAP32[$__value_$i$i$i6>>2]|0;
 $9 = HEAP32[$__value_$i$i$i>>2]|0;
 HEAP32[$__value_$i$i$i6>>2] = $9;
 HEAP32[$__value_$i$i$i>>2] = $8;
 $10 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$__v>>2] = $10;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__allocated_$i$i = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $__value_$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__begin_$i>>2]|0;
 $__end_$i$i$i = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$__end_$i$i$i>>2]|0;
 $1 = $$pre$i$i$i;
 while(1) {
  $cmp$i$i$i = ($1|0)==($0|0);
  if ($cmp$i$i$i) {
   break;
  }
  $incdec$ptr$i$i$i = ((($1)) + -4|0);
  HEAP32[$__end_$i$i$i>>2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this>>2]|0;
 $tobool = ($2|0)==(0|0);
 do {
  if (!($tobool)) {
   $__value_$i$i$i = ((($this)) + 16|0);
   $3 = HEAP32[$__value_$i$i$i>>2]|0;
   $cmp$i$i = ($2|0)==($3|0);
   if ($cmp$i$i) {
    $__allocated_$i$i = ((($3)) + 112|0);
    HEAP8[$__allocated_$i$i>>0] = 0;
    break;
   } else {
    __ZdlPv($2);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28numpunctIwEC2Em($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $__decimal_point_ = 0, $__grouping_ = 0, $__i$0$i$i = 0, $__shared_owners_$i$i = 0, $__thousands_sep_ = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (10428);
 $__decimal_point_ = ((($this)) + 8|0);
 HEAP32[$__decimal_point_>>2] = 46;
 $__thousands_sep_ = ((($this)) + 12|0);
 HEAP32[$__thousands_sep_>>2] = 44;
 $__grouping_ = ((($this)) + 16|0);
 ;HEAP32[$__grouping_>>2]=0|0;HEAP32[$__grouping_+4>>2]=0|0;HEAP32[$__grouping_+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping_) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Em($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $__decimal_point_ = 0, $__grouping_ = 0, $__i$0$i$i = 0, $__shared_owners_$i$i = 0, $__thousands_sep_ = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (10388);
 $__decimal_point_ = ((($this)) + 8|0);
 HEAP8[$__decimal_point_>>0] = 46;
 $__thousands_sep_ = ((($this)) + 9|0);
 HEAP8[$__thousands_sep_>>0] = 44;
 $__grouping_ = ((($this)) + 12|0);
 ;HEAP32[$__grouping_>>2]=0|0;HEAP32[$__grouping_+4>>2]=0|0;HEAP32[$__grouping_+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping_) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $__l = 0, $__shared_owners_$i$i = 0, $call = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (10268);
 $__l = ((($this)) + 8|0);
 $call = (__ZNSt3__26__clocEv()|0);
 HEAP32[$__l>>2] = $call;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__value_$i$i$i3 = 0, $add$ptr = 0, $call = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $mul$i$i = 0, $or$cond$i$i = 0, $retval$0$i$i$in = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this)|0);
 $cmp = ($call>>>0)<($__n>>>0);
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $0 = ((($this)) + 128|0);
 $1 = HEAP8[$0>>0]|0;
 $tobool$i$i = ($1<<24>>24)==(0);
 $cmp$i$i = ($__n>>>0)<(29);
 $or$cond$i$i = $cmp$i$i & $tobool$i$i;
 if ($or$cond$i$i) {
  $2 = ((($this)) + 16|0);
  HEAP8[$0>>0] = 1;
  $retval$0$i$i$in = $2;
 } else {
  $mul$i$i = $__n << 2;
  $call$i$i$i = (__Znwm($mul$i$i)|0);
  $retval$0$i$i$in = $call$i$i$i;
 }
 $__end_ = ((($this)) + 4|0);
 HEAP32[$__end_>>2] = $retval$0$i$i$in;
 HEAP32[$this>>2] = $retval$0$i$i$in;
 $add$ptr = (($retval$0$i$i$in) + ($__n<<2)|0);
 $__value_$i$i$i3 = ((($this)) + 8|0);
 HEAP32[$__value_$i$i$i3>>2] = $add$ptr;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19184]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(19184)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   (__ZNSt3__26locale5__imp12make_classicEv()|0);
   HEAP32[5342] = 21364;
  }
 }
 $2 = HEAP32[5342]|0;
 return ($2|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[5341] = 19192;
 return (21364|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Em(19192,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(21372,$call);
 return (21372|0);
}
function __ZNSt3__26localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $__shared_owners_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 $__shared_owners_$i = ((($0)) + 4|0);
 $1 = HEAP32[$__shared_owners_$i>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$__shared_owners_$i>>2] = $2;
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19352]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(19352)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   (__ZNSt3__26locale5__imp11make_globalEv()|0);
   HEAP32[5344] = 21372;
  }
 }
 $2 = HEAP32[5344]|0;
 return ($2|0);
}
function __ZNSt3__26localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__shared_owners_$i = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale8__globalEv()|0);
 $0 = HEAP32[$call>>2]|0;
 HEAP32[$this>>2] = $0;
 $__shared_owners_$i = ((($0)) + 4|0);
 $1 = HEAP32[$__shared_owners_$i>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$__shared_owners_$i>>2] = $2;
 return;
}
function __ZNSt3__214__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock(21380)|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $cmp = ($0|0)==(1);
  if (!($cmp)) {
   break;
  }
  (_pthread_cond_wait((21408|0),(21380|0))|0);
 }
 $1 = HEAP32[$flag>>2]|0;
 $cmp2 = ($1|0)==(0);
 if ($cmp2) {
  HEAP32[$flag>>2] = 1;
  (_pthread_mutex_unlock(21380)|0);
  FUNCTION_TABLE_vi[$func & 511]($arg);
  (_pthread_mutex_lock(21380)|0);
  HEAP32[$flag>>2] = -1;
  (_pthread_mutex_unlock(21380)|0);
  (_pthread_cond_broadcast((21408|0))|0);
 } else {
  (_pthread_mutex_unlock(21380)|0);
 }
 return;
}
function __ZSt17__throw_bad_allocv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __Znwm($size) {
 $size = $size|0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $spec$store$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $spec$store$select = $cmp ? 1 : $size;
 while(1) {
  $call = (_malloc($spec$store$select)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   $call$lcssa = $call;
   break;
  }
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 0]();
 }
 return ($call$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i5 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;
 $__size_$i5 = ((($__str)) + 11|0);
 $0 = HEAP8[$__size_$i5>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$1,$2);
 } else {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__n>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__n>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__n&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__n) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__n;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE6assignEPcmc($__p$0,$__n,$__c)|0);
 $arrayidx = (($__p$0) + ($__n)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignEPcmc($__s,$__n,$__a) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  $call = (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a)|0);
  $0 = $call&255;
  _memset(($__s|0),($0|0),($__n|0))|0;
 }
 return ($__s|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__size_$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$this>>2]|0;
  __ZdlPv($1);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i>>2]|0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0&255;
    $cond$i25 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i,$sub,$cond$i25,0,$cond$i25,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19,$__s,$__n)|0);
   $arrayidx = (($cond$i19) + ($__n)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i28 = ($3<<24>>24)<(0);
   if ($tobool$i$i28) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i29;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memmove(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0;
 var $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp49 = sp;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = (__Znwm($cond40)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr33 = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add)|0);
  $add$ptr36 = (($cond$i) + ($__n_copy)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(10);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48)|0);
 HEAP8[$ref$tmp49>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$pre = 0, $$pre72 = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i = 0, $__cap_$i$i = 0, $__new_data$0466470 = 0, $__new_data$047 = 0, $__now_long$0$off053 = 0, $__p$049 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__size_$i3$i18 = 0, $__size_$i9$pre$phiZZ2D = 0, $add = 0;
 var $add$i$i = 0, $add30 = 0, $add3059 = 0, $add3068 = 0, $add38$pre$phiZ2D = 0, $and$i$i = 0, $and$i$i32 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp6 = 0, $cond$i14 = 0, $cond$i44 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i20 = 0, $conv$i$i2067 = 0, $or$i = 0, $phitmp$i = 0;
 var $phitmp$i33 = 0, $spec$select$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i14 = $2;$cond$i44 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i14 = $conv$i$i;$cond$i44 = 10;
 }
 $cmp$i$i$i = ($cond$i14>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i14 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(11);
 $add$i$i = (($$sroa$speculated) + 16)|0;
 $and$i$i32 = $add$i$i & -16;
 $phitmp$i33 = (($and$i$i32) + -1)|0;
 $spec$select$i = $cmp$i ? 10 : $phitmp$i33;
 $cmp6 = ($spec$select$i|0)==($cond$i44|0);
 do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $4 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$047 = $this;$__now_long$0$off053 = 0;$__p$049 = $4;
      label = 13;
     } else {
      $conv$i$i2067 = $0&255;
      $add3068 = (($conv$i$i2067) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($this,$4,$add3068)|0);
      __ZdlPv($4);
      label = 16;
     }
    } else {
     $add = (($spec$select$i) + 1)|0;
     $call$i$i$i = (__Znwm($add)|0);
     if ($tobool$i$i) {
      $3 = HEAP32[$this>>2]|0;
      $__new_data$047 = $call$i$i$i;$__now_long$0$off053 = 1;$__p$049 = $3;
      label = 13;
      break;
     } else {
      $conv$i$i20 = $0&255;
      $add30 = (($conv$i$i20) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$this,$add30)|0);
      $$pre = ((($this)) + 4|0);
      $__new_data$0466470 = $call$i$i$i;$__size_$i9$pre$phiZZ2D = $$pre;$add38$pre$phiZ2D = $add;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $__size_$i3$i18 = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i3$i18>>2]|0;
    $add3059 = (($5) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__new_data$047,$__p$049,$add3059)|0);
    __ZdlPv($__p$049);
    if ($__now_long$0$off053) {
     $$pre72 = (($spec$select$i) + 1)|0;
     $__new_data$0466470 = $__new_data$047;$__size_$i9$pre$phiZZ2D = $__size_$i3$i18;$add38$pre$phiZ2D = $$pre72;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $or$i = $add38$pre$phiZ2D | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    HEAP32[$__size_$i9$pre$phiZZ2D>>2] = $cond$i14;
    HEAP32[$this>>2] = $__new_data$0466470;
    break;
   }
   else if ((label|0) == 16) {
    $conv$i = $cond$i14&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__size_$i6$i = 0, $add$ptr$i = 0, $add$ptr4$i = 0, $cmp = 0, $cond$i = 0, $conv$i$i = 0, $conv$i$i7 = 0, $ref$tmp$i = 0, $ref$tmp5$i = 0, $sub = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp$i = sp + 1|0;
 $ref$tmp5$i = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($this)) + 4|0);
  $1 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i = $1;
 } else {
  $conv$i$i = $0&255;
  $cond$i = $conv$i$i;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   $sub = (($__n) - ($cond$i))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this,$sub,$__c)|0);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr$i = (($2) + ($__n)|0);
    HEAP8[$ref$tmp$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i,$ref$tmp$i);
    $__size_$i6$i = ((($this)) + 4|0);
    HEAP32[$__size_$i6$i>>2] = $__n;
    break;
   } else {
    $add$ptr4$i = (($this) + ($__n)|0);
    HEAP8[$ref$tmp5$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr4$i,$ref$tmp5$i);
    $conv$i$i7 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i7;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add8 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i33 = 0;
 var $conv$i$i = 0, $conv$i$i26 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub4 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i25 = 0, $tobool$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $tobool = ($__n|0)==(0);
 if (!($tobool)) {
  $__size_$i$i = ((($this)) + 11|0);
  $0 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i) {
   $__cap_$i$i = ((($this)) + 8|0);
   $1 = HEAP32[$__cap_$i$i>>2]|0;
   $and$i$i = $1 & 2147483647;
   $phitmp$i = (($and$i$i) + -1)|0;
   $__size_$i3$i = ((($this)) + 4|0);
   $2 = HEAP32[$__size_$i3$i>>2]|0;
   $cond$i22 = $2;$cond$i33 = $phitmp$i;
  } else {
   $conv$i$i = $0&255;
   $cond$i22 = $conv$i$i;$cond$i33 = 10;
  }
  $sub = (($cond$i33) - ($cond$i22))|0;
  $cmp = ($sub>>>0)<($__n>>>0);
  if ($cmp) {
   $add = (($cond$i22) + ($__n))|0;
   $sub4 = (($add) - ($cond$i33))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$cond$i33,$sub4,$cond$i22,$cond$i22,0,0);
   $$pre = HEAP8[$__size_$i$i>>0]|0;
   $3 = $$pre;
  } else {
   $3 = $0;
  }
  $tobool$i$i29 = ($3<<24>>24)<(0);
  if ($tobool$i$i29) {
   $4 = HEAP32[$this>>2]|0;
   $cond$i32 = $4;
  } else {
   $cond$i32 = $this;
  }
  $add$ptr = (($cond$i32) + ($cond$i22)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcmc($add$ptr,$__n,$__c)|0);
  $add8 = (($cond$i22) + ($__n))|0;
  $5 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i25 = ($5<<24>>24)<(0);
  if ($tobool$i$i25) {
   $__size_$i2$i = ((($this)) + 4|0);
   HEAP32[$__size_$i2$i>>2] = $add8;
  } else {
   $conv$i$i26 = $add8&255;
   HEAP8[$__size_$i$i>>0] = $conv$i$i26;
  }
  $arrayidx = (($cond$i32) + ($add8)|0);
  HEAP8[$ref$tmp>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp16 = 0, $cmp24 = 0, $cmp34 = 0, $cmp4 = 0;
 var $cond$i = 0, $cond30 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (-17 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(2147483623);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond30 = $phitmp;
 } else {
  $cond30 = -17;
 }
 $call$i$i$i = (__Znwm($cond30)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add)|0);
  $add$ptr29 = (($cond$i) + ($__n_copy)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(10);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond30 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $conv$i$i = 0, $conv$i$i34 = 0;
 var $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i24 = $2;$cond$i35 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i24 = $conv$i$i;$cond$i35 = 10;
 }
 $sub = (($cond$i35) - ($cond$i24))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($cond$i24) + ($__n))|0;
  $sub8 = (($add7) - ($cond$i35))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i35,$sub8,$cond$i24,$cond$i24,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = (($cond$i30) + ($cond$i24)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__s,$__n)|0);
   $add = (($cond$i24) + ($__n))|0;
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($4<<24>>24)<(0);
   if ($tobool$i$i33) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
   } else {
    $conv$i$i34 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i34;
   }
   $arrayidx = (($cond$i30) + ($add)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $__size_$i21 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0, $conv$i = 0, $conv$i16 = 0;
 var $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = sp + 1|0;
 $ref$tmp = sp;
 HEAP8[$__c$addr>>0] = $__c;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $__cap_$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i>>2]|0;
  $and$i = $1 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i21 = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i21>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i = $0&255;
  $__cap$0 = 10;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$__size_$i>>0]|0;
  $tobool$i20 = ($3<<24>>24)<(0);
  if ($tobool$i20) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $add = (($__sz$0) + 1)|0;
  $conv$i16 = $add&255;
  HEAP8[$__size_$i>>0] = $conv$i16;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $4 = HEAP32[$this>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $add16;
  $call12$pn = $4;
 }
 $__p$0 = (($call12$pn) + ($__sz$0)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 1|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $conv$i = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(2);
 do {
  if ($cmp2) {
   $conv$i = $__sz&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   $add$i$i = (($__sz) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    _abort();
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwm($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i12 = ((($this)) + 4|0);
    HEAP32[$__size_$i12>>2] = $__sz;
    $__p$0 = $call$i$i$i;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $conv$i = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__n>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__n>>>0)<(2);
 do {
  if ($cmp2) {
   $conv$i = $__n&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   $add$i$i = (($__n) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    _abort();
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwm($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i12 = ((($this)) + 4|0);
    HEAP32[$__size_$i12>>2] = $__n;
    $__p$0 = $call$i$i$i;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwmw($__p$0,$__n,$__c)|0);
 $arrayidx = (($__p$0) + ($__n<<2)|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignEPwmw($__s,$__n,$__a) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s;
 } else {
  $call = (_wmemset($__s,$__a,$__n)|0);
  $cond = $__s;
 }
 return ($cond|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $__size_$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($1<<24>>24)<(0);
 if ($tobool$i) {
  $2 = HEAP32[$this>>2]|0;
  __ZdlPv($2);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i18 = 0, $cond$i23 = 0, $conv$i$i = 0, $conv$i$i27 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 1;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i2$i = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i23 = $5;
   } else {
    $conv$i$i = $1&255;
    $cond$i23 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this,$cond$i,$sub,$cond$i23,0,$cond$i23,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i18 = $3;
   } else {
    $cond$i18 = $this;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwm($cond$i18,$__s,$__n)|0);
   $arrayidx = (($cond$i18) + ($__n<<2)|0);
   HEAP32[$ref$tmp>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i25 = ($4<<24>>24)<(0);
   if ($tobool$i$i25) {
    $__size_$i2$i26 = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i26>>2] = $__n;
    break;
   } else {
    $conv$i$i27 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i27;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s1;
 } else {
  $call = (_wmemmove($__s1,$__s2,$__n)|0);
  $cond = $__s1;
 }
 return ($cond|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add15 = 0, $add1544 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp49 = sp;
 $sub2 = (1073741806 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$this>>2]|0;
  $cond$i = $2;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(536870887);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  $add$i$i = (($$sroa$speculated) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $add15 = $cmp$i ? 2 : $and$i$i;
  $cmp$i$i = ($add15>>>0)>(1073741823);
  if ($cmp$i$i) {
   _abort();
   // unreachable;
  } else {
   $add1544 = $add15;
  }
 } else {
  $add1544 = 1073741807;
 }
 $mul$i$i = $add1544 << 2;
 $call$i$i$i = (__Znwm($mul$i$i)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr36 = (($cond$i) + ($__n_copy<<2)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del<<2)|0);
  $add$ptr33 = (($call$i$i$i) + ($__n_copy<<2)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(1);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $add1544 | -2147483648;
 HEAP32[$0>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48<<2)|0);
 HEAP32[$ref$tmp49>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$pre = 0, $$pre69 = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__new_data$0436167 = 0, $__new_data$044 = 0, $__now_long$0$off050 = 0, $__p$046 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i16 = 0, $__size_$i9$pre$phiZZ2D = 0, $add = 0, $add$i$i = 0;
 var $add30 = 0, $add3056 = 0, $add3065 = 0, $add38$pre$phiZ2D = 0, $and$i$i = 0, $and$i$i28 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp6 = 0, $cond$i13 = 0, $cond$i41 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i18 = 0, $conv$i$i1864 = 0, $mul$i$i = 0, $or$i = 0;
 var $phitmp$i = 0, $phitmp$i29 = 0, $spec$select$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i2$i = ((($this)) + 4|0);
  $3 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i13 = $3;$cond$i41 = $phitmp$i;
 } else {
  $conv$i$i = $1&255;
  $cond$i13 = $conv$i$i;$cond$i41 = 1;
 }
 $cmp$i$i$i = ($cond$i13>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i13 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(2);
 $add$i$i = (($$sroa$speculated) + 4)|0;
 $and$i$i28 = $add$i$i & -4;
 $phitmp$i29 = (($and$i$i28) + -1)|0;
 $spec$select$i = $cmp$i ? 1 : $phitmp$i29;
 $cmp6 = ($spec$select$i|0)==($cond$i41|0);
 do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $5 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$044 = $this;$__now_long$0$off050 = 0;$__p$046 = $5;
      label = 15;
     } else {
      $conv$i$i1864 = $1&255;
      $add3065 = (($conv$i$i1864) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($this,$5,$add3065)|0);
      __ZdlPv($5);
      label = 18;
     }
    } else {
     $add = (($spec$select$i) + 1)|0;
     $cmp$i$i = ($add>>>0)>(1073741823);
     if ($cmp$i$i) {
      _abort();
      // unreachable;
     }
     $mul$i$i = $add << 2;
     $call$i$i$i = (__Znwm($mul$i$i)|0);
     if ($tobool$i$i) {
      $4 = HEAP32[$this>>2]|0;
      $__new_data$044 = $call$i$i$i;$__now_long$0$off050 = 1;$__p$046 = $4;
      label = 15;
      break;
     } else {
      $conv$i$i18 = $1&255;
      $add30 = (($conv$i$i18) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i,$this,$add30)|0);
      $$pre = ((($this)) + 4|0);
      $__new_data$0436167 = $call$i$i$i;$__size_$i9$pre$phiZZ2D = $$pre;$add38$pre$phiZ2D = $add;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $__size_$i2$i16 = ((($this)) + 4|0);
    $6 = HEAP32[$__size_$i2$i16>>2]|0;
    $add3056 = (($6) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwm($__new_data$044,$__p$046,$add3056)|0);
    __ZdlPv($__p$046);
    if ($__now_long$0$off050) {
     $$pre69 = (($spec$select$i) + 1)|0;
     $__new_data$0436167 = $__new_data$044;$__size_$i9$pre$phiZZ2D = $__size_$i2$i16;$add38$pre$phiZ2D = $$pre69;
     label = 17;
    } else {
     label = 18;
    }
   }
   if ((label|0) == 17) {
    $or$i = $add38$pre$phiZ2D | -2147483648;
    HEAP32[$0>>2] = $or$i;
    HEAP32[$__size_$i9$pre$phiZZ2D>>2] = $cond$i13;
    HEAP32[$this>>2] = $__new_data$0436167;
    break;
   }
   else if ((label|0) == 18) {
    $conv$i = $cond$i13&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE6lengthEPKw($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $add14 = 0, $add1434 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp16 = 0;
 var $cmp24 = 0, $cmp34 = 0, $cmp4 = 0, $cond$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (1073741807 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$this>>2]|0;
  $cond$i = $2;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(536870887);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  $add$i$i = (($$sroa$speculated) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $add14 = $cmp$i ? 2 : $and$i$i;
  $cmp$i$i = ($add14>>>0)>(1073741823);
  if ($cmp$i$i) {
   _abort();
   // unreachable;
  } else {
   $add1434 = $add14;
  }
 } else {
  $add1434 = 1073741807;
 }
 $mul$i$i = $add1434 << 2;
 $call$i$i$i = (__Znwm($mul$i$i)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr29 = (($cond$i) + ($__n_copy<<2)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del<<2)|0);
  $add$ptr = (($call$i$i$i) + ($__n_copy<<2)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(1);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $add1434 | -2147483648;
 HEAP32[$0>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i31 = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i23 = 0, $cond$i28 = 0, $cond$i33 = 0, $conv$i$i = 0, $conv$i$i32 = 0;
 var $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i2$i = ((($this)) + 4|0);
  $3 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i23 = $3;$cond$i33 = $phitmp$i;
 } else {
  $conv$i$i = $1&255;
  $cond$i23 = $conv$i$i;$cond$i33 = 1;
 }
 $sub = (($cond$i33) - ($cond$i23))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($cond$i23) + ($__n))|0;
  $sub8 = (($add7) - ($cond$i33))|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this,$cond$i33,$sub8,$cond$i23,$cond$i23,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $4 = HEAP32[$this>>2]|0;
    $cond$i28 = $4;
   } else {
    $cond$i28 = $this;
   }
   $add$ptr = (($cond$i28) + ($cond$i23<<2)|0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($add$ptr,$__s,$__n)|0);
   $add = (($cond$i23) + ($__n))|0;
   $5 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i30 = ($5<<24>>24)<(0);
   if ($tobool$i$i30) {
    $__size_$i2$i31 = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i31>>2] = $add;
   } else {
    $conv$i$i32 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i32;
   }
   $arrayidx = (($cond$i28) + ($add<<2)|0);
   HEAP32[$ref$tmp>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i14 = 0, $__size_$i19 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0, $conv$i = 0, $conv$i15 = 0;
 var $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = sp + 4|0;
 $ref$tmp = sp;
 HEAP32[$__c$addr>>2] = $__c;
 $0 = ((($this)) + 8|0);
 $__size_$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($1<<24>>24)<(0);
 if ($tobool$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i = $2 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i19 = ((($this)) + 4|0);
  $3 = HEAP32[$__size_$i19>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $3;
 } else {
  $conv$i = $1&255;
  $__cap$0 = 1;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $4 = HEAP8[$__size_$i>>0]|0;
  $tobool$i18 = ($4<<24>>24)<(0);
  if ($tobool$i18) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $add = (($__sz$0) + 1)|0;
  $conv$i15 = $add&255;
  HEAP8[$__size_$i>>0] = $conv$i15;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $5 = HEAP32[$this>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i14 = ((($this)) + 4|0);
  HEAP32[$__size_$i14>>2] = $add16;
  $call12$pn = $5;
 }
 $__p$0 = (($call12$pn) + ($__sz$0<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 4|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,7152,7136,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    $2 = ((($info)) + 4|0);
    dest=$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $1;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $number_of_dst_type = ((($info)) + 48|0);
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $3 = HEAP32[$vfn>>2]|0;
    $4 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$3 & 511]($1,$info,$4,1);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp4 = ($5|0)==(1);
    if ($cmp4) {
     $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
     $6 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $6;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x,$y,$0) {
 $x = $x|0;
 $y = $y|0;
 $0 = $0|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($x|0)==($y|0);
 return ($cmp|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 511]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 511]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 511]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0;
 var $tobool19 = 0, $vfn = 0, $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $13 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$13>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $14 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$14 & 511]($13,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $found_our_static_ptr = ((($info)) + 52|0);
     HEAP8[$found_our_static_ptr>>0] = 0;
     $found_any_static_type = ((($info)) + 53|0);
     HEAP8[$found_any_static_type>>0] = 0;
     $__base_type = ((($this)) + 8|0);
     $5 = HEAP32[$__base_type>>2]|0;
     $vtable = HEAP32[$5>>2]|0;
     $vfn = ((($vtable)) + 20|0);
     $6 = HEAP32[$vfn>>2]|0;
     FUNCTION_TABLE_viiiiii[$6 & 511]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $7 = HEAP8[$found_any_static_type>>0]|0;
     $tobool16 = ($7<<24>>24)==(0);
     if ($tobool16) {
      $is_dst_type_derived_from_static_type13$0$off032 = 0;
      label = 11;
     } else {
      $8 = HEAP8[$found_our_static_ptr>>0]|0;
      $tobool19 = ($8<<24>>24)==(0);
      if ($tobool19) {
       $is_dst_type_derived_from_static_type13$0$off032 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
       $number_to_dst_ptr = ((($info)) + 40|0);
       $9 = HEAP32[$number_to_dst_ptr>>2]|0;
       $add = (($9) + 1)|0;
       HEAP32[$number_to_dst_ptr>>2] = $add;
       $number_to_static_ptr = ((($info)) + 36|0);
       $10 = HEAP32[$number_to_static_ptr>>2]|0;
       $cmp26 = ($10|0)==(1);
       if ($cmp26) {
        $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
        $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($11|0)==(2);
        if ($cmp27) {
         $search_done = ((($info)) + 54|0);
         HEAP8[$search_done>>0] = 1;
         if ($is_dst_type_derived_from_static_type13$0$off032) {
          label = 15;
          break;
         } else {
          $12 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$0$off032) {
        label = 15;
       } else {
        $12 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $12 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $12;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 511]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0, $and30 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp19 = 0, $cmp40 = 0;
 var $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool14 = 0, $tobool17 = 0, $tobool22 = 0, $tobool27 = 0, $tobool31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $found_our_static_ptr2 = ((($info)) + 52|0);
  $1 = HEAP8[$found_our_static_ptr2>>0]|0;
  $found_any_static_type5 = ((($info)) + 53|0);
  $2 = HEAP8[$found_any_static_type5>>0]|0;
  $arraydecay = ((($this)) + 16|0);
  $__base_count = ((($this)) + 12|0);
  $3 = HEAP32[$__base_count>>2]|0;
  $add$ptr = (((($this)) + 16|0) + ($3<<3)|0);
  HEAP8[$found_our_static_ptr2>>0] = 0;
  HEAP8[$found_any_static_type5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $cmp = ($3|0)>(1);
  L4: do {
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $__flags = ((($this)) + 8|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     $4 = HEAP8[$search_done>>0]|0;
     $tobool14 = ($4<<24>>24)==(0);
     if (!($tobool14)) {
      break L4;
     }
     $5 = HEAP8[$found_our_static_ptr2>>0]|0;
     $tobool17 = ($5<<24>>24)==(0);
     if ($tobool17) {
      $8 = HEAP8[$found_any_static_type5>>0]|0;
      $tobool27 = ($8<<24>>24)==(0);
      if (!($tobool27)) {
       $9 = HEAP32[$__flags>>2]|0;
       $and30 = $9 & 1;
       $tobool31 = ($and30|0)==(0);
       if ($tobool31) {
        break L4;
       }
      }
     } else {
      $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp19 = ($6|0)==(1);
      if ($cmp19) {
       break L4;
      }
      $7 = HEAP32[$__flags>>2]|0;
      $and = $7 & 2;
      $tobool22 = ($and|0)==(0);
      if ($tobool22) {
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2>>0] = 0;
     HEAP8[$found_any_static_type5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr39 = ((($p$0)) + 8|0);
     $cmp40 = ($incdec$ptr39>>>0)<($add$ptr>>>0);
     if ($cmp40) {
      $p$0 = $incdec$ptr39;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$found_our_static_ptr2>>0] = $1;
  HEAP8[$found_any_static_type5>>0] = $2;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp27 = 0, $cmp44 = 0, $cmp46 = 0, $cmp5 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0;
 var $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0, $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $arraydecay62 = ((($this)) + 16|0);
    $__base_count63 = ((($this)) + 12|0);
    $16 = HEAP32[$__base_count63>>2]|0;
    $add$ptr64 = (((($this)) + 16|0) + ($16<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62,$info,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr69 = ((($this)) + 24|0);
    $cmp70 = ($16|0)>(1);
    if (!($cmp70)) {
     break;
    }
    $__flags72 = ((($this)) + 8|0);
    $17 = HEAP32[$__flags72>>2]|0;
    $and73 = $17 & 2;
    $tobool74 = ($and73|0)==(0);
    if ($tobool74) {
     $number_to_static_ptr76 = ((($info)) + 36|0);
     $18 = HEAP32[$number_to_static_ptr76>>2]|0;
     $cmp77 = ($18|0)==(1);
     if (!($cmp77)) {
      $and88 = $17 & 1;
      $tobool89 = ($and88|0)==(0);
      if ($tobool89) {
       $search_done110 = ((($info)) + 54|0);
       $p65$2 = $incdec$ptr69;
       while(1) {
        $23 = HEAP8[$search_done110>>0]|0;
        $tobool111 = ($23<<24>>24)==(0);
        if (!($tobool111)) {
         break L1;
        }
        $24 = HEAP32[$number_to_static_ptr76>>2]|0;
        $cmp115 = ($24|0)==(1);
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
        $incdec$ptr120 = ((($p65$2)) + 8|0);
        $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      }
      $path_dst_ptr_to_static_ptr99 = ((($info)) + 24|0);
      $search_done92 = ((($info)) + 54|0);
      $p65$1 = $incdec$ptr69;
      while(1) {
       $20 = HEAP8[$search_done92>>0]|0;
       $tobool93 = ($20<<24>>24)==(0);
       if (!($tobool93)) {
        break L1;
       }
       $21 = HEAP32[$number_to_static_ptr76>>2]|0;
       $cmp97 = ($21|0)==(1);
       if ($cmp97) {
        $22 = HEAP32[$path_dst_ptr_to_static_ptr99>>2]|0;
        $cmp100 = ($22|0)==(1);
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
       $incdec$ptr105 = ((($p65$1)) + 8|0);
       $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    }
    $search_done79 = ((($info)) + 54|0);
    $p65$0 = $incdec$ptr69;
    while(1) {
     $19 = HEAP8[$search_done79>>0]|0;
     $tobool80 = ($19<<24>>24)==(0);
     if (!($tobool80)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr84 = ((($p65$0)) + 8|0);
     $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $arraydecay = ((($this)) + 16|0);
     $__base_count = ((($this)) + 12|0);
     $5 = HEAP32[$__base_count>>2]|0;
     $add$ptr = (((($this)) + 16|0) + ($5<<3)|0);
     $found_our_static_ptr = ((($info)) + 52|0);
     $found_any_static_type = ((($info)) + 53|0);
     $search_done = ((($info)) + 54|0);
     $__flags34 = ((($this)) + 8|0);
     $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type13$0$off0 = 0;$p$0 = $arraydecay;
     L32: while(1) {
      $cmp16 = ($p$0>>>0)<($add$ptr>>>0);
      if (!($cmp16)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr>>0] = 0;
      HEAP8[$found_any_static_type>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $6 = HEAP8[$search_done>>0]|0;
      $tobool18 = ($6<<24>>24)==(0);
      if (!($tobool18)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      $7 = HEAP8[$found_any_static_type>>0]|0;
      $tobool22 = ($7<<24>>24)==(0);
      do {
       if ($tobool22) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool25 = ($8<<24>>24)==(0);
        if ($tobool25) {
         $11 = HEAP32[$__flags34>>2]|0;
         $and35 = $11 & 1;
         $tobool36 = ($and35|0)==(0);
         if ($tobool36) {
          $is_dst_type_derived_from_static_type13$2$off0 = 1;
          label = 18;
          break L32;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = 1;
          break;
         }
        }
        $9 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($9|0)==(1);
        if ($cmp27) {
         label = 23;
         break L32;
        }
        $10 = HEAP32[$__flags34>>2]|0;
        $and = $10 & 2;
        $tobool30 = ($and|0)==(0);
        if ($tobool30) {
         label = 23;
         break L32;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
        }
       }
      } while(0);
      $incdec$ptr = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;$p$0 = $incdec$ptr;
     }
     do {
      if ((label|0) == 18) {
       if (!($does_dst_type_point_to_our_static_type$0$off0)) {
        HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
        $number_to_dst_ptr = ((($info)) + 40|0);
        $12 = HEAP32[$number_to_dst_ptr>>2]|0;
        $add = (($12) + 1)|0;
        HEAP32[$number_to_dst_ptr>>2] = $add;
        $number_to_static_ptr = ((($info)) + 36|0);
        $13 = HEAP32[$number_to_static_ptr>>2]|0;
        $cmp44 = ($13|0)==(1);
        if ($cmp44) {
         $14 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
         $cmp46 = ($14|0)==(2);
         if ($cmp46) {
          HEAP8[$search_done>>0] = 1;
          if ($is_dst_type_derived_from_static_type13$2$off0) {
           label = 23;
           break;
          } else {
           $15 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$2$off0) {
        label = 23;
       } else {
        $15 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $15 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $15;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $arraydecay = ((($this)) + 16|0);
   $__base_count = ((($this)) + 12|0);
   $1 = HEAP32[$__base_count>>2]|0;
   $add$ptr = (((($this)) + 16|0) + ($1<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
   $cmp = ($1|0)>(1);
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $2 = HEAP8[$search_done>>0]|0;
     $tobool = ($2<<24>>24)==(0);
     if (!($tobool)) {
      break L1;
     }
     $incdec$ptr6 = ((($p$0)) + 8|0);
     $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$adjustedPtr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 28|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiii[$4 & 511]($3,$info,$add$ptr4,$cond);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiiii[$4 & 511]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiii[$4 & 511]($3,$info,$add$ptr4,$cond,$use_strcmp);
 return;
}
function ___cxa_guard_acquire($p) {
 $p = $p|0;
 var $0 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  HEAP8[$p>>0] = 1;
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5364]|0;
 $1 = (($0) + 0)|0;
 HEAP32[5364] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 511]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,7152,7208,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $2 = $phitmp1;
 }
 return ($2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&511](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&0]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(5);return 0;
}
function b6(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(10);return 0;
}
function b11() {
 ; nullFunc_v(11);
}
function b12(p0) {
 p0 = p0|0; nullFunc_vi(12);
}
function b13(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(13);
}
function b14(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(14);
}
function b15(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15);
}
function b16(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(16);
}
function b17(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b0,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b0,b0,b0,b0,b0,b0,b0,b0,b0
,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b0,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__211__stdoutbufIwE4syncEv,b0,b0,b0
,b0,__ZNSt3__211__stdoutbufIcE4syncEv,b0,b0,b0,b0,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,b0,b0,b0,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b0,b0,b0,b0,b0,b0,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,b0,b0,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
,b0,b0,b0,b0,b0,b0,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b0,b0
,b0,b0,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b0,b0,b0,b0
,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,b0,b0,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b0,b0,b0,b0,b0,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iidiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,_fmt_fp,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__211__stdoutbufIwE8overflowEj,b2
,b2,b2,b2,__ZNSt3__211__stdoutbufIcE8overflowEi,b2,b2,b2,b2,__ZNSt3__210__stdinbufIwE9pbackfailEj,b2,b2,b2,b2,__ZNSt3__210__stdinbufIcE9pbackfailEi,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__25ctypeIcE10do_toupperEc,b2,__ZNKSt3__25ctypeIcE10do_tolowerEc,b2,__ZNKSt3__25ctypeIcE8do_widenEc,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__25ctypeIwE10do_toupperEw,b2,__ZNKSt3__25ctypeIwE10do_tolowerEw,b2,__ZNKSt3__25ctypeIwE8do_widenEc,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,___stdio_write,b3,___stdio_read,___stdout_write,_sn_write,b3,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,b3,b3,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,b3,b3
,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,b3,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,b3,b3
,b3,b3,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b3,b3,b3,b3,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b3,b3,b3,b3,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b3,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b3,b3,__ZNKSt3__25ctypeIcE9do_narrowEcc,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIwE5do_isEtw,b3,b3,b3,b3,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,b3,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b3,b3,__ZNKSt3__25ctypeIwE9do_narrowEwc,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,_do_read,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,___stdio_seek,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b4,b4,b4,b4,b4,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiiid = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce
,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b6,b6,b6,b6,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b6,b6,b6
,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b6,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b6,b6,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b6,b6
,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiid = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b7,b7,b7,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx
,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b8,b8,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b8,b8,b8,b8,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b8,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b8,b8
,b8,b8,b8,b8,b8,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b8,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b8,b8,b8,b8,b8,b8,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b8,b8,b8,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_
,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b10,b10,b10,b10,b10,b10,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_v = [b11];
var FUNCTION_TABLE_vi = [b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,b12,b12,b12,b12,__ZNSt3__211__stdoutbufIcED0Ev
,b12,b12,b12,b12,__ZNSt3__210__stdinbufIwED0Ev,b12,b12,b12,b12,__ZNSt3__210__stdinbufIcED0Ev,b12,b12,b12,b12,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b12,b12,b12,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,b12,b12,b12,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b12,b12,b12,b12,b12,b12
,b12,b12,b12,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b12,b12,b12,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b12,b12,b12,__ZNSt3__26locale5facetD2Ev
,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,b12,b12,b12,b12,b12,b12,b12,b12
,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b12,b12,b12,b12,b12,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b12,b12,b12,b12,b12,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b12
,b12,b12,b12,b12,b12,b12,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b12,b12,b12,b12,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b12,b12,b12,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b12,b12
,b12,b12,b12,b12,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_vii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,b13,b13,b13,b13
,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,b13,b13,b13,b13,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,b13,b13,b13,b13,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv
,b13,b13,b13,b13,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,b13,b13,b13,b13,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,b13,b13,b13,b13,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv
,b13,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__28messagesIcE8do_closeEl,b13,b13,b13,b13,__ZNKSt3__28messagesIwE8do_closeEl,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,b13,b13,b13,b13,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,_pop_arg_long_double,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viii = [b14];
var FUNCTION_TABLE_viiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b15,b15,b15,b15,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15
,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b16,b16,b16,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b16,b16,b16,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_viiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b17,b17,b17,b17,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"];
asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"];
asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"];
asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm["globalCtors"];
asm["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = '"' + what + '"';
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



